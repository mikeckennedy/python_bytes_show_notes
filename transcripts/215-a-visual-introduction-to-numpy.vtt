
00:00:00.000 --> 00:00:05.500
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.500 --> 00:00:09.160
This is episode 215, recorded January 6th.


00:00:09.160 --> 00:00:10.860
One of my favorite dates, 21.


00:00:10.860 --> 00:00:11.760
I'm Brian Okken.


00:00:11.760 --> 00:00:12.800
I'm Michael Kennedy.


00:00:12.800 --> 00:00:13.860
And we have Jason.


00:00:13.860 --> 00:00:14.360
Hello.


00:00:14.360 --> 00:00:16.660
Yeah, hey Jason, nice to have you here. Jason McDonald.


00:00:16.660 --> 00:00:18.400
Yeah, it's good to be here. Thank you for having me.


00:00:18.400 --> 00:00:24.160
Yeah, thanks for joining us. Oh, and Brian, I think he's going to cover something we haven't really covered much on the show, GUIs.


00:00:24.160 --> 00:00:25.160
Oh, good.


00:00:25.160 --> 00:00:26.160
Yeah.


00:00:26.160 --> 00:00:35.040
Actually, to be honest, I know this is like a longstanding joke in the show for long time listeners, but we actually haven't covered goos that much recently, but there was a long stretch where we did.


00:00:35.040 --> 00:00:37.560
Yeah, yeah, that was probably like a year ago.


00:00:37.560 --> 00:00:41.120
Yeah, yeah, like my programming projects and my brownies to be gooey.


00:00:41.120 --> 00:00:45.360
And fudge, come on, fudge is good.


00:00:45.360 --> 00:00:47.880
And you like bad jokes, so you'll fit in nice.


00:00:47.880 --> 00:00:48.840
Oh, absolutely.


00:00:48.840 --> 00:00:50.760
No, if anyone likes puns, follow my Twitter.


00:00:50.760 --> 00:00:52.440
I posted original every Monday.


00:00:52.440 --> 00:00:53.720
(laughs)


00:00:53.720 --> 00:00:54.560
- Nice.


00:00:54.560 --> 00:00:56.200
I heard that there's gonna be a lot of exciting news


00:00:56.200 --> 00:00:58.000
for space in 2021.


00:00:58.000 --> 00:01:00.880
So I kind of wanna bring a little space and Python together.


00:01:00.880 --> 00:01:02.000
- That's good, yeah.


00:01:02.000 --> 00:01:02.820
- Yeah.


00:01:02.820 --> 00:01:04.820
So the first topic that I wanna talk about


00:01:04.820 --> 00:01:09.400
is this video done by a woman in the UK


00:01:09.400 --> 00:01:11.160
who is a astrophysicist.


00:01:11.160 --> 00:01:14.960
She goes by the name Dr. Becky, which is cool.


00:01:14.960 --> 00:01:16.780
She has a fantastic YouTube channel.


00:01:16.780 --> 00:01:18.720
She's also a Python developer


00:01:18.720 --> 00:01:22.520
and she works in cosmology, which is pretty cool.


00:01:22.520 --> 00:01:25.820
And she did this video that I'd just like to highlight


00:01:25.820 --> 00:01:28.440
for people who maybe are coming into Python,


00:01:28.440 --> 00:01:32.760
not from the, hey, I'm gonna create a microservice


00:01:32.760 --> 00:01:34.880
set of APIs talking to Docker,


00:01:34.880 --> 00:01:37.480
but more from the, hey, I do some kind of science


00:01:37.480 --> 00:01:39.080
or data science or something like that.


00:01:39.080 --> 00:01:40.800
And the video is called,


00:01:40.800 --> 00:01:44.320
The Five Ways That I Use Code As An Astrophysicist.


00:01:44.320 --> 00:01:45.360
Cool, huh? - Yeah.


00:01:45.360 --> 00:01:48.160
- Yeah, so she basically lays out the idea of,


00:01:48.160 --> 00:01:52.600
As a modern day scientist, you can barely do your job


00:01:52.600 --> 00:01:55.080
if you're not doing some sort of programming.


00:01:55.080 --> 00:01:57.540
And of course, one of the best languages,


00:01:57.540 --> 00:01:59.920
technologies for programming these days


00:01:59.920 --> 00:02:02.440
is Python in the data science space, right?


00:02:02.440 --> 00:02:03.320
- Surprise, surprise.


00:02:03.320 --> 00:02:06.120
- Yeah, no big surprise there since 2012, I would say.


00:02:06.120 --> 00:02:08.600
And so she covers five different things


00:02:08.600 --> 00:02:09.920
with examples of each.


00:02:09.920 --> 00:02:11.920
So I thought that was just a nice way


00:02:11.920 --> 00:02:14.840
for people who are either getting into Python


00:02:14.840 --> 00:02:16.720
from a science side, or maybe they're teachers


00:02:16.720 --> 00:02:17.920
and they want people to ask,


00:02:17.920 --> 00:02:19.840
"Why should I not just use MATLAB


00:02:19.840 --> 00:02:21.440
"or some other custom tool?"


00:02:21.440 --> 00:02:22.880
Like, let me show you.


00:02:22.880 --> 00:02:24.280
So here's some really cool examples


00:02:24.280 --> 00:02:27.740
of real astronomy being done with Python,


00:02:27.740 --> 00:02:30.640
but it's also super accessible to


00:02:30.640 --> 00:02:32.440
even like middle schoolers, I would say.


00:02:32.440 --> 00:02:34.820
And number one is image processing


00:02:34.820 --> 00:02:37.320
of galaxies from telescopes.


00:02:37.320 --> 00:02:40.400
So you can do things like noise removal.


00:02:40.400 --> 00:02:43.120
So it turns out that when you're taking pictures of galaxies,


00:02:43.120 --> 00:02:45.880
even if there's no actual background light


00:02:45.880 --> 00:02:49.400
or disturbances, just the basic disturbance


00:02:49.400 --> 00:02:52.120
in the actual sensors themselves


00:02:52.120 --> 00:02:55.760
will put little marks and imperfections in the images.


00:02:55.760 --> 00:02:59.480
So using Python to go through and clean those up


00:02:59.480 --> 00:03:01.080
makes it much easier to get started.


00:03:01.080 --> 00:03:02.620
And the size of these pictures


00:03:02.620 --> 00:03:04.120
and the amount of data coming in


00:03:04.120 --> 00:03:07.640
from some of these new telescopes is stunningly large.


00:03:07.640 --> 00:03:08.600
- Yeah, for sure.


00:03:08.600 --> 00:03:11.120
Another one is data analysis.


00:03:11.120 --> 00:03:14.040
So if you're trying to find the brightness


00:03:14.040 --> 00:03:15.320
of some part of an image,


00:03:15.320 --> 00:03:18.400
say maybe you're looking for a transit of an exoplanet, right?


00:03:18.400 --> 00:03:21.120
You want to constantly monitor the brightness of a star,


00:03:21.120 --> 00:03:22.960
or in her case, what she's studying,


00:03:22.960 --> 00:03:25.200
it just blows my mind, she's studying galaxies.


00:03:25.200 --> 00:03:27.200
Like when you see pictures of stars and you zoom in,


00:03:27.200 --> 00:03:29.280
you're like, oh, that's not a star, that's a galaxy.


00:03:29.280 --> 00:03:30.280
Right, it's just, you know,


00:03:30.280 --> 00:03:32.240
like I still can't really get my mind around that,


00:03:32.240 --> 00:03:33.880
but she talks about one of her data sets


00:03:33.880 --> 00:03:38.280
that has 600,000 rows of like brightness of galaxies.


00:03:38.280 --> 00:03:39.840
So 600,000 galaxies,


00:03:39.840 --> 00:03:42.120
they all have information about that they're comparing.


00:03:42.120 --> 00:03:43.720
So that's pretty awesome, right?


00:03:43.720 --> 00:03:44.560
- Yep.


00:03:44.560 --> 00:03:50.560
There's an example about theory that most galaxies have a supermassive black hole in the middle.


00:03:50.560 --> 00:03:57.560
There's also this idea that possibly the size of the black hole and the size of the galaxy, these things kind of grow in mass together.


00:03:57.560 --> 00:04:02.560
So she has all this data. She's like, well, let's do some statistical fits of black hole size and galaxy size.


00:04:02.560 --> 00:04:08.560
Also, the color of galaxies can indicate the relative speed or rate of star formation.


00:04:08.560 --> 00:04:09.560
And the age.


00:04:09.560 --> 00:04:12.560
And the age, exactly. Yeah. All tied together.


00:04:12.560 --> 00:04:14.740
And so she's using Python for that.


00:04:14.740 --> 00:04:16.540
Finally, data visualization, you know,


00:04:16.540 --> 00:04:19.280
pretty straightforward, but in drawing graphs and pictures.


00:04:19.280 --> 00:04:22.520
And the last part that I was my favorite part is simulation.


00:04:22.520 --> 00:04:24.380
So there's two really cool examples.


00:04:24.380 --> 00:04:28.080
What happens if a star gets too close to a black hole


00:04:28.080 --> 00:04:31.140
and gets, she said, spaghetti-ified, that's cool.


00:04:31.140 --> 00:04:35.180
And the other one is examples of galaxies colliding,


00:04:35.180 --> 00:04:37.180
which is just, again, mind-blowing,


00:04:37.180 --> 00:04:40.300
but really cool computational examples of all that.


00:04:40.300 --> 00:04:42.020
So I wanted to highlight this video


00:04:42.020 --> 00:04:43.140
because it's super accessible,


00:04:43.140 --> 00:04:46.060
but it's also really neat to show concrete examples


00:04:46.060 --> 00:04:48.100
of real science being done with Python.


00:04:48.100 --> 00:04:49.460
- Yeah, I thought it was cool when she was talking


00:04:49.460 --> 00:04:52.220
to her colleague about building the simulations


00:04:52.220 --> 00:04:54.060
of the universe.


00:04:54.060 --> 00:04:55.500
You have a simulation of the universe,


00:04:55.500 --> 00:04:57.540
where do you start on that?


00:04:57.540 --> 00:05:01.020
It's like, we think we have project blocking.


00:05:01.020 --> 00:05:02.340
You know, it's like you start on a project,


00:05:02.340 --> 00:05:03.900
it's like, yeah, I'm just gonna build a tool.


00:05:03.900 --> 00:05:04.720
Where do I begin?


00:05:04.720 --> 00:05:06.020
It's like, I'm gonna build a simulation


00:05:06.020 --> 00:05:06.980
of the entire universe.


00:05:06.980 --> 00:05:08.140
Where do I start?


00:05:08.140 --> 00:05:08.980
- Exactly.


00:05:09.940 --> 00:05:12.700
I'm going to simulate gravity at a collective scale.


00:05:12.700 --> 00:05:13.540
Let's just do that.


00:05:13.540 --> 00:05:14.780
Yeah.


00:05:14.780 --> 00:05:15.200
Awesome.


00:05:15.200 --> 00:05:18.800
So if people are out there and they're interested in this kind of stuff,


00:05:18.800 --> 00:05:20.660
yeah, this is all in one video.


00:05:20.660 --> 00:05:21.060
Yeah.


00:05:21.060 --> 00:05:22.140
This is all in one video.


00:05:22.140 --> 00:05:22.980
Yeah.


00:05:22.980 --> 00:05:24.940
Robert says star galaxy.


00:05:24.940 --> 00:05:25.400
It's big.


00:05:25.400 --> 00:05:25.500
Yeah.


00:05:25.500 --> 00:05:28.580
They're, they're both huge, but obviously man, it's just like, I can't get my head


00:05:28.580 --> 00:05:30.140
around like galaxy size stuff.


00:05:30.140 --> 00:05:35.980
It's so, so stars and a star as a, as a primitive type and in the universe and


00:05:35.980 --> 00:05:38.080
and that a galaxy is a collection.


00:05:38.080 --> 00:05:39.260
(laughing)


00:05:39.260 --> 00:05:41.260
That's what I just immediately go to right there.


00:05:41.260 --> 00:05:43.100
- Yeah, yeah, exactly.


00:05:43.100 --> 00:05:45.900
Exactly, yeah, so Brian, it's like a 15 minute video


00:05:45.900 --> 00:05:47.980
that half of it is the stuff that I talked about,


00:05:47.980 --> 00:05:49.420
then half is what Jason touched on.


00:05:49.420 --> 00:05:51.380
She actually interviews one of her colleagues


00:05:51.380 --> 00:05:53.820
who basically does the more,


00:05:53.820 --> 00:05:55.460
the simulation side of programming.


00:05:55.460 --> 00:05:56.780
- That's pretty cool, yeah.


00:05:56.780 --> 00:05:58.100
- Yeah, yeah. - I'll have to check that out.


00:05:58.100 --> 00:05:59.120
- Yeah, it's definitely worth it.


00:05:59.120 --> 00:05:59.960
- Yeah, I enjoyed it.


00:05:59.960 --> 00:06:01.980
I don't do very much data science actually at all,


00:06:01.980 --> 00:06:03.980
and so it's like, you know, understanding,


00:06:03.980 --> 00:06:06.260
Seeing data science stuff is always interesting


00:06:06.260 --> 00:06:09.460
because most of my work is in application development.


00:06:09.460 --> 00:06:10.900
I don't usually work with a lot of data,


00:06:10.900 --> 00:06:12.980
so it's that side of it explained


00:06:12.980 --> 00:06:14.900
in this really cool, relevant way.


00:06:14.900 --> 00:06:16.220
Instead of, well, the statistics


00:06:16.220 --> 00:06:19.820
is a number of people who buy cheese every weekend,


00:06:19.820 --> 00:06:21.300
but the supermarket is not interested.


00:06:21.300 --> 00:06:22.660
Galaxies, wow.


00:06:22.660 --> 00:06:25.340
- Exactly, getting better click-through rates on your ads


00:06:25.340 --> 00:06:26.580
is not super compelling,


00:06:26.580 --> 00:06:28.420
but I think it's really valuable


00:06:28.420 --> 00:06:30.660
to see alternate perspectives, right?


00:06:30.660 --> 00:06:32.300
We all get into our own little world


00:06:32.300 --> 00:06:33.720
of like, this is what programming is,


00:06:33.720 --> 00:06:37.000
this is what Python is for, and then, you know, it's bigger.


00:06:37.000 --> 00:06:39.240
- I wanna talk about NumPy a little bit.


00:06:39.240 --> 00:06:40.320
- All right, tell us about it.


00:06:40.320 --> 00:06:44.240
- Well, I've actually, I've used NumPy off and on a lot,


00:06:44.240 --> 00:06:46.800
and it's definitely a staple in scientific use


00:06:46.800 --> 00:06:48.400
of machine learning and all sorts of stuff.


00:06:48.400 --> 00:06:50.680
But I'm starting to use it more,


00:06:50.680 --> 00:06:54.920
and I've realized that I had the wrong mental model.


00:06:54.920 --> 00:06:57.980
So I like, think of arrays kind of just like lists,


00:06:57.980 --> 00:06:59.000
but sort of different.


00:06:59.000 --> 00:07:02.000
And so I came across this article.


00:07:02.000 --> 00:07:05.080
a couple years old, but it's a visual intro to NumPy and data


00:07:05.080 --> 00:07:09.120
represent. And to me, it really helps a lot, like, to help me


00:07:09.120 --> 00:07:12.000
understand what you can do with it, and just have a good mental


00:07:12.000 --> 00:07:16.560
picture of what what the arrays are in NumPy. So it talks about


00:07:16.560 --> 00:07:20.880
arrays, matrices, and in the arrays, which are in dimensional,


00:07:20.880 --> 00:07:24.360
but like, for instance, I'm even just creating an array, I knew


00:07:24.360 --> 00:07:27.320
how to create an array, I mean, you just kind of initialize it


00:07:27.320 --> 00:07:30.240
with a list and you get an array. But I didn't know you


00:07:30.240 --> 00:07:36.880
You could do like just say I want a list of ones or a list of zeros or an array of ones


00:07:36.880 --> 00:07:40.400
or just a random array pre filled with random numbers.


00:07:40.400 --> 00:07:41.400
That's pretty.


00:07:41.400 --> 00:07:45.680
And then he talks about arithmetic you can do with them and slicing stuff.


00:07:45.680 --> 00:07:49.800
You know, Brian, like when we talk about Pythonic code all the time, like, oh, you could write


00:07:49.800 --> 00:07:53.800
code in this way where you kind of hack a numerical for loop, but you should do this


00:07:53.800 --> 00:07:54.800
other way.


00:07:54.800 --> 00:07:55.800
And that would be more Pythonic.


00:07:55.800 --> 00:07:58.320
I suspect there's also a numpy way.


00:07:58.320 --> 00:08:00.080
A numpy way, right?


00:08:00.080 --> 00:08:01.300
Instead of like filling up stuff,


00:08:01.300 --> 00:08:03.120
you're like, oh, you should just do ones on this one.


00:08:03.120 --> 00:08:06.100
And then you always, like, there's a lot of cool


00:08:06.100 --> 00:08:08.800
other ways of sort of conceptualizing things, right?


00:08:08.800 --> 00:08:09.640
- Yeah.


00:08:09.640 --> 00:08:11.440
Well, and it's worth remembering,


00:08:11.440 --> 00:08:14.360
and I've said this quite a few times,


00:08:14.360 --> 00:08:18.200
not here obviously, but I regularly like to remind people,


00:08:18.200 --> 00:08:20.160
abstractions are there to save us typing,


00:08:20.160 --> 00:08:21.640
never to save us thinking.


00:08:21.640 --> 00:08:24.200
It's like, it helps to have that mental model,


00:08:24.200 --> 00:08:25.960
as you put it, Brian, you know, straight,


00:08:25.960 --> 00:08:28.400
because if your mental model is wrong,


00:08:28.400 --> 00:08:32.640
and really wind up, well, you're prone to both cargo cold programming, well, I do it


00:08:32.640 --> 00:08:38.400
this way because the way I was taught, or trying to, you know, ill fit pattern that's


00:08:38.400 --> 00:08:42.200
familiar to, you know, the wrong sort of problem, and you don't realize what it is you're really


00:08:42.200 --> 00:08:46.400
working with. So understanding what's happening under the hood, even if you know, you don't


00:08:46.400 --> 00:08:50.160
know all the technical details of the application, still understanding how it's doing things


00:08:50.160 --> 00:08:55.200
important to, you know, choosing the right idiomatic patterns always. Yeah, yeah. And


00:08:55.200 --> 00:08:57.960
you'll hear stuff like, oh, well, Python is slow. It's like, well, because you're doing


00:08:57.960 --> 00:09:01.440
it wrong. Don't do it that way. For example, use something like NumPy, right?


00:09:01.440 --> 00:09:04.800
And like, for instance, one of the things I really loved about this article was the


00:09:04.800 --> 00:09:10.440
explanation of dot product because I've heard this before. I've never had to use a dot product,


00:09:10.440 --> 00:09:15.080
but it like somebody described it to me several times and I'm like, yeah, okay, weird. But


00:09:15.080 --> 00:09:19.560
then like the visual representation of it, I looked like just stared at it and read it


00:09:19.560 --> 00:09:24.760
for like, you know, 30 seconds. Oh, that's easy. Now I get it. And I'll have it forever


00:09:24.760 --> 00:09:27.660
because of that sunk in there pretty good.


00:09:27.660 --> 00:09:30.440
One of the reasons why I went to it.


00:09:30.440 --> 00:09:33.840
I had this problem is that I I have like large


00:09:33.840 --> 00:09:34.480
arrays,


00:09:34.480 --> 00:09:36.360
but they're not like huge.


00:09:36.360 --> 00:09:39.760
They're like in the thousands say of numbers and I


00:09:39.760 --> 00:09:43.240
need to make sure that one array is like comparing


00:09:43.240 --> 00:09:44.120
to another.


00:09:44.120 --> 00:09:46.160
I know equal works air free,


00:09:46.160 --> 00:09:49.080
but I wanted to compare item by item if to


00:09:49.080 --> 00:09:52.880
make sure every element is less than the other element


00:09:52.880 --> 00:09:54.240
in the other array.


00:09:54.240 --> 00:09:55.920
They didn't know how to do that.


00:09:55.920 --> 00:09:58.400
And I'm like, I think NumPy would probably do that easy.


00:09:58.400 --> 00:10:01.040
- Can you do one NumPy array less than the other?


00:10:01.040 --> 00:10:02.800
- Yeah, so if you say less than,


00:10:02.800 --> 00:10:04.480
it compares it element by element


00:10:04.480 --> 00:10:07.060
and it gives you a list of true or false.


00:10:07.060 --> 00:10:08.400
And then you can do all.


00:10:08.400 --> 00:10:09.240
- Yeah, do an all on it, yeah.


00:10:09.240 --> 00:10:12.360
- You can just say all of these two arrays


00:10:12.360 --> 00:10:13.580
less than or equal to each other


00:10:13.580 --> 00:10:15.120
and I get exactly what I want.


00:10:15.120 --> 00:10:17.680
They're very expressive, simple line of code.


00:10:17.680 --> 00:10:19.520
- Yeah, it's that kind of stuff I was thinking of


00:10:19.520 --> 00:10:21.520
when I was talking about like the NumPy,


00:10:21.520 --> 00:10:23.560
NumPyonic way or whatever.


00:10:23.560 --> 00:10:24.960
- Idiomatic NumPy.


00:10:24.960 --> 00:10:25.800
- Thank you.


00:10:25.800 --> 00:10:26.640
(laughing)


00:10:26.640 --> 00:10:28.200
Is like, that's like one or two lines


00:10:28.200 --> 00:10:29.040
and it's really fast.


00:10:29.040 --> 00:10:31.440
Whereas you could loop over each item individually


00:10:31.440 --> 00:10:33.920
and it not only is more code, but it's also slower.


00:10:33.920 --> 00:10:36.320
- Yeah, well, and also I like, I also have to,


00:10:36.320 --> 00:10:38.960
I like that there's the intermediate step of that there's,


00:10:38.960 --> 00:10:40.720
gives me a list of true and false too,


00:10:40.720 --> 00:10:43.400
because I also on the debugging side,


00:10:43.400 --> 00:10:45.760
I need to be able to like wrap this in something


00:10:45.760 --> 00:10:48.520
and pick like say the first five elements


00:10:48.520 --> 00:10:49.920
that are not matching.


00:10:49.920 --> 00:10:53.220
I mean, I don't want, if I, if it's false,


00:10:53.220 --> 00:10:54.120
the whole statement's false.


00:10:54.120 --> 00:10:55.740
I don't wanna like just say,


00:10:55.740 --> 00:10:58.260
you know, list all the thousands that are wrong,


00:10:58.260 --> 00:11:01.180
but I wanna be able to like list a few to say,


00:11:01.180 --> 00:11:02.860
at least these are not in the right.


00:11:02.860 --> 00:11:03.840
- Yeah. - Yeah.


00:11:03.840 --> 00:11:04.680
- It's good.


00:11:04.680 --> 00:11:05.980
- I'm gonna try out NumPy now.


00:11:05.980 --> 00:11:09.020
I now have a reason to try it out.


00:11:09.020 --> 00:11:10.820
- Exactly, like why am I not using this


00:11:10.820 --> 00:11:12.240
in certain situations?


00:11:12.240 --> 00:11:14.340
Magnus of the live stream says,


00:11:14.340 --> 00:11:16.260
"Two dimensions is okay, three is hard,


00:11:16.260 --> 00:11:18.260
but N, then my mind blows."


00:11:18.260 --> 00:11:20.140
Yeah, I actually did a bunch of math research


00:11:20.140 --> 00:11:21.500
and four dimensional stuff,


00:11:21.500 --> 00:11:26.460
dimensional but complex numbers. So four dimensional sort of. And yeah, it's just it's just hard.


00:11:26.460 --> 00:11:30.860
Well, one of my weird knacks as a programmer is I actually can think in six dimensions.


00:11:30.860 --> 00:11:34.460
It's I mentioned before the podcast I had a head injury a few years ago, so I'm a minor


00:11:34.460 --> 00:11:38.460
traumatic savant. I can think in six dimensions and the best way I can explain it if you're


00:11:38.460 --> 00:11:43.860
trying to do it without having a really bizarre brain like mine is think of think of the fourth


00:11:43.860 --> 00:11:49.940
dimension as a timeline and for each timeline you have you have space represented as a cube,


00:11:49.940 --> 00:11:53.420
But then you have this row of cubes, which represents the timeline.


00:11:53.420 --> 00:11:57.620
It becomes a lot easier to think of four dimensional arrays when you think of it in that fashion.


00:11:57.620 --> 00:11:58.620
Yeah.


00:11:58.620 --> 00:12:01.660
And the way that we did it, we actually had animations of that three dimension thing and


00:12:01.660 --> 00:12:04.180
the animations were moving through that, that bit.


00:12:04.180 --> 00:12:07.140
But still it's, it's, it's no easy, no easy thing.


00:12:07.140 --> 00:12:08.140
Yeah.


00:12:08.140 --> 00:12:11.220
It's easier when you're an animator to wrap your head around 4D than if you're just a,


00:12:11.220 --> 00:12:14.420
you know, an ordinary run of the mill programmer like most of us.


00:12:14.420 --> 00:12:17.940
Brian, would you say that that's a GUI type of solution?


00:12:17.940 --> 00:12:18.940
No.


00:12:18.940 --> 00:12:21.940
Maybe you could do something with cute.


00:12:21.940 --> 00:12:22.940
Yeah, yeah, yeah.


00:12:22.940 --> 00:12:25.440
Oh yeah, yeah, Jason.


00:12:25.440 --> 00:12:26.440
Yeah, who knows?


00:12:26.440 --> 00:12:27.440
It's possible.


00:12:27.440 --> 00:12:29.940
So that's our next topic.


00:12:29.940 --> 00:12:30.940
Grab it, Jason.


00:12:30.940 --> 00:12:31.940
Yeah, well, OK.


00:12:31.940 --> 00:12:36.940
Well, I was really excited to discover the Qt 6 just released on December 8th.


00:12:36.940 --> 00:12:41.940
So Qt, yeah, it is officially pronounced Qt, although it's very debatable.


00:12:41.940 --> 00:12:42.940
People are like, oh, it's Qt.


00:12:42.940 --> 00:12:43.940
It's Qt.


00:12:43.940 --> 00:12:44.940
GIF, GIF, come on.


00:12:44.940 --> 00:12:45.940
Yeah, exactly.


00:12:45.940 --> 00:12:46.940
Anyway, whatever you're going to call it.


00:12:46.940 --> 00:12:47.940
It just released.


00:12:47.940 --> 00:12:50.800
And this includes the Python binding so


00:12:50.800 --> 00:12:54.300
Pyside 6, Shabokan 6, which is the...


00:12:54.300 --> 00:13:01.300
So Pyside 2 was Qt 5 as if that made sense. Pyside 6 is Qt 6. Qt 6, even how I'm doing it.


00:13:01.300 --> 00:13:06.900
Anyway, so that just released. And you also have the PyQt 6 if you prefer


00:13:06.900 --> 00:13:13.700
Riverbanks version, but in whatever case you're gonna wind up with all the Qt 6 features.


00:13:13.700 --> 00:13:20.000
I think the coolest thing here is if you're doing like, you know, really fancy sort of


00:13:20.000 --> 00:13:22.100
graphics is that


00:13:22.100 --> 00:13:25.940
previously Qt 5 and prior had this hard dependency on OpenGL and


00:13:25.940 --> 00:13:32.060
They've actually put in a what they call the rendering hardware interface with an abstraction layer into Qt


00:13:32.060 --> 00:13:39.180
So now it can natively support whatever the 3d graphics driver is on that device whether it's DirectX, Vulkan, Metal


00:13:39.180 --> 00:13:41.300
whatever you want it to work with.


00:13:41.300 --> 00:13:42.780
But uses the native by default.


00:13:42.780 --> 00:13:43.340
You could.


00:13:43.340 --> 00:13:45.220
You could tell it to use whatever


00:13:45.220 --> 00:13:47.140
whatever you want. That is so cool.


00:13:47.140 --> 00:13:49.340
Yeah, and there's a bunch of other


00:13:49.340 --> 00:13:51.620
optimizations and fixes to have in here.


00:13:51.620 --> 00:13:54.340
I am really excited because I discovered


00:13:54.340 --> 00:13:57.300
this was actually introduced in 515,


00:13:57.300 --> 00:14:00.100
but they now support snake case.


00:14:00.100 --> 00:14:01.900
For those of us who are like


00:14:01.900 --> 00:14:03.620
Pep 8 addicts really hate the


00:14:03.620 --> 00:14:05.580
fact that cute kind of seemed to


00:14:05.580 --> 00:14:07.060
force you to use the camel case.


00:14:07.060 --> 00:14:08.300
You can use snake case.


00:14:08.300 --> 00:14:11.740
there is a setting for it.


00:14:11.740 --> 00:14:15.460
You can also use properties instead of getters and setters as of Keefex.


00:14:15.460 --> 00:14:18.240
So you can just rely on properties and that is,


00:14:18.240 --> 00:14:23.540
it makes it a lot easier to write idiomatic Python code that is cute,


00:14:23.540 --> 00:14:25.140
which is kind of fun.


00:14:25.140 --> 00:14:26.900
>> Well, it just feels wrong, right?


00:14:26.900 --> 00:14:29.820
Get with, set with, all those things.


00:14:29.820 --> 00:14:31.900
>> They also have this cool thing called property binding


00:14:31.900 --> 00:14:33.660
where you can actually link those together now too.


00:14:33.660 --> 00:14:35.220
It's like you can link the width and the height.


00:14:35.220 --> 00:14:37.260
So when you change the width, height automatically changes.


00:14:37.260 --> 00:14:40.060
Nice. Yeah, I really want to build some stuff with cute.


00:14:40.060 --> 00:14:42.960
I've got a few app ideas in mind.


00:14:42.960 --> 00:14:45.860
What I don't have is time sadly.


00:14:45.860 --> 00:14:46.660
Can you help me with that?


00:14:46.660 --> 00:14:48.360
Jason can tell me just have more time.


00:14:48.360 --> 00:14:52.160
Well, I know I have a reputation as a time Lord, but unfortunately,


00:14:52.160 --> 00:14:55.760
I can't control the stream of flow of time there.


00:14:55.760 --> 00:14:59.460
If I find my Tardis, I'll pick you up and drop you off, you know,


00:14:59.460 --> 00:15:02.760
10 years ago and you can relive those 10 years of additional things.


00:15:02.760 --> 00:15:04.160
Okay, that nice nice.


00:15:04.260 --> 00:15:05.180
- Obie, go.


00:15:05.180 --> 00:15:06.020
- Yep.


00:15:06.020 --> 00:15:09.100
Let's see, actually a couple of questions


00:15:09.100 --> 00:15:09.940
from the live stream.


00:15:09.940 --> 00:15:12.980
Magnus asks, "Any news about Qt going mobile?"


00:15:12.980 --> 00:15:16.380
- I actually am ashamed to admit I don't know.


00:15:16.380 --> 00:15:18.060
- I don't know either.


00:15:18.060 --> 00:15:21.380
But I think the bigger, more interesting question


00:15:21.380 --> 00:15:24.940
would, could PyQt stuff, like would you be able


00:15:24.940 --> 00:15:27.660
to write a Python Qt application and make it mobile?


00:15:27.660 --> 00:15:30.220
Right, I think that's where it gets really interesting.


00:15:30.220 --> 00:15:32.340
'Cause there's other, if you pick another language


00:15:32.340 --> 00:15:34.460
to like C++ or there's other options


00:15:34.460 --> 00:15:36.260
you might be able to choose.


00:15:36.260 --> 00:15:37.660
And then maybe you know this one,


00:15:37.660 --> 00:15:38.500
you're gonna ask,


00:15:38.500 --> 00:15:41.060
are there any well-known Python apps built with Qt?


00:15:41.060 --> 00:15:42.900
- Oh yeah, yeah, they're on the spot.


00:15:42.900 --> 00:15:43.740
I'm trying to think of one.


00:15:43.740 --> 00:15:47.820
Mine, it's not well-known, but I built Timecard in Qt.


00:15:47.820 --> 00:15:50.580
If you look up, if you look up Timecard,


00:15:50.580 --> 00:15:53.420
it's just a time tracking app that I built.


00:15:53.420 --> 00:15:57.180
But actually there's quite a lot built with Qt.


00:15:57.180 --> 00:15:58.620
I think with a K in front of it,


00:15:58.620 --> 00:16:04.340
If you're in the KDE, the entire KDE stack is built on top of Qt.


00:16:04.340 --> 00:16:07.380
There's actually quite a bit of it that's done in Python.


00:16:07.380 --> 00:16:11.320
Names are escaping me off the top of my head here.


00:16:11.320 --> 00:16:14.940
Anything in the KDE universe is Qt.


00:16:14.940 --> 00:16:17.100
You're either going to get C++ or Python.


00:16:17.100 --> 00:16:19.820
Python is certainly a lot faster to write.


00:16:19.820 --> 00:16:22.340
>> FileZilla, apparently, is built.


00:16:22.340 --> 00:16:28.260
One that I know that's written in it for sure, it's one of my favorite apps, actually, is


00:16:28.260 --> 00:16:31.820
Robo Mongo or Robo 3T it got renamed to.


00:16:31.820 --> 00:16:34.980
I believe it's just C++, it's not Python Qt,


00:16:34.980 --> 00:16:37.060
but that one's a really nice one as well.


00:16:37.060 --> 00:16:38.940
Actually, there's a huge long list,


00:16:38.940 --> 00:16:40.900
I'll put it in the show notes over here,


00:16:40.900 --> 00:16:43.660
of a bunch of apps written as well.


00:16:43.660 --> 00:16:47.300
- It's definitely a lot easier to write something in Qt.


00:16:47.300 --> 00:16:49.340
I've used a lot of different UI toolkits


00:16:49.340 --> 00:16:51.020
and Qt's definitely one of the easiest.


00:16:51.020 --> 00:16:52.300
- Yeah, the thing that I like about it


00:16:52.300 --> 00:16:54.260
is it looks like it belongs.


00:16:54.260 --> 00:16:56.140
'Cause so many apps you build with these sort of


00:16:56.140 --> 00:16:57.980
cross-platform things and it's just like,


00:16:57.980 --> 00:17:00.240
"Okay, well, that's not how the file dialog


00:17:00.240 --> 00:17:01.080
is supposed to look."


00:17:01.080 --> 00:17:02.380
You just know it's alien, but you're like,


00:17:02.380 --> 00:17:04.780
"No, no, this looks like it belongs here."


00:17:04.780 --> 00:17:06.420
- Well, and packaging's the other half of it,


00:17:06.420 --> 00:17:08.280
because I tried to build something with Kivy,


00:17:08.280 --> 00:17:11.200
and I love Kivy from a development standpoint.


00:17:11.200 --> 00:17:12.040
It's really cool.


00:17:12.040 --> 00:17:13.040
From a packaging standpoint,


00:17:13.040 --> 00:17:15.040
it's like beating yourself to death with a wet trout.


00:17:15.040 --> 00:17:20.040
So, and actually, if you're gonna do cross-platform,


00:17:20.040 --> 00:17:23.120
then actually, GTK's horrible too,


00:17:23.120 --> 00:17:24.880
because it's really hard to get it to package


00:17:24.880 --> 00:17:26.000
on Windows a lot of times.


00:17:26.000 --> 00:17:27.160
- Yeah. - It just works.


00:17:27.160 --> 00:17:28.960
It just packages everywhere.


00:17:28.960 --> 00:17:29.800
- Yeah, that's great.


00:17:29.800 --> 00:17:30.620
That's nice.


00:17:30.620 --> 00:17:32.600
All right, Brian, I think this episode


00:17:32.600 --> 00:17:34.640
is brought to everyone by us.


00:17:34.640 --> 00:17:35.480
- Wonderful.


00:17:35.480 --> 00:17:36.720
We're good people. - Yeah, so we are.


00:17:36.720 --> 00:17:38.200
We're doing a lot of work out there,


00:17:38.200 --> 00:17:39.640
as everyone probably knows.


00:17:39.640 --> 00:17:43.160
If you're into testing, check out Brian's pytest book.


00:17:43.160 --> 00:17:45.760
If you're looking to take a Python course,


00:17:45.760 --> 00:17:50.140
we are just about to pass 200 hours of Python courses


00:17:50.140 --> 00:17:51.600
over at Talk Python Training.


00:17:51.600 --> 00:17:52.760
I'm working on a new course,


00:17:52.760 --> 00:17:54.920
how to build web apps, not web APIs,


00:17:54.920 --> 00:17:58.000
but we have apps with FastAPI, super neat stuff.


00:17:58.000 --> 00:17:59.680
So that's, that should be out in a week or two.


00:17:59.680 --> 00:18:00.520
So anyway.


00:18:00.520 --> 00:18:04.040
- I wanted to bring up that there was kind of a spike


00:18:04.040 --> 00:18:08.440
in the itest book sales in last quarter of 2020


00:18:08.440 --> 00:18:10.920
and I'm hoping that like some schools


00:18:10.920 --> 00:18:13.640
and they try to teach testing while they're teaching stuff.


00:18:13.640 --> 00:18:14.920
- Yeah, that'd be super cool.


00:18:14.920 --> 00:18:16.560
- Yeah, it's nice to see more, more, more,


00:18:16.560 --> 00:18:18.680
more stuff about stuff other than unit test.


00:18:18.680 --> 00:18:20.520
I mean, unit test has its place, but I,


00:18:20.520 --> 00:18:22.520
when I wrote the chapter, I've got a book coming out in May


00:18:22.520 --> 00:18:24.040
and when I wrote the chapter on testing


00:18:24.040 --> 00:18:28.200
And one of my editors was like, thank you for not forcing me to edit yet one more unit


00:18:28.200 --> 00:18:29.200
test chapter.


00:18:29.200 --> 00:18:30.200
Nice.


00:18:30.200 --> 00:18:31.520
What's your book on?


00:18:31.520 --> 00:18:33.880
Oh, my book's called Dead Simple Python.


00:18:33.880 --> 00:18:39.560
It just it, it introduces the language of Python, the idiomatic practices of Python


00:18:39.560 --> 00:18:42.320
to people who are coming from another language.


00:18:42.320 --> 00:18:45.800
So if you don't want to have to sit through yet one more explanation of what a variable


00:18:45.800 --> 00:18:50.960
or a function is, or a class is, you can pick this up and it dives straight into the fine


00:18:50.960 --> 00:18:54.560
details of why idiomatic patterns are what they are in Python.


00:18:54.560 --> 00:18:54.960
Nice.


00:18:54.960 --> 00:18:56.160
That's, yeah, that's a great idea.


00:18:56.160 --> 00:19:00.880
The courses or books that say, "We're going to pretend you know nothing about the world,


00:19:00.880 --> 00:19:03.920
and we're going to force you to go through everything from scratch every time," that


00:19:03.920 --> 00:19:04.880
drives me crazy.


00:19:04.880 --> 00:19:10.160
The only thing else that drives me crazy, Brian, is when my Python GC is doing stuff


00:19:10.160 --> 00:19:12.320
when I know that it doesn't need to do stuff.


00:19:12.320 --> 00:19:14.880
Yeah, I like to not have to think about the garbage collector.


00:19:14.880 --> 00:19:16.000
And you generally don't, right?


00:19:16.000 --> 00:19:20.800
Like, one of the things that genuinely surprises me is the fact that we don't really


00:19:20.800 --> 00:19:23.000
talk about memory very much in Python.


00:19:23.000 --> 00:19:24.440
It's like, oh, okay, I think it cleans itself up.


00:19:24.440 --> 00:19:24.960
That's good.


00:19:24.960 --> 00:19:25.440
Now what?


00:19:25.440 --> 00:19:26.840
Let's go, let's go about stuff, right?


00:19:26.840 --> 00:19:29.560
But if you dig into it, it's pretty interesting.


00:19:29.560 --> 00:19:32.040
There's a lot of stuff around allocation we've covered before,


00:19:32.040 --> 00:19:33.040
but it's quite unique.


00:19:33.040 --> 00:19:37.120
But Python is also somewhat unique in the sense that it has like two modes.


00:19:37.120 --> 00:19:43.200
So it has reference counting, which I would say 98% of all like memory


00:19:43.200 --> 00:19:46.000
management, cleanup stuff is in the reference counting side.


00:19:46.000 --> 00:19:47.840
This is totally made up, these numbers.


00:19:47.840 --> 00:19:56.340
But there's a little, I would say maybe even more like 99.5 unless you're building some kind of a certain kind of app like with interesting algorithms.


00:19:56.340 --> 00:19:59.100
Most apps don't create cycles.


00:19:59.100 --> 00:20:05.020
And the only reason we have garbage collection in addition to the reference counting is to catch those cycles, right?


00:20:05.020 --> 00:20:09.440
You know, I've got a customer object, I've got it out of a SQL community database.


00:20:09.440 --> 00:20:11.820
It has a relationship over to the orders.


00:20:11.820 --> 00:20:14.540
I go to the orders, the orders have a link back to the customer.


00:20:14.540 --> 00:20:18.060
maybe like traversing that lazy loaded list has created a cycle


00:20:18.060 --> 00:20:19.700
and now I need the GC to save me.


00:20:19.700 --> 00:20:23.700
So the rule for when the garbage collector runs is


00:20:23.700 --> 00:20:26.040
you can ask it, you can say import the GC module,


00:20:26.040 --> 00:20:28.900
say gc.getthreshold or thresholds,


00:20:28.900 --> 00:20:30.340
I can't remember if it's singular or plural


00:20:30.340 --> 00:20:32.440
on my screen if I would switch to it,


00:20:32.440 --> 00:20:33.940
singular, getthreshold,


00:20:33.940 --> 00:20:35.340
it returns three numbers.


00:20:35.340 --> 00:20:36.600
They're not the same units,


00:20:36.600 --> 00:20:38.100
which makes them really hard to understand.


00:20:38.100 --> 00:20:42.600
The first number is how many allocations of collection objects,


00:20:42.600 --> 00:20:45.840
So classes, dictionaries, lists, tuples,


00:20:45.840 --> 00:20:47.320
things that could contain other stuff.


00:20:47.320 --> 00:20:50.280
So things that could potentially be participants in a cycle,


00:20:50.280 --> 00:20:53.240
like numbers and strings are not even considered by the GC.


00:20:53.240 --> 00:20:56.760
But how many allocations of collection types are there


00:20:56.760 --> 00:20:59.800
that exceed the reference counting deallocation?


00:20:59.800 --> 00:21:03.460
So if I had a list and I put a thousand classes,


00:21:03.460 --> 00:21:05.520
class objects in it by allocating and filling it up,


00:21:05.520 --> 00:21:06.720
then I would hold on to a thousand


00:21:06.720 --> 00:21:08.640
and none of them would have become garbage.


00:21:08.640 --> 00:21:10.240
So the first number that comes back is,


00:21:10.240 --> 00:21:12.840
well, how big is that number before we just run a GC,


00:21:12.840 --> 00:21:13.680
no matter what?


00:21:13.680 --> 00:21:14.640
And the default is 700.


00:21:14.640 --> 00:21:17.760
So my example there, if I create a list of a thousand


00:21:17.760 --> 00:21:19.920
objects, that's a GC that's gonna run.


00:21:19.920 --> 00:21:22.480
It doesn't matter if there's cycles, there's no cycles,


00:21:22.480 --> 00:21:23.560
it just doesn't matter.


00:21:23.560 --> 00:21:25.760
Like I've made a thousand of them, that's over 700,


00:21:25.760 --> 00:21:26.920
so we're gonna run a GC.


00:21:26.920 --> 00:21:28.600
And then the rest are like, how much do you run


00:21:28.600 --> 00:21:30.280
like a whole memory GC versus a local,


00:21:30.280 --> 00:21:32.480
a small, like recent object GC?


00:21:32.480 --> 00:21:34.720
And what occurred to me is, you know my website,


00:21:34.720 --> 00:21:37.440
there's a lot of pages that pull back thousands of items


00:21:37.440 --> 00:21:42.360
in any website that uses a database and an ORM that pulls stuff back and hangs


00:21:42.360 --> 00:21:46.320
onto it and not just like streams over the items, but puts them maybe in a list


00:21:46.320 --> 00:21:49.920
or something temporarily, anytime you do that more with the thousand, you're


00:21:49.920 --> 00:21:51.320
going to have the GC run, right?


00:21:51.320 --> 00:21:53.680
They're just looking for anything to throw away, basically.


00:21:53.680 --> 00:21:54.080
Yeah.


00:21:54.080 --> 00:21:57.320
But you know, you're still in the process of building the list of them.


00:21:57.320 --> 00:21:59.440
I got to get 10,000.


00:21:59.440 --> 00:22:00.280
Well, guess what?


00:22:00.280 --> 00:22:03.920
That means you're going to have 14 GCs and you're just in the


00:22:03.920 --> 00:22:04.960
process of building the list.


00:22:04.960 --> 00:22:06.000
And I'm like, that's kind of weird.


00:22:06.160 --> 00:22:08.240
That seems excessive to me.


00:22:08.240 --> 00:22:09.860
And then I went and looked at the site map


00:22:09.860 --> 00:22:10.960
on TalkByThon training,


00:22:10.960 --> 00:22:13.160
where we're pulling back like thousands of transcripts


00:22:13.160 --> 00:22:15.620
and all sorts of stuff to generate all the pages on there.


00:22:15.620 --> 00:22:18.800
77, there's 77 GCs to render the site map.


00:22:18.800 --> 00:22:19.820
There's no cycles.


00:22:19.820 --> 00:22:20.660
There's not one.


00:22:20.660 --> 00:22:21.480
So I'm like, that's not good.


00:22:21.480 --> 00:22:22.400
Well, let me think about that for a second.


00:22:22.400 --> 00:22:24.520
So what I ended up doing was I said,


00:22:24.520 --> 00:22:26.440
well, what if I made the threshold 10,000?


00:22:26.440 --> 00:22:28.140
Actually, I ended up on 50,000.


00:22:28.140 --> 00:22:32.260
So only run the GC if you get more than 50,000 allocations


00:22:32.260 --> 00:22:33.280
without deallocation.


00:22:33.280 --> 00:22:35.280
What was really interesting is doing that


00:22:35.280 --> 00:22:39.920
made my unit tests, which were including many, many integration tests on talk,


00:22:39.920 --> 00:22:43.960
by then training run 10 to 12% faster, just setting that one line.


00:22:43.960 --> 00:22:46.880
And it basically does not use more memory in my case.


00:22:46.880 --> 00:22:47.640
Is that crazy?


00:22:47.640 --> 00:22:48.960
Well, it makes sense.


00:22:48.960 --> 00:22:54.520
It's most, most issues of performance just come down to memory and how


00:22:54.520 --> 00:22:56.080
memory allocation, the allocation.


00:22:56.080 --> 00:22:59.480
I spent almost all my time in, in C++ more time in C++


00:22:59.480 --> 00:23:02.200
than I do in Python, and we don't have a garbage collector over there.


00:23:02.200 --> 00:23:04.920
So you have to do all this manually and, and doing it.


00:23:04.920 --> 00:23:06.140
>> You know how much work it is, right?


00:23:06.140 --> 00:23:06.620
>> Yeah.


00:23:06.620 --> 00:23:09.880
>> Yeah, exactly. It's like doing it wrong is why stuff slow.


00:23:09.880 --> 00:23:11.800
People are like, "Well, Python is slower than C++."


00:23:11.800 --> 00:23:14.080
Well, it has the potential.


00:23:14.080 --> 00:23:16.520
It uses the potential to be faster than Python.


00:23:16.520 --> 00:23:18.680
But it really depends on how you write that code.


00:23:18.680 --> 00:23:20.760
Because well-written code


00:23:20.760 --> 00:23:22.920
is always going to run faster than poorly written code.


00:23:22.920 --> 00:23:24.440
It doesn't matter what the two languages.


00:23:24.440 --> 00:23:27.680
>> Yeah. I realized that in my world,


00:23:27.680 --> 00:23:29.340
in my type of application,


00:23:29.340 --> 00:23:30.920
I almost never create cycles,


00:23:30.920 --> 00:23:34.420
but I often get back more than 700 class objects,


00:23:34.420 --> 00:23:37.140
which also have dictionaries potentially in the mix


00:23:37.140 --> 00:23:39.620
as they're like allocating the converting,


00:23:39.620 --> 00:23:40.940
serializing into classes.


00:23:40.940 --> 00:23:42.860
Like there's gotta be a lot of places where that's happened.


00:23:42.860 --> 00:23:44.860
So I just set this number to say, you know what?


00:23:44.860 --> 00:23:46.180
Let's waste a little bit of memory.


00:23:46.180 --> 00:23:48.620
And if there are cycles, we'll come back and get them later.


00:23:48.620 --> 00:23:50.460
And because there's almost no cycles,


00:23:50.460 --> 00:23:51.860
there's almost no memory growth.


00:23:51.860 --> 00:23:53.580
For example, so the server is running


00:23:53.580 --> 00:23:55.740
like eight worker processes, one of them.


00:23:55.740 --> 00:23:57.820
And I made this change.


00:23:57.820 --> 00:24:00.220
And I think over after running for a week


00:24:00.220 --> 00:24:01.940
without restarting any of the processes,


00:24:01.940 --> 00:24:05.980
It went from 1.89 gigs of memory usage to 1.91.


00:24:05.980 --> 00:24:09.980
So like 220 megs, I think it was 20 megs more memory usage.


00:24:09.980 --> 00:24:12.820
And yet like 10% speed up by just changing


00:24:12.820 --> 00:24:14.220
like one call at startup.


00:24:14.220 --> 00:24:15.060
It was insane.


00:24:15.060 --> 00:24:17.820
- Well, and think about what Dr. Becky's code,


00:24:17.820 --> 00:24:20.300
you know, like, you know, go back to the astrophysicist,


00:24:20.300 --> 00:24:21.540
you know, thing here, you know,


00:24:21.540 --> 00:24:23.740
with the sizes of data structures that she's doing


00:24:23.740 --> 00:24:25.820
or any data scientist who's listening, you know,


00:24:25.820 --> 00:24:29.580
they're usually dealing with 10,000, 100,000 million items.


00:24:29.580 --> 00:24:31.820
You know, you combine this with all the stuff


00:24:31.820 --> 00:24:34.620
that we talked about with NumPy and with data processing.


00:24:34.620 --> 00:24:36.380
We talked about how long it takes to do


00:24:36.380 --> 00:24:37.820
some of these data regressions.


00:24:37.820 --> 00:24:38.740
How much would this be?


00:24:38.740 --> 00:24:42.900
>> Yeah, exactly. If that data is being done in Python and it's


00:24:42.900 --> 00:24:45.100
not just purely being pushed down into


00:24:45.100 --> 00:24:47.300
the C data science layer,


00:24:47.300 --> 00:24:49.860
then yeah, that's really interesting, I think.


00:24:49.860 --> 00:24:51.940
>> Although I would caution at the same time


00:24:51.940 --> 00:24:55.340
that there's no such thing as a magic bullet.


00:24:55.340 --> 00:24:58.300
So you have to understand why this is going to speed things up.


00:24:58.300 --> 00:25:00.580
Well, I have to just copy and paste that line that


00:25:00.580 --> 00:25:03.100
my colleague has that he got from Michael Kennedy


00:25:03.100 --> 00:25:04.280
because it'll make the code faster.


00:25:04.280 --> 00:25:05.820
No, you have to know why.


00:25:05.820 --> 00:25:07.420
- Yeah. - It makes the code faster.


00:25:07.420 --> 00:25:09.620
- It's an easy test, some cases it makes sense.


00:25:09.620 --> 00:25:10.460
People can check it out.


00:25:10.460 --> 00:25:12.900
I thought it was really, it just so surprised me.


00:25:12.900 --> 00:25:14.780
I was walking along with it, I'm like, wait a minute,


00:25:14.780 --> 00:25:16.420
that must mean something weird is going on.


00:25:16.420 --> 00:25:18.540
And then I put it on just on one of my pages,


00:25:18.540 --> 00:25:21.180
like why would I do 77 GCs on a single page load?


00:25:21.180 --> 00:25:22.080
That's crazy.


00:25:22.080 --> 00:25:24.660
And so I just started exploring this and here we are.


00:25:24.660 --> 00:25:27.620
- So did you, whatever you're linking to,


00:25:27.620 --> 00:25:29.340
does it talk about how you can test


00:25:29.340 --> 00:25:31.180
How many garbage collections?


00:25:31.180 --> 00:25:32.540
- Let me see.


00:25:32.540 --> 00:25:37.340
I'm leaking to a Twitter thread and way deep down.


00:25:37.340 --> 00:25:40.300
No, but there is a way to do it.


00:25:40.300 --> 00:25:42.420
If you go to the GC, you can say,


00:25:42.420 --> 00:25:45.020
I think it's set debug stats or something.


00:25:45.020 --> 00:25:48.380
I'll look it up real quick while we're talking.


00:25:48.380 --> 00:25:50.060
I'll throw it in at the end here, but yeah,


00:25:50.060 --> 00:25:51.740
it's, there is a way to do it.


00:25:51.740 --> 00:25:53.020
Actually, I got it right here.


00:25:53.020 --> 00:25:54.000
Hold on, give me just a sec.


00:25:54.000 --> 00:25:57.880
The way you do it is you say GC.set_debug,


00:25:57.880 --> 00:25:59.140
and then you pass in enumeration,


00:25:59.140 --> 00:26:01.540
and the value is GC debug stats.


00:26:01.540 --> 00:26:02.020
>> Okay.


00:26:02.020 --> 00:26:04.220
>> That thing was just lighting up.


00:26:04.220 --> 00:26:06.060
When I turn that on, it would just light up,


00:26:06.060 --> 00:26:09.540
it just completely fill the terminal with the debug,


00:26:09.540 --> 00:26:11.540
GC, GC, GC, GC, GC,


00:26:11.540 --> 00:26:14.300
over and over and over when I hit that one page.


00:26:14.300 --> 00:26:16.140
Then changing it, guess what? Made it better.


00:26:16.140 --> 00:26:19.020
>> Yeah. Now, we should probably be PC about the GC and call


00:26:19.020 --> 00:26:24.300
the garbage collector the programmatic sanitation engineer.


00:26:24.300 --> 00:26:29.660
Well, it doesn't take offense.


00:26:29.660 --> 00:26:32.260
It's just there to help us out.


00:26:32.260 --> 00:26:34.660
Brian, it's probably a pretty awesome library,


00:26:34.660 --> 00:26:36.100
honestly, the GC library.


00:26:36.100 --> 00:26:38.020
>> Probably, but it's built in.


00:26:38.020 --> 00:26:41.240
Yeah. Of course,


00:26:41.240 --> 00:26:43.300
I'm susceptible to click on the listicle.


00:26:43.300 --> 00:26:45.500
>> Who isn't? Come on.


00:26:45.500 --> 00:26:47.180
>> Right. But we don't cover them very much,


00:26:47.180 --> 00:26:48.380
but I really like this.


00:26:48.380 --> 00:26:52.400
This article is top 10 Python libraries of 2020,


00:26:52.400 --> 00:26:54.640
But their criteria was interesting.


00:26:54.640 --> 00:26:58.240
The criteria was it has to be a library that was launched or popular,


00:26:58.240 --> 00:26:59.840
has to be well maintained,


00:26:59.840 --> 00:27:03.520
has to have maintenance changes since their launch date,


00:27:03.520 --> 00:27:07.000
and it has to be just outright cool that you should check it out.


00:27:07.000 --> 00:27:09.280
So I'm going to go through a handful of these.


00:27:09.280 --> 00:27:10.640
They listed 10.


00:27:10.640 --> 00:27:12.160
I don't know if all of them,


00:27:12.160 --> 00:27:16.520
since there's like four of them that are machine learning focused that I--


00:27:16.520 --> 00:27:18.080
I think cool is relative.


00:27:18.080 --> 00:27:19.400
Yeah.


00:27:19.400 --> 00:27:22.000
But the first one was Typer.


00:27:22.000 --> 00:27:25.360
And I can't I'm like, I'm really a fan of Typer now.


00:27:25.360 --> 00:27:26.880
Is it really just 2020?


00:27:26.880 --> 00:27:31.040
And I went back and look like it was released like in December of 2019.


00:27:31.040 --> 00:27:33.280
So Sebastian Ramirez is killing it for sure.


00:27:33.280 --> 00:27:36.400
And then I looked in and I'm like, well, FastAPI, when that come out,


00:27:36.400 --> 00:27:38.000
that was the previous December.


00:27:38.000 --> 00:27:44.000
So the end of 2018 released FastAPI and then Typer a year later.


00:27:44.000 --> 00:27:45.040
He's just crushing it.


00:27:45.040 --> 00:27:45.440
Yeah.


00:27:45.440 --> 00:27:46.320
So yeah, nice.


00:27:46.320 --> 00:27:49.760
Both a huge fan of both of those.


00:27:49.760 --> 00:28:03.020
a big fan of rich also is a rich actually just showed up this in last year in 2020. And rich is a beautiful, beautiful formatting in the terminal. And yes, it's a beautiful. Oh, it's really great.


00:28:03.020 --> 00:28:04.900
He is glorious.


00:28:04.900 --> 00:28:09.900
I'm even using it even in applications where I just need these, the tables.


00:28:09.900 --> 00:28:12.300
So if you need to print out a table in the command line,


00:28:12.300 --> 00:28:16.600
the tables are kind of hard and there were like weird other,


00:28:16.600 --> 00:28:19.800
there were other table, specialized table libraries.


00:28:19.800 --> 00:28:23.600
But this one is great that you can, it works,


00:28:23.600 --> 00:28:27.300
you don't have to specify the width, it like comes up with the width on its own.


00:28:27.300 --> 00:28:32.400
And then you, if you shrink the terminal to really narrow or wide,


00:28:32.400 --> 00:28:35.000
it'll word wrap correctly and stuff.


00:28:35.000 --> 00:28:35.920
>> Wow.


00:28:35.920 --> 00:28:38.040
>> That's incredible.


00:28:38.040 --> 00:28:40.520
Even just for tables.


00:28:40.520 --> 00:28:41.640
>> Yeah, which is awesome.


00:28:41.640 --> 00:28:44.000
>> The third one is DeerPiGUI.


00:28:44.000 --> 00:28:45.920
I think we covered this, maybe we could.


00:28:45.920 --> 00:28:48.320
>> I don't remember. I mean, we did go on our GUI rant,


00:28:48.320 --> 00:28:49.560
so it feels like it should be.


00:28:49.560 --> 00:28:53.000
>> Yeah. It's a GUI project.


00:28:53.000 --> 00:28:55.960
Nice pictures though, at least.


00:28:55.960 --> 00:28:56.440
>> Yeah.


00:28:56.440 --> 00:28:59.240
>> I've been drooling over Deer.


00:28:59.240 --> 00:29:00.240
I'm GUI for a while.


00:29:00.240 --> 00:29:02.120
I haven't had an opportunity to use it yet,


00:29:02.120 --> 00:29:04.040
but I've been looking at it like I went, so.


00:29:04.040 --> 00:29:07.340
- Yeah, so the last few I wanna highlight,


00:29:07.340 --> 00:29:08.600
pretty errors, looks neat.


00:29:08.600 --> 00:29:12.360
I haven't tried that yet, but it's a way to, yeah.


00:29:12.360 --> 00:29:13.200
- That is glorious as well.


00:29:13.200 --> 00:29:15.560
- Better tracebacks, so.


00:29:15.560 --> 00:29:17.160
- I mean, ideally you don't show errors to people,


00:29:17.160 --> 00:29:19.480
but if you're going to, let's make them at least readable.


00:29:19.480 --> 00:29:20.320
This is great.


00:29:20.320 --> 00:29:22.000
- And let's train ourselves too.


00:29:22.000 --> 00:29:23.120
You know, it's like, you know,


00:29:23.120 --> 00:29:24.920
we're gonna have to read the,


00:29:24.920 --> 00:29:26.200
we're gonna spend at least half our life


00:29:26.200 --> 00:29:27.560
reading error messages, face it.


00:29:27.560 --> 00:29:29.440
So let's at least make them readable.


00:29:29.440 --> 00:29:31.080
- And another quarter crying about the,


00:29:31.080 --> 00:29:32.680
what we just couldn't figure out.


00:29:32.680 --> 00:29:33.920
(laughing)


00:29:33.920 --> 00:29:36.200
- And then the last two that I wanna highlight


00:29:36.200 --> 00:29:38.200
is diagrams and scaling.


00:29:38.200 --> 00:29:42.440
Diagrams is a library, look at that picture.


00:29:42.440 --> 00:29:45.120
It's a way to do, it's intended for like


00:29:45.120 --> 00:29:47.240
cloud architecture drawings,


00:29:47.240 --> 00:29:49.880
but it's written in Python.


00:29:49.880 --> 00:29:52.540
You write these diagrams in Python.


00:29:52.540 --> 00:29:54.680
And so because they're text,


00:29:54.680 --> 00:29:57.680
you can check them in with version control.


00:29:57.680 --> 00:29:58.520
- Oh, that's cool.


00:29:58.520 --> 00:29:59.340
- Which is nice.


00:29:59.340 --> 00:30:01.900
I'd like to see these sorts of diagrams look more,


00:30:01.900 --> 00:30:05.860
would be great for not just, you know, network diagrams,


00:30:05.860 --> 00:30:07.060
other diagrams.


00:30:07.060 --> 00:30:08.740
- Flowchart would be great.


00:30:08.740 --> 00:30:09.700
I still flowchart.


00:30:09.700 --> 00:30:12.860
- Yeah, so the last one is Scalene,


00:30:12.860 --> 00:30:16.780
which is a memory CPU and memory profiler in Python


00:30:16.780 --> 00:30:19.020
that handles multi-threading well


00:30:19.020 --> 00:30:23.100
and distinguishes between Python versus on-premise.


00:30:23.100 --> 00:30:24.540
That's pretty cool.


00:30:24.540 --> 00:30:26.340
I definitely need to try this out.


00:30:26.340 --> 00:30:28.740
I also like that you don't have to modify your code


00:30:28.740 --> 00:30:31.820
>> Yeah, that's really cool.


00:30:31.820 --> 00:30:34.080
Yeah, absolutely. Those are cool.


00:30:34.080 --> 00:30:36.240
There's a bunch of great ideas there and I


00:30:36.240 --> 00:30:38.140
really need to find a use for rich.


00:30:38.140 --> 00:30:40.700
>> Solution to a problem again.


00:30:40.700 --> 00:30:44.620
>> I write a lot of little terminal apps and stuff and I'm just like,


00:30:44.620 --> 00:30:48.620
maybe you'll put a little color in here or something and I just need to take the time and go,


00:30:48.620 --> 00:30:50.980
no, this is a UI that I should pay more attention to,


00:30:50.980 --> 00:30:53.440
not just some random thing with text.


00:30:53.440 --> 00:30:55.220
>> Yeah. We'll find this cool stuff.


00:30:55.220 --> 00:30:56.900
It's like I want to use,


00:30:56.900 --> 00:30:58.740
I feel the need to use this somewhere.


00:30:58.740 --> 00:30:59.780
(laughs)


00:30:59.780 --> 00:31:00.620
- Exactly.


00:31:00.620 --> 00:31:02.180
- I had a little, so I had a little application


00:31:02.180 --> 00:31:04.220
where it's just like I said with the tables


00:31:04.220 --> 00:31:06.820
and I'm like, I don't think it needs colors.


00:31:06.820 --> 00:31:08.580
I'm just showing a table.


00:31:08.580 --> 00:31:11.700
But the default for rich is to show colors


00:31:11.700 --> 00:31:13.860
and you don't have to pick them, it just picks them.


00:31:13.860 --> 00:31:17.100
So the like the heading and the lines between


00:31:17.100 --> 00:31:19.700
were like different colors if you're on a color terminal.


00:31:19.700 --> 00:31:21.780
And if you're not on a color terminal, it works anyway.


00:31:21.780 --> 00:31:24.620
It just figures that out for you and lovely, love it.


00:31:24.620 --> 00:31:25.700
- Yeah, that's awesome.


00:31:25.700 --> 00:31:26.620
That's awesome.


00:31:26.620 --> 00:31:27.620
It's very awesome.


00:31:27.620 --> 00:31:29.620
Awesome. Speaking of awesome.


00:31:29.620 --> 00:31:31.620
So,


00:31:31.620 --> 00:31:33.620
pep 518 rolled out a while back.


00:31:33.620 --> 00:31:35.620
It was introducing this thing called


00:31:35.620 --> 00:31:37.620
pyproject.toml


00:31:37.620 --> 00:31:39.620
I guess it's pronounced "toml" or whatever.


00:31:39.620 --> 00:31:41.620
I'll say that, pyproject.toml.


00:31:41.620 --> 00:31:43.620
So the idea behind this was that it was


00:31:43.620 --> 00:31:45.620
going to be this


00:31:45.620 --> 00:31:47.620
configuration file, you know, one configuration


00:31:47.620 --> 00:31:49.620
file to rule them all. And of course,


00:31:49.620 --> 00:31:51.620
Python, we like things to be simple.


00:31:51.620 --> 00:31:53.620
Well, ironically, this turned into a really political


00:31:53.620 --> 00:31:55.620
thing, which I'm still trying to wrap my head around.


00:31:55.620 --> 00:32:00.660
So basically the nice thing about this repository is keeping


00:32:00.660 --> 00:32:04.100
track of all the projects that have adopted PyProject HOML,


00:32:04.100 --> 00:32:07.820
either optionally or mandatory, for configurations.


00:32:07.820 --> 00:32:10.980
So instead of having to have a dozen configuration files in


00:32:10.980 --> 00:32:12.860
your project for all these different tools,


00:32:12.860 --> 00:32:14.460
you can just use this one.


00:32:14.460 --> 00:32:15.740
And so it's got this big list.


00:32:15.740 --> 00:32:18.380
What I find interesting is this part down here at the bottom.


00:32:18.380 --> 00:32:20.620
If you go down to, yeah,


00:32:20.620 --> 00:32:22.180
just scroll just slightly here,


00:32:22.180 --> 00:32:24.100
just slightly, just a little bit up.


00:32:24.100 --> 00:32:25.900
That's going to sound weird on the podcast.


00:32:25.900 --> 00:32:28.980
Anyway, so if you're going to--


00:32:28.980 --> 00:32:30.900
so these are projects that are, quote unquote,


00:32:30.900 --> 00:32:32.540
discussing the use of PyProjectTOML.


00:32:32.540 --> 00:32:36.940
But if you actually look at these, it's kind of odd.


00:32:36.940 --> 00:32:38.500
The big sticking points-- because these


00:32:38.500 --> 00:32:40.780
are the projects that are stopping people from really


00:32:40.780 --> 00:32:42.820
just going all in on PyProjectTOML.


00:32:42.820 --> 00:32:43.820
And there's even some--


00:32:43.820 --> 00:32:45.980
talk about circular dependencies.


00:32:45.980 --> 00:32:48.100
Or some are like, well, I'll do it when they do it.


00:32:48.100 --> 00:32:50.340
And they're like, well, I will do it when they do it,


00:32:50.340 --> 00:32:52.260
which makes you wonder if it's a serious excuse.


00:32:52.260 --> 00:32:54.180
So mypy is the weirdest.


00:32:54.180 --> 00:32:57.420
Weiner Van Rossum himself said, well, it doesn't solve anything.


00:32:57.420 --> 00:32:59.180
Someone said, can we just add this, please?


00:32:59.180 --> 00:32:59.900
Just add it.


00:32:59.900 --> 00:33:00.660
It's easy.


00:33:00.660 --> 00:33:01.500
Here's the PR.


00:33:01.500 --> 00:33:02.340
Somebody did the PR.


00:33:02.340 --> 00:33:04.180
He's like, nah, it doesn't solve anything.


00:33:04.180 --> 00:33:05.220
And he closed it.


00:33:05.220 --> 00:33:07.780
It's like, it does solve something.


00:33:07.780 --> 00:33:10.420
It's one less file I have to deal with.


00:33:10.420 --> 00:33:12.060
That is a solution.


00:33:12.060 --> 00:33:15.980
Flake8, they have a couple of concrete objections.


00:33:15.980 --> 00:33:17.980
One is the fact we don't have the standard Tomo


00:33:17.980 --> 00:33:20.740
parser in the Python standard library.


00:33:20.740 --> 00:33:23.500
So that could be a problem.


00:33:23.500 --> 00:33:24.700
- Interesting.


00:33:24.700 --> 00:33:26.320
You're adding another dependency


00:33:26.320 --> 00:33:28.600
to just support having this format.


00:33:28.600 --> 00:33:29.560
- Exactly, yeah.


00:33:29.560 --> 00:33:32.280
But then again, it's a common dependency


00:33:32.280 --> 00:33:34.400
with a bunch of other tools that are already in use


00:33:34.400 --> 00:33:36.160
and it almost doesn't matter.


00:33:36.160 --> 00:33:39.000
Pip, someone said, I don't understand this.


00:33:39.000 --> 00:33:41.480
Pip to change its behavior so mere presence of the file


00:33:41.480 --> 00:33:42.800
doesn't change functionality.


00:33:42.800 --> 00:33:46.120
I can't wrap my head around what he's referring to there.


00:33:46.120 --> 00:33:48.640
But the stupid thing is someone already did Flake 9,


00:33:48.640 --> 00:33:52.720
which is an exact fork of Flakegate that just adds PyProjectHomel.


00:33:52.720 --> 00:33:55.200
So it's like, it's done.


00:33:55.200 --> 00:33:57.040
They just have to merge it.


00:33:57.040 --> 00:34:00.800
And actually the same thing happened with Bandit.


00:34:00.800 --> 00:34:02.880
Someone actually implemented it in 2019.


00:34:02.880 --> 00:34:05.280
The PR has been sitting there, untouched since 2019.


00:34:05.280 --> 00:34:09.280
So over years gone by, it's there and Bandit is not picking it up.


00:34:09.280 --> 00:34:10.960
They're silent.


00:34:10.960 --> 00:34:12.960
ReadTheDocs is saying it's too much work.


00:34:12.960 --> 00:34:16.000
Like it's a lot of work for us to have the multiple.


00:34:16.000 --> 00:34:23.280
Pie oxidizer shockingly hasn't even said anything. It's 2019. They're they're like the they're like the new trendy like the


00:34:23.280 --> 00:34:25.200
trend-setting


00:34:25.200 --> 00:34:32.640
Packaging thing and they haven't been saying anything about this this so I I'm trying to figure out why it is that this is so controversial


00:34:32.640 --> 00:34:39.060
Because it seems so obvious you have one file to store all of the settings for all the different tools


00:34:39.060 --> 00:34:43.520
And yet everybody seems to want to do their own thing with this


00:34:43.760 --> 00:34:48.760
- Well, I know that, you know, PIP, ENF and Poetry and FLIT


00:34:48.760 --> 00:34:52.400
and some of these other tools that suggest a workflow.


00:34:52.400 --> 00:34:56.520
I feel like I hear this file format being used


00:34:56.520 --> 00:34:58.980
along with those and, you know, telling people


00:34:58.980 --> 00:35:00.820
we're gonna have a different way for you to like,


00:35:00.820 --> 00:35:03.660
work with your projects and manage dependencies and stuff.


00:35:03.660 --> 00:35:05.900
And you know, that, I think that's part of the source


00:35:05.900 --> 00:35:08.620
of this and I don't know if it's just necessarily


00:35:08.620 --> 00:35:09.660
all mixed together.


00:35:09.660 --> 00:35:10.540
Brian, what do you think?


00:35:10.540 --> 00:35:12.320
You know more about this than I do.


00:35:12.320 --> 00:35:16.120
I think a lot of projects are on the side of,


00:35:16.120 --> 00:35:19.120
like for instance, Coverage was,


00:35:19.120 --> 00:35:21.320
I don't know where they are on the list.


00:35:21.320 --> 00:35:22.400
- That they adopted.


00:35:22.400 --> 00:35:23.480
- That they adopted, okay.


00:35:23.480 --> 00:35:24.300
- Yeah.


00:35:24.300 --> 00:35:25.140
- Well, Coverage had this thing,


00:35:25.140 --> 00:35:28.360
and other tools were talking about,


00:35:28.360 --> 00:35:30.160
you know, there's no TOML parser,


00:35:30.160 --> 00:35:32.400
and they didn't have any other dependencies,


00:35:32.400 --> 00:35:35.480
so they didn't want to add a third party dependency


00:35:35.480 --> 00:35:38.880
just for this, and if they're just using it for packaging,


00:35:38.880 --> 00:35:41.700
however, or settings or something.


00:35:41.700 --> 00:35:46.220
But the, so I do think we will see a lot,


00:35:46.220 --> 00:35:47.900
I don't think it's a reasonable argument


00:35:47.900 --> 00:35:50.500
because there's reasons why, you know,


00:35:50.500 --> 00:35:52.780
the same thing, reason why request is,


00:35:52.780 --> 00:35:54.300
because there's making changes.


00:35:54.300 --> 00:35:56.940
But I do think that the, like the format of TOML,


00:35:56.940 --> 00:36:00.460
basic format enough to get a PyProject


00:36:00.460 --> 00:36:02.220
isn't gonna change much.


00:36:02.220 --> 00:36:05.940
So I think enough of a project TOML parser


00:36:05.940 --> 00:36:10.180
to handle PyProject, that's, I think we need one of the,


00:36:10.180 --> 00:36:13.060
something like that in the in built into Python.


00:36:13.060 --> 00:36:15.980
Yeah, just use we have we have PEP 518.


00:36:15.980 --> 00:36:18.860
So like we have some we have some standard already.


00:36:18.860 --> 00:36:21.780
Yeah, so I think we'll see a big.


00:36:21.780 --> 00:36:23.820
I would like to see at least even


00:36:23.820 --> 00:36:25.140
if it isn't the mainstream one.


00:36:25.140 --> 00:36:27.340
If we have if the if most projects


00:36:27.340 --> 00:36:30.460
that are OK with the third party use something else for a total


00:36:30.460 --> 00:36:34.140
parser, but there's some built in stripped down version


00:36:34.140 --> 00:36:35.740
in the standard library.


00:36:35.740 --> 00:36:37.900
I think that's I think that's.


00:36:37.900 --> 00:36:41.340
Yeah, I see you could solve that problem by just vendoring it.


00:36:41.340 --> 00:36:43.740
Just like here's the two files that make up the parser.


00:36:43.740 --> 00:36:46.260
We're just going to make it part of this package.


00:36:46.260 --> 00:36:47.300
So now we're good to go.


00:36:47.300 --> 00:36:48.020
I don't know.


00:36:48.020 --> 00:36:48.620
Sounds good.


00:36:48.620 --> 00:36:51.060
Well, I think that's it for all of our items.


00:36:51.060 --> 00:36:53.300
Brian, you got anything you actually want to share with folks?


00:36:53.300 --> 00:36:55.180
Yeah, it's my birthday.


00:36:55.180 --> 00:36:55.660
Yay!


00:36:55.660 --> 00:36:56.060
Woo!


00:36:56.060 --> 00:36:57.500
Happy birthday to you!


00:36:57.500 --> 00:37:01.780
Man, you're looking good for 28, brother.


00:37:01.780 --> 00:37:05.700
So I'm 51, and I heard today that that's just one.


00:37:05.700 --> 00:37:07.980
I'm just shy of a full deck


00:37:07.980 --> 00:37:12.260
I've never been accused of playing with a full deck myself


00:37:12.260 --> 00:37:16.180
but don't I will say don't let anyone tell you that you're old because


00:37:16.180 --> 00:37:21.580
I says in the first chapter a chapter of Genesis thou and then God said man's year shall be limited to


00:37:21.580 --> 00:37:27.620
120 half of 120 is 60. So what is biblical that 60 is middle-aged. You're not even middle-aged


00:37:27.620 --> 00:37:30.460
You've got a way to go


00:37:30.460 --> 00:37:32.860
the Bible I


00:37:33.540 --> 00:37:36.540
I keep telling everybody that I don't look at day over 73.


00:37:36.540 --> 00:37:39.340
Oh, you're good, man.


00:37:39.340 --> 00:37:40.580
A couple of happy birthdays.


00:37:40.580 --> 00:37:43.040
And also, you're going to ask if you're still a fan of flit.


00:37:43.040 --> 00:37:47.740
Yeah, I love flit, especially since they adopted the source source directory.


00:37:47.740 --> 00:37:49.140
Yeah, that's right. That's awesome.


00:37:49.140 --> 00:37:52.340
Yeah, that's that's saved my life.


00:37:52.340 --> 00:37:54.840
Jason, anything extra that you want to throw out there?


00:37:54.840 --> 00:37:56.580
I mean, maybe people have a place


00:37:56.580 --> 00:37:58.880
they could get notified about your upcoming book or something like that.


00:37:58.880 --> 00:38:02.340
Yeah. You know, following me on Twitter is probably the best way to do that.


00:38:02.340 --> 00:38:03.940
I'm code mouse 921 Twitter.


00:38:03.940 --> 00:38:07.700
Uhm, and then actually follow no starch press too.


00:38:07.700 --> 00:38:10.380
I mean, no starch press is awesome to begin with.


00:38:10.380 --> 00:38:11.540
That's where you're doing the book.


00:38:11.540 --> 00:38:12.300
Yeah, exactly.


00:38:12.300 --> 00:38:13.380
They're my publisher.


00:38:13.380 --> 00:38:14.020
No starch.


00:38:14.020 --> 00:38:16.340
I don't think they ever put out a bad book.


00:38:16.340 --> 00:38:17.660
I love that publisher.


00:38:17.660 --> 00:38:24.620
So I was I can you can actually you can ask my mother when I got when I got when my book contract got accepted,


00:38:24.620 --> 00:38:27.460
I actually screamed very high pitched.


00:38:27.460 --> 00:38:28.620
That's awesome.


00:38:28.620 --> 00:38:32.900
So yeah, follow follow those starch press for updates on that and all the other awesome.


00:38:32.900 --> 00:38:35.820
They got some other incredible books coming up too.


00:38:35.820 --> 00:38:37.260
So I'll go ahead and ask her.


00:38:37.260 --> 00:38:39.500
So what's your mom's Twitter handle?


00:38:39.500 --> 00:38:40.500
My mom's Twitter handle?


00:38:40.500 --> 00:38:43.100
Oh, she doesn't have a Twitter handle actually.


00:38:43.100 --> 00:38:44.980
So I'll have to put you in touch directly.


00:38:44.980 --> 00:38:45.980
I think unfortunately.


00:38:45.980 --> 00:38:46.980
Awesome.


00:38:46.980 --> 00:38:47.980
Well, cool.


00:38:47.980 --> 00:38:50.620
Thanks for being here again.


00:38:50.620 --> 00:38:53.580
So I have a couple of items to throw out here.


00:38:53.580 --> 00:38:56.860
Actually, this almost Brian, this almost could have been an extra, extra, extra, extra, extra,


00:38:56.860 --> 00:38:57.860
extra here all about it.


00:38:57.860 --> 00:38:59.820
but they're real short, so I didn't do that.


00:38:59.820 --> 00:39:01.820
Django 3.1.5 is released.


00:39:01.820 --> 00:39:05.340
Django 3, didn't we just go to Django 2 or something?


00:39:05.340 --> 00:39:06.300
That's, I mean, that's good.


00:39:06.300 --> 00:39:07.680
That's really good to hear.


00:39:07.680 --> 00:39:08.740
So awesome on that.


00:39:08.740 --> 00:39:12.220
Python 3.10, alpha 4 is available for testing.


00:39:12.220 --> 00:39:14.940
- Now the new parser is gonna be in that one,


00:39:14.940 --> 00:39:15.780
which is gonna be--


00:39:15.780 --> 00:39:17.780
- Oh, that's the PEG parser that Guido's been working on?


00:39:17.780 --> 00:39:21.180
- Yeah, that's gonna revolutionize the language,


00:39:21.180 --> 00:39:22.020
eventually.


00:39:22.020 --> 00:39:24.860
- Yeah, yeah, it'll definitely make it possible to do more.


00:39:24.860 --> 00:39:28.620
And in releases, SciPy 1.6.0 was released.


00:39:28.620 --> 00:39:29.960
I learned about a cool project.


00:39:29.960 --> 00:39:32.840
So we talked about like avoiding Excel


00:39:32.840 --> 00:39:35.120
for the Python data science stack, right?


00:39:35.120 --> 00:39:36.460
Like just stop doing Excel.


00:39:36.460 --> 00:39:37.620
There's all these weird errors.


00:39:37.620 --> 00:39:41.900
Like the organization that defines or governs


00:39:41.900 --> 00:39:44.920
how you can name genes has come up with rules


00:39:44.920 --> 00:39:46.640
for names you can't use.


00:39:46.640 --> 00:39:47.940
And the reason they can't be used


00:39:47.940 --> 00:39:49.820
is they'll be parsed incorrectly


00:39:49.820 --> 00:39:52.340
into other data types by Excel, for example.


00:39:52.340 --> 00:39:55.840
So there's a lot of issues you might run into with Excel


00:39:55.840 --> 00:40:00.320
and that's all good, but there's this project called PyXLL.


00:40:00.320 --> 00:40:03.080
And this is actually a paid product.


00:40:03.080 --> 00:40:04.060
They're not sponsoring the show.


00:40:04.060 --> 00:40:05.040
I just think it's kind of neat.


00:40:05.040 --> 00:40:06.460
So just spreading the word.


00:40:06.460 --> 00:40:08.020
But anyway, if it's interesting for you,


00:40:08.020 --> 00:40:10.260
what you can do is it's a plugin for Excel


00:40:10.260 --> 00:40:13.220
that will embed Jupyter into Excel


00:40:13.220 --> 00:40:15.680
and allow you to write functions and macros


00:40:15.680 --> 00:40:17.020
in Excel in Python.


00:40:17.020 --> 00:40:19.300
So basically almost adds the program,


00:40:19.300 --> 00:40:21.080
Python, the programming language to Excel,


00:40:21.080 --> 00:40:22.200
which is good.


00:40:22.200 --> 00:40:23.040
- Yeah.


00:40:23.040 --> 00:40:24.440
- It's better than VBA.


00:40:24.440 --> 00:40:25.280
Let's see.


00:40:25.280 --> 00:40:27.120
- No, I started in VBA, tell me about it.


00:40:27.120 --> 00:40:28.440
(laughing)


00:40:28.440 --> 00:40:30.120
Anything's better than VBA.


00:40:30.120 --> 00:40:34.880
- So someone on Twitter asked if PyCharm works okay


00:40:34.880 --> 00:40:37.120
on my Apple Mac mini M1.


00:40:37.120 --> 00:40:40.080
And PyCharm and JetBrains in general just released


00:40:40.080 --> 00:40:43.440
a whole bunch of their tooling with different installs


00:40:43.440 --> 00:40:46.800
for the Apple Silicon native versions.


00:40:46.800 --> 00:40:49.600
And so I've got a cool little video


00:40:49.600 --> 00:40:51.160
that I'm gonna link to in the show notes.


00:40:51.160 --> 00:40:52.640
It's just like a 5 second video of here.


00:40:52.640 --> 00:40:57.600
I open up PyCharm and you basically from the time you click on open project


00:40:57.600 --> 00:41:01.360
till the projects open if you've opened a project before, so that that caveat.


00:41:01.360 --> 00:41:05.080
But at that point, if you click on it, you cannot perceive click.


00:41:05.080 --> 00:41:07.240
Like by the time you're letting up the mouse, the whole


00:41:07.240 --> 00:41:09.280
the project is loaded and ready to work on.


00:41:09.280 --> 00:41:11.360
It's like it's insane.


00:41:11.360 --> 00:41:12.160
Yeah, I will.


00:41:12.160 --> 00:41:14.800
I will consider picking up PyCharm again when they add live sharing.


00:41:14.800 --> 00:41:16.800
They have they're working on it.


00:41:16.800 --> 00:41:18.040
There is something called code with me.


00:41:18.040 --> 00:41:18.640
Yeah, yeah.


00:41:18.640 --> 00:41:19.680
So I have not tried it.


00:41:19.680 --> 00:41:20.800
I have no one to code with.


00:41:20.800 --> 00:41:23.200
I'm sorry, but email me later.


00:41:23.200 --> 00:41:23.800
We'll start filming.


00:41:23.800 --> 00:41:24.500
Yeah, exactly.


00:41:24.500 --> 00:41:26.000
We'll go together.


00:41:26.000 --> 00:41:30.600
So also since I got my M1 like 3, 4 weeks ago, whatever,


00:41:30.600 --> 00:41:34.400
I've only used used this for all my Python work and apparently


00:41:34.400 --> 00:41:36.200
it's still going strong.


00:41:36.200 --> 00:41:40.100
I even had to send in my MacBook Pro because it had started


00:41:40.100 --> 00:41:42.200
shutting the battery was so bad.


00:41:42.200 --> 00:41:45.100
It would shut down at 75% like, you know, when it like is


00:41:45.100 --> 00:41:47.400
too low, it'll shut down and as the battery gets bad, maybe


00:41:47.400 --> 00:41:49.100
it shuts down at 10% instead of zero.


00:41:49.200 --> 00:41:52.240
If I'm doing video work, it'll actually shut down at 75%


00:41:52.240 --> 00:41:53.080
till I plug it back in.


00:41:53.080 --> 00:41:55.840
So it's all in one until that comes back.


00:41:55.840 --> 00:41:58.520
- Well, I'm still on my system 76 Linux.


00:41:58.520 --> 00:41:59.600
I can't speak to Apple.


00:41:59.600 --> 00:42:01.440
I do love my system 76.


00:42:01.440 --> 00:42:02.280
- That's cool.


00:42:02.280 --> 00:42:06.520
I just, I think this whole like new ARM architecture stuff


00:42:06.520 --> 00:42:08.440
that they're doing, it's gonna be interesting.


00:42:08.440 --> 00:42:10.840
You know, I think Microsoft's following suit


00:42:10.840 --> 00:42:13.360
or trying in parallel with them.


00:42:13.360 --> 00:42:15.080
It just felt to me like Intel and AMD,


00:42:15.080 --> 00:42:16.960
that's just the way it was gonna be forever


00:42:16.960 --> 00:42:18.680
and it's not necessarily the case.


00:42:18.680 --> 00:42:20.160
I don't I don't have a problem with.


00:42:20.160 --> 00:42:21.680
I don't have a problem with competition.


00:42:21.680 --> 00:42:23.120
What I have a problem with the software


00:42:23.120 --> 00:42:24.760
companies making their own,


00:42:24.760 --> 00:42:26.160
you know, architecture and it only


00:42:26.160 --> 00:42:27.360
works on their architecture.


00:42:27.360 --> 00:42:28.400
That's what you move towards


00:42:28.400 --> 00:42:29.120
and then you wind up with


00:42:29.120 --> 00:42:30.960
a totally fragmented industry.


00:42:30.960 --> 00:42:31.920
I think that's yeah,


00:42:31.920 --> 00:42:32.920
that's not going to be great.


00:42:32.920 --> 00:42:33.840
No, don't do it.


00:42:33.840 --> 00:42:35.160
Microsoft is not worth it.


00:42:35.160 --> 00:42:39.480
Awesome, alright, well that's my extra


00:42:39.480 --> 00:42:41.080
extra extra extra extra extra Brian.


00:42:41.080 --> 00:42:43.600
Nice I want to get an M1.


00:42:43.600 --> 00:42:44.600
I'd like to get a mini.


00:42:44.600 --> 00:42:45.960
Yeah, the mini is fantastic.


00:42:45.960 --> 00:42:47.120
I really, really like it.


00:42:47.120 --> 00:42:48.320
It's not even funny.


00:42:48.320 --> 00:42:49.760
It's not even a it's not even a joke.


00:42:49.760 --> 00:42:50.760
I'm being serious,


00:42:50.760 --> 00:42:51.800
but we do need a joke.


00:42:51.800 --> 00:42:53.240
Yes, I have a joke.


00:42:53.240 --> 00:42:55.640
Alright, yeah, you got the joke this week.


00:42:55.640 --> 00:42:57.080
I actually do have the joke this week.


00:42:57.080 --> 00:42:58.600
Yeah, and so why?


00:42:58.600 --> 00:43:00.320
Why did the programmer always refuse


00:43:00.320 --> 00:43:01.960
to check his code into the repository?


00:43:01.960 --> 00:43:03.520
Why he was afraid to commit?


00:43:03.520 --> 00:43:07.800
So yeah, yeah, if you want.


00:43:07.800 --> 00:43:09.600
If you want a regular dose of my of my


00:43:09.600 --> 00:43:10.640
that is one of my originals.


00:43:10.640 --> 00:43:11.680
If you want to get a dose of my


00:43:11.680 --> 00:43:13.040
absolutely horrific puns,


00:43:13.040 --> 00:43:14.800
you can follow me on Twitter at your own peril.


00:43:14.800 --> 00:43:16.440
I posted every every Monday.


00:43:16.440 --> 00:43:17.920
I've got a new one, so awesome.


00:43:17.920 --> 00:43:18.420
Nice.


00:43:18.420 --> 00:43:18.920
Yeah.


00:43:18.920 --> 00:43:19.720
Thanks for being on the show.


00:43:19.720 --> 00:43:20.640
Yeah, it was fun.


00:43:20.640 --> 00:43:21.440
Yeah, thanks.


00:43:21.440 --> 00:43:21.940
See y'all.


00:43:21.940 --> 00:43:23.440
Thanks, everyone out there on the live stream.


00:43:23.440 --> 00:43:24.860
And thanks, everyone who listened.

