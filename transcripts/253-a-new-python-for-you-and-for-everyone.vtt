WEBVTT

00:00:00.001 --> 00:00:03.900
Hey there, thanks for listening. Before we jump into this episode, I just want to remind you

00:00:03.900 --> 00:00:09.780
that this episode is brought to you by us over at Talk Python Training and Brian through his pytest

00:00:09.780 --> 00:00:15.060
book. So if you want to get hands-on and learn something with Python, be sure to consider our

00:00:15.060 --> 00:00:22.240
courses over at Talk Python Training. Visit them via pythonbytes.fm/courses. And if you're

00:00:22.240 --> 00:00:27.840
looking to do testing and get better with pytest, check out Brian's book at pythonbytes.fm slash

00:00:27.840 --> 00:00:33.840
pytest. Enjoy the episode. Hello and welcome to Python Bytes, where we deliver Python news and

00:00:33.840 --> 00:00:41.640
headlines directly to your earbuds. This is episode 253, recorded October 6th, 2021. I'm Brian Okken.

00:00:41.640 --> 00:00:49.100
I'm Michael Kennedy. Yeah, name's CX. This is me. So welcome. Hey, before we jump into some of our

00:00:49.100 --> 00:00:54.980
topics, could you tell us a little bit about yourself? Sure, of course. First of all, I'm super

00:00:54.980 --> 00:01:02.760
excited to be here. A little bit nervous because it's my first podcast ever. And I'm very happy to

00:01:02.760 --> 00:01:08.700
be on Python Bytes. It's the podcast I've been listening to, I think, for the last five years,

00:01:08.700 --> 00:01:17.100
about the same time I got into Python. So right now, I'm... I started... Like recently, a month ago,

00:01:17.100 --> 00:01:22.260
I started working at a new company, cybersecurity company called Pytho Benito.

00:01:22.980 --> 00:01:32.480
They're doing some cool stuff, automated network perimeter security for Fortune 500 companies. Very

00:01:32.480 --> 00:01:42.440
interesting approach. What I do there is I'm an infrastructure and Intel tools developer and Python,

00:01:42.440 --> 00:01:50.300
of course. And I've been doing Python for the last six years. So as a developer, as a backend developer,

00:01:50.300 --> 00:01:58.080
as an automation developer, I actually started my career as a Q&A engineer. I didn't have any background,

00:01:58.080 --> 00:02:05.740
coding background. So I kind of learned the Python on the job starting from little script snippets. And then I got into

00:02:05.740 --> 00:02:15.660
pytest and automation. And at some point, I just switched to, yeah, full-time developer. But still, like,

00:02:15.660 --> 00:02:21.160
testing is something very precious to me. I'm very invested in it. So, yeah.

00:02:21.160 --> 00:02:22.600
Kind of important to me, too.

00:02:22.600 --> 00:02:23.440
Yeah, I know.

00:02:23.440 --> 00:02:25.440
Yeah, awesome.

00:02:25.440 --> 00:02:26.440
I know.

00:02:26.440 --> 00:02:27.840
I'm out of doing.

00:02:27.840 --> 00:02:28.680
Thank you.

00:02:28.680 --> 00:02:29.340
Welcome.

00:02:29.340 --> 00:02:31.980
Well, Michael, let's kick it off with some awesomeness.

00:02:31.980 --> 00:02:37.580
Yeah, I love awesome things. So let's kick it off with awesome HTMLX.

00:02:37.580 --> 00:02:45.620
So we've covered many awesome lists. And one of the hottest technologies in the Python space these days,

00:02:45.620 --> 00:02:52.680
and at least with the web, is over at htmax.org. A really cool way to basically create apps that you

00:02:52.680 --> 00:02:56.700
would normally create with Vue or React, but just do it all in Python and mostly on the server,

00:02:56.700 --> 00:03:01.140
which is really cool. So let's see. Make sure I get the name right here.

00:03:01.640 --> 00:03:08.600
Rajeshagar. Probably messed it up. Sorry. But put together this list. Thank you for keeping track of

00:03:08.600 --> 00:03:14.440
all the things that are awesome that have to do with HTMLX. So you look down here, there's like

00:03:14.440 --> 00:03:20.520
blog posts, tools, videos, examples. And what's kind of nice about it is it's not just,

00:03:20.520 --> 00:03:26.760
here's a Python list of using this framework, but it's this framework in a lot of different situations

00:03:26.760 --> 00:03:31.080
that might be useful to people. So for example, if you want to know how to use it in Django,

00:03:31.080 --> 00:03:38.040
there's an example, rather a blog post for that. There's one for using Tailwind with Flask. There's

00:03:38.040 --> 00:03:43.960
one for doing it with somewhere in here. I don't see it yet, but there's a Ruby on Rails one.

00:03:43.960 --> 00:03:50.600
There's plugins for HTML. So if you do Craft, which is a CMS, there's Django integration,

00:03:50.600 --> 00:03:54.520
Rails integration, all kinds of stuff. And there's videos. Check out number three here,

00:03:54.520 --> 00:03:59.880
Python bytes, HTMLX, dynamic and live HTML without JavaScript. That's our YouTube live

00:03:59.880 --> 00:04:03.960
stream. And we had, I think that was Hannah Stepnick who was on with us on that episode.

00:04:03.960 --> 00:04:07.160
And so there's some videos you can check out about it. There's also

00:04:07.160 --> 00:04:12.920
the talk Python episode where I interviewed Carson Gross, the creator. So they're including our stuff,

00:04:12.920 --> 00:04:17.880
which is very much appreciated. But then also a bunch of examples for like Node.js and ASP.NET.

00:04:17.880 --> 00:04:22.280
And oh my gosh, a lisp. A lisp is in there. But yeah, like plenty of Python ones as well.

00:04:23.160 --> 00:04:32.600
Yeah. This is cool. And yeah, I actually gave some try using HTML mix following one of the podcasts I

00:04:32.600 --> 00:04:40.520
listened to. I don't do a lot of front end, but it was really nice to get rid of some ad hoc

00:04:40.520 --> 00:04:46.360
JavaScript stuff I did. It works so well, doesn't it?

00:04:46.360 --> 00:04:55.160
Oh yeah. And I really don't, I really don't enjoy doing JavaScript because I'm not a front-end developer,

00:04:55.160 --> 00:05:01.960
but sometimes I need to provide some kind of a UI interface and then it requires JavaScript. And then

00:05:01.960 --> 00:05:07.160
like, yeah, I usually just take some snippets from Stack Overflow and throw it in there.

00:05:07.160 --> 00:05:16.440
And when I tried HTMLX, it was so much cleaner. I could understand what's going on there. Very, very nice.

00:05:16.440 --> 00:05:20.680
I think I need a sticker for my laptop that says, I really don't enjoy using JavaScript.

00:05:20.680 --> 00:05:27.880
So one thing I would like to throw out there that people, when I, I'm doing a talk in San Francisco and

00:05:27.880 --> 00:05:33.480
people heard the title, which is something like, you know, interactive Python web apps,

00:05:33.480 --> 00:05:37.320
hold the JavaScript, something like that. And they're like, oh, why are you always hating on

00:05:37.320 --> 00:05:42.760
JavaScript? I'm not, I don't think that this is so much about hating on JavaScript. If you want to do

00:05:42.760 --> 00:05:48.200
JavaScript, knock yourself out. You can write, you can like a lot of these examples are node.js and

00:05:48.200 --> 00:05:53.960
express using HTMX. But the three of us on this call, we're not like, I can't wait to run out and

00:05:53.960 --> 00:05:59.560
write stuff that runs on node. We'd much rather go write stuff that runs on Python. So what this lets us

00:05:59.560 --> 00:06:07.080
do is still use like Python code on the server, but then it just behaves as if it was running on the front.

00:06:07.080 --> 00:06:11.240
And it's super smooth. Just like y'all said, like it really cleans things up and makes it simple.

00:06:11.240 --> 00:06:13.560
Yeah. So here's a bunch of awesome stuff.

00:06:13.560 --> 00:06:15.960
It's not just JavaScript. There's a bunch of other languages I don't want to work in either.

00:06:15.960 --> 00:06:17.640
Exactly.

00:06:17.640 --> 00:06:24.520
Awesome. Well, there's not a whole lot more to add to this, but it's nice when these emerging

00:06:24.520 --> 00:06:30.760
technologies are coming along to get some help and examples and other resources. So thanks,

00:06:30.760 --> 00:06:33.080
Rush, for putting together this awesome list.

00:06:33.080 --> 00:06:39.000
Yeah. Well, I can't believe I got this topic. You guys. Yeah. Anyway, Python 3.10,

00:06:39.000 --> 00:06:46.680
I'm so excited. It came out two days ago. I'm loving it. I've switched. I'm using it at work.

00:06:46.680 --> 00:06:52.040
I'm using it at home. And it's not like it's new. I mean, one of the things there was an article.

00:06:52.040 --> 00:06:57.400
I'll just go through a few topics. One, the logo is awesome. 310, the 310 launch logo.

00:06:57.400 --> 00:07:02.360
Super cool. Yeah, I love it. I want a sticker like that. There's a couple of videos that I think are

00:07:02.360 --> 00:07:10.600
good to at least know about. There's the launch party that started off with some awesome hats.

00:07:11.160 --> 00:07:19.720
They basically actually walked through the entire launch process of making 310 live on camera.

00:07:19.720 --> 00:07:23.480
It's three hours long though. I only watched a little bit, but great hats.

00:07:23.480 --> 00:07:29.560
This is cool. Yeah. So this is by the people who are actually releasing. It's not a party celebrating

00:07:29.560 --> 00:07:31.640
the launch. It's the actual launch.

00:07:31.640 --> 00:07:33.960
Yeah, the actual launch. Right. It's awesome.

00:07:33.960 --> 00:07:39.800
It was neat. But chat brains hosted, I think that was a prerecorded thing, but there was a

00:07:39.800 --> 00:07:49.000
what's new in Python 3.10 video that I, this is more, more, more consumable at 33 minutes.

00:07:49.000 --> 00:07:55.080
Um, I, I definitely, I watched this, while it was live or while it was being broadcast at first.

00:07:55.080 --> 00:07:59.400
Yes. A couple of days ago. And it's really interesting. This, this one's really great.

00:07:59.400 --> 00:08:04.760
I thought I knew everything that was coming in 310. The thing that I really love about this video is,

00:08:04.760 --> 00:08:11.240
um, there's a Łukasz Langa and, camera or somebody else talked about, do you know,

00:08:11.240 --> 00:08:18.840
the other person was Sebastian Ramirez and Brant Boucher. Okay. and, Lucas,

00:08:18.840 --> 00:08:25.080
talked about some of the, some of the details on, well, a couple of them were talking about the,

00:08:25.080 --> 00:08:30.600
uh, I'm getting this wrong. What's the thing? the structural pattern matching. That's it.

00:08:30.600 --> 00:08:35.960
Yes. super, super switch. Yeah. So is structural pattern matching. It's gonna,

00:08:35.960 --> 00:08:42.120
it's really cool. I haven't come up with a reason to use it yet. but, give me time, but the,

00:08:42.120 --> 00:08:47.560
there was a discussion of why the, like a whole, a big discussion on this, which was neat. It was a kind

00:08:47.560 --> 00:08:53.800
of a tutorial right there. And then also a discussion of why black doesn't work for it

00:08:53.800 --> 00:08:59.400
yet. So that was the odd takeaway that I didn't, wasn't expecting is if you're really addicted to

00:08:59.400 --> 00:09:04.680
black, you can't use structural pattern matching and black together right now. they will catch

00:09:04.680 --> 00:09:10.680
up, but they're, they have two different parsers for Python and getting them all cut up will be,

00:09:10.680 --> 00:09:19.800
uh, it'll take a little time. So be patient. Nice. Yeah. That's huge. But I guess if you want to use,

00:09:19.800 --> 00:09:28.200
uh, the, if you still want to use black, you just need to just, do formatting off on the block when

00:09:28.200 --> 00:09:33.320
you use, pattern matching. So yeah, actually I have to put it in a different file. Cause you can't,

00:09:33.320 --> 00:09:41.560
the format off doesn't work in line in the file with it. I tried that and it didn't work.

00:09:41.560 --> 00:09:44.920
Interesting. It didn't work. Oh, that's a, that's a bummer. Okay.

00:09:44.920 --> 00:09:51.560
But all the other features of three 10 seem to work fine. So it's good. Yeah. Very nice. some of the

00:09:51.560 --> 00:09:58.520
some of the things that jump out that are exciting for me is X pipe Y versus rather than, X,

00:09:58.520 --> 00:10:07.400
you know, union of X comma Y or optional of X versus X comma or X pipe. None. Those, those are nice.

00:10:07.400 --> 00:10:11.640
The additional type information and better error messages. Those are the things that I'm looking

00:10:11.640 --> 00:10:15.000
forward to, except for, I'm not really looking forward to errors. I generally don't like that,

00:10:15.000 --> 00:10:20.280
but once you're there, I prefer better error messages. I think everybody teaching Python is going

00:10:20.280 --> 00:10:26.520
to love the error messages. So. Oh, the, the error messages are pretty awesome. Just a few days ago,

00:10:26.520 --> 00:10:33.640
I was refactoring some code and I had some, well, a bit complex expression. It was like nested deep and

00:10:33.640 --> 00:10:39.880
I needed to do some asserting. And so another parenthesis, and I guess I missed something.

00:10:39.880 --> 00:10:46.520
And then I would have, I had this error, like expression is expected. And we're like, what expression?

00:10:46.520 --> 00:10:52.760
It's all right there. And I wasted literally like about three minutes figuring out what expression

00:10:52.760 --> 00:10:59.400
it's missing. And eventually they end up like, I missed some curly brackets. And I really expect,

00:10:59.400 --> 00:11:07.720
I mean, yeah. Pattern matching is great. The, the pie painting is awesome. But those specific,

00:11:07.720 --> 00:11:14.280
like little things are, I don't know, I think like really bombs your dev experience. So yeah.

00:11:14.280 --> 00:11:20.760
Yeah. It definitely does. Speaking of better error messages and stuff, I'm planning on just integrating

00:11:20.760 --> 00:11:25.640
a rich, like the trace back stuff and all those kinds of things just into all my apps. Cause it's just

00:11:25.640 --> 00:11:31.000
better. And it's one line of code at the top. So very nice. Yeah. That's cool. Yeah. All right. Good one,

00:11:31.000 --> 00:11:39.560
Brian. All right. Yeah. You're up with the next one. Yeah. So it's a tool I've stumbled upon a while

00:11:39.560 --> 00:11:51.160
when I was looking for some kind of a solution for bundling all my, all our analysis tools in one,

00:11:51.160 --> 00:12:00.600
and then we have like large code bases and we use a microservices. So that we have a lot of repositories.

00:12:00.600 --> 00:12:07.960
And of course we would like to use some linking. and then we added pipeline style and then we added

00:12:07.960 --> 00:12:17.400
another package because we found it pretty useful called culture that finds that some unused, the code

00:12:17.400 --> 00:12:21.880
then pointed out that maybe it should be removed or refactor, which is quite cool.

00:12:21.880 --> 00:12:26.920
Vulture. That is a fantastic name for that Lint feature. Yeah.

00:12:26.920 --> 00:12:29.800
It goes in five inch dead code. Oh my gosh.

00:12:29.800 --> 00:12:31.480
Yeah. Yeah. It's pretty cool.

00:12:31.480 --> 00:12:33.560
Okay. Sorry. I just, I love the name.

00:12:33.560 --> 00:12:40.200
Yeah. That's, that's one of the latest additions. And then, well, because we deal with the

00:12:40.200 --> 00:12:45.800
some security and vulnerabilities, we decided also to add bandwidth to the whole party.

00:12:45.800 --> 00:12:51.960
Uh, those are really awesome tools, but we started to get a bit frustrated. First of all,

00:12:51.960 --> 00:12:59.240
each and every tool requires a sun configuration file, like profiling, like, every linker has

00:12:59.240 --> 00:13:05.400
its own rules by that style. You want to ignore some stuff. Oh, it's kind of a, kind of a requires customization.

00:13:05.400 --> 00:13:14.280
So we ended up having like four different customization profile files for each tool. And that's okay. I mean,

00:13:14.280 --> 00:13:20.440
once you've done it, it's okay. But then people start to get really frustrated with their FTIs

00:13:20.440 --> 00:13:28.200
because it became a bit slow because of the, all the tools run sequentially. So, and even more so,

00:13:28.200 --> 00:13:33.800
they become a bit frustrated with all the types, all the different outputs. So let's say you have

00:13:33.800 --> 00:13:41.320
issues in piling, and then you have problems with PID code style. And at first, we didn't, we just

00:13:41.320 --> 00:13:47.480
started failing once you, once you have a failure in piling, you don't proceed, but you fix piling. And then,

00:13:47.480 --> 00:13:53.880
oh, okay. Yay. But then you have errors in Python style and so on and so on. So it was really frustrating.

00:13:53.880 --> 00:14:02.600
Um, so we said, okay, just okay. It fails, but let's continue. And then just, speed all the errors once, once it's done.

00:14:02.600 --> 00:14:11.320
So, but still people had some issues and started reading the output because it's different format. And they're like,

00:14:11.320 --> 00:14:18.280
okay, what does it want from me? What, what do I do? And, you know, and then the whole thing, the whole experience is,

00:14:18.280 --> 00:14:24.440
okay, I finished working on my PR. I just want to post it and get a review in it. But then I get stuck in this

00:14:24.440 --> 00:14:32.120
limbo of fixing all this kind of stuff. So we started thinking what can, improve the, user and the

00:14:32.120 --> 00:14:37.720
dev, the dev experience. So people will get frustrated. Yeah. Because people want people to take the

00:14:37.720 --> 00:14:43.320
data. Yeah. They start a disabling creatures and that's something that we didn't want.

00:14:43.320 --> 00:14:47.000
Yeah. Then your CI starts to lose all its value and everything. Right?

00:14:47.000 --> 00:14:55.000
Exactly. Exactly. So I kind of stumbled on a prospector and I, I say stumble because it was,

00:14:55.000 --> 00:15:01.160
was always there. It's actually brought, brought by PySecure, the same, the same guys, the same

00:15:01.160 --> 00:15:07.560
organization that are responsible for piling and for PyCock style. But somehow I missed the

00:15:07.560 --> 00:15:14.840
whole bundle thing that called prospector. I guess it's a bit less popular. So we started using it.

00:15:14.840 --> 00:15:24.520
Uh, it bundled all our, analysis tools together in one run and in one unified output. So it's much

00:15:24.520 --> 00:15:32.280
easier when you have the output just, just to read it and understand what's going on. And more than that,

00:15:33.160 --> 00:15:39.720
some bonuses, we discovered some more tools that it provides that we didn't be weren't even familiar

00:15:39.720 --> 00:15:48.040
with such as the McCabe complexity analysis, which, provides, points out some kind of a cop,

00:15:48.040 --> 00:15:54.520
like in case you have a very big, function with nested conditions and stuff.

00:15:54.520 --> 00:15:57.480
Nice. Is that like cyclomatic complexity and stuff like that?

00:15:57.480 --> 00:16:03.000
Exactly. Yeah. So there's actually a link there inside that, takes

00:16:03.000 --> 00:16:11.000
you to Wikipedia and explains how all those things are calculated, but it's pretty, pretty nice.

00:16:11.000 --> 00:16:17.720
Uh, some, you, you cannot always follow it through because sometimes, well, you have a complex function

00:16:17.720 --> 00:16:23.640
in the legacy code and don't necessarily want to mess with it, but it's nice to have this information

00:16:23.640 --> 00:16:31.640
that you can put in a backlog. So that's something we discovered that there's also pyroma if you're developing packages.

00:16:31.640 --> 00:16:40.440
So if you have like some missing, let's say contributor, RFC or, so it will point out all the stuff there.

00:16:40.440 --> 00:16:57.640
Um, you have the dodgy, that points out if you have like some sensitive data such as passwords or like AWS keys or some things you not necessarily want to include in your code way.

00:16:57.640 --> 00:17:07.800
So a lot of goodies that come with this prospector that actually bundles a lot of analysis tools, which is cool.

00:17:07.800 --> 00:17:16.360
But, as I said, for us, it really improve our experience because it's one output and one profile configuration,

00:17:16.360 --> 00:17:24.680
which means instead of having like a configuration file for each of the tools, you have only one to rule them all.

00:17:24.680 --> 00:17:33.160
And more than that, you have profile, which means like, let's say you have, at some point you would like to run my type.

00:17:33.160 --> 00:17:44.520
Okay. But in some point you don't want, like, if you are merging to master, maybe you want to check vulnerabilities at that point, but not on every commit because you're still developing.

00:17:44.520 --> 00:17:52.360
So super useful. And surprisingly, it runs faster than each tool on its own.

00:17:52.360 --> 00:17:54.840
Wow. That is super cool.

00:17:54.840 --> 00:18:04.840
It takes some time. It takes some time. I mean, it's not a super fast because, first of all, it installs all the required tools for just in one bundle.

00:18:04.840 --> 00:18:14.840
And the execution is still the same execution for all the tools, but yeah, it's really simplified thing. So highly recommended.

00:18:14.840 --> 00:18:21.320
Cool. Good recommendation. out in the live stream, Paul Ansel has a question. Not sure if you know the answer.

00:18:21.320 --> 00:18:31.320
Is there a way to add a comment to your code for her example, hash, no prospector to tell it that a given line is actually not a problem, similar to how bandit would disable warnings with hash. No sec.

00:18:31.320 --> 00:18:50.680
Um, so first factor is just a bundle. It's, like behind the scene, it just indicates the same tool. So you would use the same, disable piling or disable pilot style or no key way. So the, the rules there apply to each tool differently.

00:18:50.680 --> 00:19:16.120
Got it. Makes sense. Cool. All right. Am I up next, Brian? yes. I think so. so another topic on rich, I feel like we're always talking about rich now. super fun. I actually just had Will McGugan, who I see out in the audience. Hey, Will, on talk Python. So that was really fun. So here's the thing from Avi Pearl, not Avi Python, but you know, we'll still accept it.

00:19:16.120 --> 00:19:41.460
Just kidding. That's just the last name. Thank you Avi for sending this over and let us know about it. so Kunyan Tran created this cool terminal based visualizer for Panda's data frames. So she's into data science and stuff like that. And like many things that have to do with rich in UI, just having a screen animation is, is really all you need to know whether or not this is useful for you.

00:19:41.720 --> 00:20:07.880
And so you can just go to the website that we'll link to the GitHub repo and it's got an animated GIF right on the front there. Super nice. So just imagine you are in a Jupyter notebook and you went to a data frame, you said DF dot head or tail, something like that. And you get a little table that comes out. Well, here's one with animation and color and all that stuff as a rich table, you know, the rich library generating the table of the data frame right there.

00:20:07.880 --> 00:20:29.340
So if you're creating something in the terminal and you want a nice output for a data frame, it's pretty simple. The code that you got to write is super easy. So for example, you come up with a data frame somehow, and then you just say from rich data frame and import pretty fine. And then just pretty fine your data frame. And that's it done.

00:20:29.340 --> 00:20:42.600
Like, yeah, it's cool, right? You can also apply it to just regular dictionaries and stuff like that. And you can control things like limit the number of rows that come back, how many columns will be shown in case there's a ton.

00:20:43.040 --> 00:21:06.600
You don't want to fill the screen. Of course, you can transform your data frame. But if you just want a quick like, hey, just show me the first few columns, it'll do that. You can either view the head or the tail effectively. You know, if you're going to say, give me 20 columns, there's 2000. Well, I think that by default, it shows the first the head, but you can also show it in reverse and clear the console. So it just fills the screen, things like that. So even control the animation.

00:21:06.600 --> 00:21:16.420
So not a lot to do with this. But if it's useful to you, I think, I mean, like not a lot of gears and ways to use it. But I think if it's useful to you, you'll really find it interesting.

00:21:16.420 --> 00:21:19.420
Yeah, all those pretty colors. I like it.

00:21:19.420 --> 00:21:23.560
Yeah, yeah, yeah. I love the colors. So super cool.

00:21:23.560 --> 00:21:35.820
So Rich has a ton of stuff in it. But I mean, I use the tables like all over the place because it's just the easiest and prettiest way to display a table right now in a CLI application.

00:21:36.240 --> 00:21:36.780
Awesome.

00:21:36.780 --> 00:21:38.040
Like, love it.

00:21:38.040 --> 00:21:38.800
Love it. Love it.

00:21:38.800 --> 00:21:43.940
Raw Inta out in the live stream says, well, Rich for the win once again, looks great for SSH session.

00:21:43.940 --> 00:21:48.020
Yes, it does. And I hadn't really even thought about it for that scenario. But yeah, it definitely does.

00:21:48.020 --> 00:21:56.780
And Jared says to us, Brian and me, I can't thank you enough for all your podcasts as great as they are.

00:21:56.780 --> 00:22:00.680
The video format is even better. Yeah, Jared, thanks for being here. We always love having people on the show.

00:22:00.680 --> 00:22:05.520
It gives us a little bit more interactive aspect for all the people listening afterwards.

00:22:05.880 --> 00:22:06.160
Yeah.

00:22:06.160 --> 00:22:06.800
Have that, Brian?

00:22:06.800 --> 00:22:07.200
Definitely.

00:22:07.200 --> 00:22:08.020
Go for it.

00:22:08.020 --> 00:22:17.680
So, yeah. I'm going to go back to 3.10 for now. So I'm like, one of the things I'm excited about is the union types.

00:22:17.680 --> 00:22:29.580
One of the things that was released is union types so that you can do X or Y. The thing that I really like about this, one of the things is the optional.

00:22:29.580 --> 00:22:47.200
So you can instead of stuff you've got, I don't have an example here, but if you've got a function that takes an integer, but it might default to none, you can now say that the type is int or none, and then assign it the default value of none.

00:22:47.300 --> 00:23:07.740
So it'd be int or none equal none. And that's, and it's really clean. One of the nice things about that is you don't have to import optional from typing. So that's really clean. But I was, I was like bummed because I actually, a lot of the projects I work on, I have to support more than just 3.10. I've got to support 3.7, 3.8.

00:23:07.740 --> 00:23:10.980
What? You haven't already moved to 3.10? You guys are such laggards.

00:23:10.980 --> 00:23:13.760
The stuff that, like, it's my application.

00:23:13.760 --> 00:23:15.620
You've got two days. Come on.

00:23:15.620 --> 00:23:23.200
If you're supporting Python packages, you want to support more than just one version of Python, right? A little bit. I mean, you don't have to.

00:23:23.200 --> 00:23:24.140
No, of course.

00:23:24.140 --> 00:23:37.680
If you want to. And so then I was excited to see that Adam Johnson put out, and I was actually, I want to shout out who told me about this. Oh, I lost it. Somebody else told me about this.

00:23:37.680 --> 00:23:44.480
So sorry. But Adam Johnson wrote an article about type hints, how to upgrade syntax with pi upgrade.

00:23:44.480 --> 00:23:54.080
So Anthony Sotili wrote a pi upgrade tool. And what it'll do is it does a lot of stuff.

00:23:54.080 --> 00:23:59.200
But one of the things it does is it changes this, this union operator or this. Yeah.

00:23:59.320 --> 00:24:14.980
For types. And it includes, what does it include? The from future import annotations that will allow you to use this type, union types and none in everything back to Python 3.7.

00:24:14.980 --> 00:24:16.060
Very nice.

00:24:16.060 --> 00:24:19.700
Supposedly. I haven't tried it on 3.7, but that's the claim.

00:24:20.560 --> 00:24:24.180
So there's a nice article on how to upgrade your syntax.

00:24:24.180 --> 00:24:27.620
This is a tool, like an automatic tool you just run.

00:24:27.620 --> 00:24:29.300
Yeah. It's a pi upgrade.

00:24:29.300 --> 00:24:30.020
Yeah.

00:24:30.020 --> 00:24:31.600
That's cool.

00:24:31.600 --> 00:24:32.120
Very nice.

00:24:32.120 --> 00:24:38.140
Frederick out in the live stream says the union pipe really makes everything a lot less noisy and more readable. Love it.

00:24:38.140 --> 00:24:38.640
Yes.

00:24:38.640 --> 00:24:40.660
What are you going to offer? What are you going to suggest?

00:24:41.940 --> 00:24:44.180
Oh, the next topic, you mean?

00:24:44.180 --> 00:24:45.980
Oh, yeah. Sure.

00:24:45.980 --> 00:24:48.740
Oh, I actually wanted to just say.

00:24:48.740 --> 00:24:50.660
Just a comment on that. I thought you were going to have a comment on that.

00:24:50.660 --> 00:24:59.400
Yeah, I actually have a little comment because I really like the pi upgrade stuff because I kind of feel that lately we have.

00:24:59.840 --> 00:25:10.700
I enjoy type annotations, but like with each version, I mean, have like a little bit of change and then you have to comply to the previous one.

00:25:10.700 --> 00:25:21.840
And then like what I would love to see is like some kind of a convention on how to do type hinting correctly because there are so many versions.

00:25:21.840 --> 00:25:28.760
And well, because I'm a bit lazy, I don't always use type annotations, but I know I should.

00:25:29.280 --> 00:25:36.620
And then I use some kind of what I use the tools like the monkey type and sometimes the pi annotate.

00:25:36.620 --> 00:25:41.400
So they just add type annotations during run time.

00:25:41.400 --> 00:25:55.440
And then it's a kind of a, then I kind of have some kind of a convention there because I feel like with hyper annotation, you can do it in so many ways.

00:25:55.440 --> 00:25:57.560
Yeah, it's a little bit like string formatting.

00:25:58.260 --> 00:25:58.760
Exactly.

00:25:58.760 --> 00:25:58.760
Exactly.

00:25:58.760 --> 00:26:03.980
But eventually we all, I think we can all agree that f-strings is the way to go.

00:26:03.980 --> 00:26:04.320
Right.

00:26:04.320 --> 00:26:04.320
Yes.

00:26:04.320 --> 00:26:15.740
But right now we're kind of in a wild, wild west with cyber annotations because we have those, I think 3.5, 3, 3.3.

00:26:15.740 --> 00:26:15.860
Yeah.

00:26:15.860 --> 00:26:28.660
And then we have something new and then the old becomes obsolete or fraud upon and then, oh, you shouldn't do it like that.

00:26:28.660 --> 00:26:36.400
But what I would like to see, maybe a tool such as the Pi upgrade that will tell me, okay, this is the convention.

00:26:36.400 --> 00:26:37.460
This is how we do.

00:26:37.460 --> 00:26:41.800
You should be doing your type on a type hinting from now on.

00:26:42.200 --> 00:26:42.600
That's a good idea.

00:26:42.600 --> 00:26:43.780
We saw you're doing the old way.

00:26:43.780 --> 00:26:44.800
Here's the new way to that.

00:26:44.800 --> 00:26:45.460
Yeah.

00:26:45.460 --> 00:26:45.940
Yeah.

00:26:45.940 --> 00:26:47.480
And I'm, I'm a bit confused.

00:26:47.480 --> 00:26:50.660
I'm a bit, and I'm lazy and I'm confused.

00:26:50.660 --> 00:26:52.760
Not entirely.

00:26:52.760 --> 00:26:54.760
It's not a built in feature still.

00:26:54.760 --> 00:26:56.520
Like you're using type annotation.

00:26:56.520 --> 00:26:58.140
I see a lot of Python.

00:26:58.140 --> 00:27:00.440
They slow just fluent for them.

00:27:00.440 --> 00:27:06.440
And for me, it's like, okay, I'll write my code and then, okay, I'll start using some type hinting.

00:27:06.440 --> 00:27:07.240
Yeah.

00:27:07.240 --> 00:27:07.940
Sounds good.

00:27:07.940 --> 00:27:08.560
Yeah.

00:27:08.560 --> 00:27:10.420
I think Pi upgrade is the trick.

00:27:10.420 --> 00:27:18.800
So it does do a lot of these, like the going from uppercase list to lowercase list and switching away from optional and things like that.

00:27:19.040 --> 00:27:21.740
I may be running this later today because it looks good.

00:27:21.740 --> 00:27:26.240
Some kind of a type hinting the formatter.

00:27:26.240 --> 00:27:28.760
Just make it like it should be.

00:27:28.760 --> 00:27:31.500
That's what I would like to see.

00:27:31.500 --> 00:27:31.800
Yeah.

00:27:31.800 --> 00:27:32.640
Exactly.

00:27:32.640 --> 00:27:34.700
Brian, you know what time it is?

00:27:34.700 --> 00:27:35.900
Extra time.

00:27:35.900 --> 00:27:37.400
Extra time.

00:27:37.400 --> 00:27:39.080
You got anything you want to put up there?

00:27:39.080 --> 00:27:40.020
Throw out to people?

00:27:40.620 --> 00:27:41.060
Yeah.

00:27:41.060 --> 00:27:44.660
Actually, I don't have any links for it, but I should have had links up.

00:27:44.660 --> 00:27:48.600
But I was, this is hard for me to believe actually.

00:27:48.600 --> 00:27:58.380
But in like 2017, a long time ago, 2017, 2018, I submitted a defect to pytest, the pytest project.

00:27:58.380 --> 00:28:05.320
And then I also wrote up a test to describe the defect, but I didn't know how to fix it.

00:28:05.400 --> 00:28:09.340
So that was my first contribution to pytest is adding test code.

00:28:09.340 --> 00:28:18.780
But this last week, I added two, had two pull requests and they both got accepted and merged.

00:28:18.780 --> 00:28:22.000
So the next version of pytest will actually have my code in it.

00:28:22.000 --> 00:28:22.280
So.

00:28:22.280 --> 00:28:23.340
Super cool.

00:28:23.340 --> 00:28:24.440
Very cool.

00:28:24.440 --> 00:28:27.340
Hey, I just realized we skipped Yael's final thing.

00:28:27.340 --> 00:28:28.000
Oh, right.

00:28:28.000 --> 00:28:28.420
Oh, no.

00:28:28.420 --> 00:28:28.640
Yeah.

00:28:28.640 --> 00:28:29.440
Sorry.

00:28:29.440 --> 00:28:29.740
Yeah.

00:28:29.740 --> 00:28:31.660
Tell us about that before we get to the rest of the extras.

00:28:31.660 --> 00:28:33.060
That's fine.

00:28:35.060 --> 00:28:35.700
So, yeah.

00:28:35.700 --> 00:28:40.080
I feel like you've got these cool ways to like bring together multiple tools.

00:28:40.080 --> 00:28:43.600
Instead of telling people about Bandit, you're like, here's how to use Bandit, all these things.

00:28:43.600 --> 00:28:46.520
Or instead of Black, here's how to like do all these different things.

00:28:46.520 --> 00:28:47.160
Yeah.

00:28:47.160 --> 00:28:47.580
Yeah.

00:28:47.580 --> 00:28:52.400
I kind of like combining things and then make it more general.

00:28:52.400 --> 00:28:57.100
I mean, the Python ecosystem is so rich.

00:28:57.100 --> 00:28:58.560
There are so many things.

00:28:58.560 --> 00:28:59.480
Yeah.

00:28:59.480 --> 00:29:04.620
So it's nice to bring some stuff together, bundled and easy to use.

00:29:04.720 --> 00:29:09.300
So, darker is something also I stumble.

00:29:09.300 --> 00:29:19.760
Well, I was recommended by a friend after I, after describing a problem or my resentment even to Black formatter.

00:29:20.240 --> 00:29:23.720
I know it's not a popular take.

00:29:23.720 --> 00:29:25.260
Maybe I shouldn't say it.

00:29:25.260 --> 00:29:28.440
But until recently, I was quite well.

00:29:28.440 --> 00:29:31.720
It's not that I don't enjoy Black formatting.

00:29:31.720 --> 00:29:33.260
I think it looks great.

00:29:33.260 --> 00:29:34.160
It's more readable.

00:29:34.160 --> 00:29:35.160
It's nice.

00:29:35.620 --> 00:29:43.880
But I had some major issues with, well, with myself and colleagues that we can get sometimes over into the app.

00:29:43.880 --> 00:29:46.500
Like, okay, I start to write some code.

00:29:46.500 --> 00:29:49.580
And I don't know if it's a bug piece or I'm adding some feature.

00:29:49.580 --> 00:29:50.880
And I'm done.

00:29:50.880 --> 00:29:54.740
But then, yay, I want to make it Black because it's cool.

00:29:54.740 --> 00:29:57.100
And then I run Black on the model.

00:29:57.100 --> 00:30:03.880
Or sometimes if I really want to go wild, I'll run it on the entire package.

00:30:03.880 --> 00:30:06.900
And then I submit my PR.

00:30:06.900 --> 00:30:16.160
And my PR, well, it includes the single bug fix or the little line I've added for the functionality or the fixing.

00:30:16.160 --> 00:30:23.800
And then I have, like, one, I don't know, some hundred changed files because I ran Black.

00:30:24.140 --> 00:30:28.720
Or even if it's in the model, like, the whole model looks, like, brand new.

00:30:28.720 --> 00:30:34.280
And then if I have to use such code, I would say, okay, but where do I start?

00:30:34.280 --> 00:30:35.120
Where do I begin?

00:30:35.120 --> 00:30:36.640
Because I don't know what changed my...

00:30:36.640 --> 00:30:38.640
Why are there so many changes, right?

00:30:38.640 --> 00:30:39.740
Yeah.

00:30:39.740 --> 00:30:46.960
And it became a real issue because, on one hand, there are a lot of developers that were really, like, into Black.

00:30:46.960 --> 00:30:49.100
Let's make everything Black.

00:30:49.100 --> 00:30:51.080
Let's make everything beautiful.

00:30:51.880 --> 00:30:55.460
And on the other hand, we would get those huge PRs.

00:30:55.460 --> 00:30:57.300
Like, okay, where do I start?

00:30:57.300 --> 00:30:58.400
Where do I even start?

00:30:58.400 --> 00:31:01.060
So we started restricting Black.

00:31:01.060 --> 00:31:06.140
We said, we, at some point, we, as a group, we decided, okay, no more Black.

00:31:06.140 --> 00:31:08.180
But that was also very frustrating.

00:31:08.180 --> 00:31:14.280
And then I had some talks with a friend of mine.

00:31:14.280 --> 00:31:16.400
I said, okay, you should use Darker.

00:31:16.400 --> 00:31:19.400
And Darker is really tiny.

00:31:19.400 --> 00:31:21.060
It's not a big package.

00:31:21.620 --> 00:31:23.120
very lightweight.

00:31:23.120 --> 00:31:30.040
And what it does, it takes a little bit more conservative approach.

00:31:30.040 --> 00:31:34.040
It doesn't say, okay, just Black everything and have a huge PR.

00:31:34.040 --> 00:31:41.700
It says, okay, you want to have, to convert your code being beautiful and Black.

00:31:42.120 --> 00:31:43.540
But let's make it gradually.

00:31:43.540 --> 00:31:50.660
And then you have, and then you eliminate this huge PR and this huge mess.

00:31:50.660 --> 00:31:53.160
Just change the stuff you need.

00:31:53.160 --> 00:31:58.420
Run the Docker just on the file or even on the entire code.

00:31:58.420 --> 00:32:03.800
And then it will format only the changes you made in the file.

00:32:03.800 --> 00:32:04.420
Okay.

00:32:04.420 --> 00:32:05.920
So here's the pink.

00:32:05.920 --> 00:32:07.820
Let's see.

00:32:07.820 --> 00:32:09.940
Nice example here.

00:32:10.480 --> 00:32:11.360
I love that.

00:32:11.360 --> 00:32:13.840
I love that it's runs on the last Git changes.

00:32:13.840 --> 00:32:15.860
And that it's actually dark.

00:32:15.860 --> 00:32:17.200
It's very simple.

00:32:17.200 --> 00:32:20.060
I can't believe no one thought of it before.

00:32:20.060 --> 00:32:21.760
Like, so simple.

00:32:21.760 --> 00:32:26.740
Because what it does, it just does Git diff, gets the changes.

00:32:27.100 --> 00:32:30.660
And then just runs Black formatting, all those changes.

00:32:30.660 --> 00:32:35.240
And then you have normal looking PR with nice formatting.

00:32:35.240 --> 00:32:41.020
And yeah, you won't get the whole beautiful Black all in one.

00:32:41.020 --> 00:32:42.860
And you'll make it gradually.

00:32:42.860 --> 00:32:48.120
But eventually, I think it's more controlled, more constrained.

00:32:48.120 --> 00:32:50.660
And I think it's better this way.

00:32:50.660 --> 00:32:54.600
And we started using it a couple of months ago.

00:32:54.600 --> 00:32:57.260
And I think it has a good progress.

00:32:57.260 --> 00:33:00.780
And we just integrated it into our pre-commit hooks.

00:33:00.780 --> 00:33:02.280
So it's kind of seamless.

00:33:02.280 --> 00:33:04.940
It's not that you need to remember running Black.

00:33:04.940 --> 00:33:09.000
Of course, you can also integrate it in PyCharm or ES Code.

00:33:09.000 --> 00:33:14.040
I think even Vim for people who are fond of Vim and stuff.

00:33:14.040 --> 00:33:16.460
I think it has some kind of a plugin as well.

00:33:16.460 --> 00:33:17.240
I don't know who would do that.

00:33:17.240 --> 00:33:18.200
Yeah.

00:33:18.200 --> 00:33:18.820
I don't know.

00:33:18.820 --> 00:33:21.520
Who are those people anyways?

00:33:23.120 --> 00:33:25.400
But yeah, so it's simple.

00:33:25.400 --> 00:33:25.860
Yeah.

00:33:25.860 --> 00:33:33.700
It's really nice and made by, I hope I'll get the name right.

00:33:33.700 --> 00:33:38.600
It's anti-cohoila.

00:33:38.600 --> 00:33:39.280
Yes.

00:33:39.280 --> 00:33:40.700
I hope I didn't know the name.

00:33:40.700 --> 00:33:41.080
Yeah, awesome.

00:33:41.080 --> 00:33:42.180
I think this is great.

00:33:42.180 --> 00:33:42.340
Yeah.

00:33:42.340 --> 00:33:45.860
Paul out in the audience has an interesting bit of feedback.

00:33:45.860 --> 00:33:50.540
This would be super helpful if you're starting to enforce code standards on an already existent repo,

00:33:50.700 --> 00:33:52.940
which is the most kind of code you work with.

00:33:52.940 --> 00:33:53.680
So, yeah.

00:33:53.680 --> 00:33:54.160
Yeah.

00:33:54.160 --> 00:33:58.980
If you're starting like new projects, so yeah, black it all the way.

00:33:58.980 --> 00:34:00.000
That's fine.

00:34:00.000 --> 00:34:01.100
Yeah.

00:34:01.100 --> 00:34:08.220
I've heard recommendations before to just have one commit that just does the black thing.

00:34:08.220 --> 00:34:14.600
But one of the problems with that is you lose sort of the history of when the file really was last modified.

00:34:14.600 --> 00:34:24.120
So if a file hasn't been touched in two years, it's kind of nice to leave it as not touched for two years so that you can kind of see the history.

00:34:24.120 --> 00:34:24.800
Yeah.

00:34:24.800 --> 00:34:25.200
Yeah.

00:34:25.200 --> 00:34:25.920
For sure.

00:34:26.600 --> 00:34:26.760
Yeah.

00:34:26.760 --> 00:34:34.400
If you run black on a five-year-old call base, it would look like you did it all from the beginning.

00:34:34.400 --> 00:34:40.740
On the other hand, if you want to up your commit status, number of lines changed way more than the rest of the team.

00:34:40.740 --> 00:34:41.720
You can always do that.

00:34:41.720 --> 00:34:42.080
Yeah.

00:34:42.080 --> 00:34:42.660
Yeah.

00:34:42.660 --> 00:34:43.280
You could.

00:34:43.280 --> 00:34:45.180
All right.

00:34:45.560 --> 00:34:49.540
I know, Yael, you have a couple of things that you want to give a shout out to at the end here as well.

00:34:49.540 --> 00:34:51.380
So let's just keep going with those.

00:34:51.380 --> 00:34:51.960
Yeah.

00:34:51.960 --> 00:34:52.320
Sure.

00:34:52.320 --> 00:34:55.320
So I have two things.

00:34:55.320 --> 00:34:58.780
The first one is actually a colleague of mine.

00:34:58.780 --> 00:35:07.080
And he's been writing a book, a very interesting book, a bit of a controversial book if you dive into it.

00:35:07.080 --> 00:35:32.200
And he basically says object-oriented, it's good for some, but in general, when you deal with complex problems, the object-oriented programming might even make stuff a lot more complicated in terms of debugging, in terms of separation of concerns.

00:35:32.200 --> 00:35:42.420
And then he presents some kind of a new way to deal with the data and how we process data.

00:35:42.420 --> 00:35:46.460
So it's data-oriented programming.

00:35:46.460 --> 00:35:52.400
I have to admit, I read some of the chapters, not all.

00:35:52.400 --> 00:35:53.560
I didn't finish the book.

00:35:53.560 --> 00:35:57.040
It's almost still a work in progress, but most of it's a bit.

00:35:57.040 --> 00:36:09.940
But you don't have to agree on everything, but the whole approach is the combination of data-oriented programming with functional programming.

00:36:09.940 --> 00:36:12.360
I think there's some benefits to it.

00:36:12.360 --> 00:36:20.160
And some complex problems can be solved faster and easier and with less debugging strength.

00:36:20.880 --> 00:36:39.360
Like for me, like I have this rule of thumb that if I have to activate debugger over and over again to understand what the code does, instead of just reading the code, it means that something with the code is not 100% right.

00:36:39.360 --> 00:36:40.360
Okay.

00:36:40.360 --> 00:36:42.360
Because the code should be readable.

00:36:42.360 --> 00:36:49.580
And I encountered those issues when working with very heavy object-oriented code bases.

00:36:49.580 --> 00:36:52.580
Like a lot of inheritance and multi-inheritance.

00:36:52.580 --> 00:36:55.820
And then I went to Django and they used mixing.

00:36:55.820 --> 00:36:57.560
It is hard.

00:36:57.560 --> 00:36:59.580
It is hard to design.

00:36:59.580 --> 00:37:01.580
It is hard to...

00:37:01.580 --> 00:37:04.040
But mostly it is hard to read.

00:37:04.040 --> 00:37:06.460
And this approach, it's interesting.

00:37:06.460 --> 00:37:14.440
As I said, I'm not fully, like, I'm not fully agree that, okay, object-oriented should be gone from the world.

00:37:14.440 --> 00:37:17.580
It's not my stand, but I think...

00:37:17.580 --> 00:37:20.960
Some people have made that stand, but it still is around, isn't it?

00:37:20.960 --> 00:37:26.580
Yeah, but I'm not completely on board with that.

00:37:26.580 --> 00:37:32.380
But I think in some cases, there are approaches that are much more lightweight.

00:37:32.380 --> 00:37:39.540
And the whole thing with data versus code separation, I think it's nice.

00:37:39.960 --> 00:37:41.960
I think it's kind of...

00:37:41.960 --> 00:37:42.960
Nice.

00:37:42.960 --> 00:37:47.460
Yeah, it kind of rewires your brain a bit after you read the chapter or two.

00:37:47.460 --> 00:37:48.960
Like, makes you...

00:37:48.960 --> 00:37:51.120
Yeah, maybe it's one of those things like functional programming.

00:37:51.120 --> 00:37:56.340
You don't necessarily do it all the time, but you read it and it gives you a different perspective, even if you don't totally adopt it.

00:37:56.340 --> 00:37:57.340
Yeah, exactly.

00:37:57.340 --> 00:37:57.340
That's a good thing.

00:37:57.340 --> 00:37:58.340
Yeah.

00:37:58.340 --> 00:37:59.340
Okay.

00:37:59.340 --> 00:37:59.340
All right.

00:37:59.340 --> 00:38:03.720
And a little bit self-promotion here.

00:38:03.720 --> 00:38:10.720
So a few months ago, I released my first open source project, Cornell.

00:38:10.720 --> 00:38:16.720
It was actually covered by Brian, I think, two months ago.

00:38:16.720 --> 00:38:17.720
Yeah.

00:38:17.720 --> 00:38:17.720
Yeah.

00:38:17.720 --> 00:38:31.720
So I just wanted to do a little shout out to all developers out there who are looking to contribute to a little bit nice, with a very nice documentation project.

00:38:31.720 --> 00:38:33.720
It's only the beginning.

00:38:33.720 --> 00:38:41.720
What it does is that it's actually a record and a replay server for mock.

00:38:41.720 --> 00:38:53.720
It's a mock server that we call real data and then can be used as part of the CI and for purposes for end-to-end testing.

00:38:53.720 --> 00:39:09.720
Because if you have some kind of an entry point that starts a cascade of events, including salary or whatever, and just eventually you reach the part when you go out and send an HTTP request.

00:39:09.720 --> 00:39:12.720
So here Cornell comes in handy.

00:39:12.720 --> 00:39:14.720
We use it quite a lot.

00:39:14.720 --> 00:39:24.720
I'm in my previous company and I'm trying to now integrate it in my current workplace and I think it has some potential.

00:39:24.720 --> 00:39:25.720
Very cool.

00:39:25.720 --> 00:39:27.720
And it's not very mature.

00:39:27.720 --> 00:39:38.720
So I would love, like really, if someone wants to contribute even a title or documentation or whatever, we really warmly welcome all contributions.

00:39:38.720 --> 00:39:39.720
So it's great.

00:39:39.720 --> 00:39:40.720
Yeah, that's great.

00:39:40.720 --> 00:39:44.720
Brian asked me on that episode where I thought the name came from.

00:39:44.720 --> 00:39:47.720
And I thought Chris Cornell from Soundgarden and all that.

00:39:47.720 --> 00:39:48.720
Is that correct?

00:39:48.720 --> 00:39:50.720
Blackwell Sun and all those things.

00:39:50.720 --> 00:39:52.720
Well, you see the face.

00:39:52.720 --> 00:39:54.720
What the face reminds you of.

00:39:54.720 --> 00:39:55.720
Yeah, it does.

00:39:55.720 --> 00:39:58.720
I don't think I saw that, paid attention to that before.

00:39:58.720 --> 00:40:01.720
But yeah, now that I see it, I'm more confident in my answer.

00:40:01.720 --> 00:40:03.720
Yeah, you are correct.

00:40:03.720 --> 00:40:04.720
Indeed.

00:40:04.720 --> 00:40:05.720
Right on.

00:40:05.720 --> 00:40:06.720
Right on.

00:40:06.720 --> 00:40:07.720
All right.

00:40:07.720 --> 00:40:09.720
Well, I got a few more extras to share with the world.

00:40:09.720 --> 00:40:10.720
Let's see.

00:40:10.720 --> 00:40:17.720
I just like literally at midnight last night, released a new course, HTML plus Flass, modern web apps, hold the JavaScript.

00:40:17.720 --> 00:40:25.720
So this is a three hour course that like dives into cool ways of putting HTML and Flass together.

00:40:25.720 --> 00:40:29.720
And it also brings together some of the other things we've talked about on the podcast before.

00:40:29.720 --> 00:40:34.720
So when I was creating this course, I didn't really like the way that you would reuse HTML.

00:40:34.720 --> 00:40:36.720
I have a lot of duplication and other crummy stuff.

00:40:36.720 --> 00:40:41.720
So I created the Jinja partials and Chameleon partials projects to make this code better.

00:40:41.720 --> 00:40:46.720
But anyone who uses HTML with Jinja or Chameleon should definitely check those out.

00:40:46.720 --> 00:40:47.720
That's covered in the course.

00:40:47.720 --> 00:40:48.720
There's also just links to it.

00:40:48.720 --> 00:40:53.720
Of course, it does cost money, but you can go and get the GitHub repo and check out the stuff there.

00:40:53.720 --> 00:40:54.720
So that's really cool.

00:40:54.720 --> 00:40:58.720
Build like a really fun little app there and add a bunch of HTML things to it.

00:40:58.720 --> 00:40:59.720
So link in the show notes.

00:40:59.720 --> 00:41:00.720
Check that out.

00:41:00.720 --> 00:41:01.720
Yeah.

00:41:01.720 --> 00:41:04.720
So we've got an update, an update from Dan.

00:41:04.720 --> 00:41:06.720
So, Brian, did you cover this?

00:41:06.720 --> 00:41:07.720
I covered this last time, I think.

00:41:07.720 --> 00:41:08.720
Thanks.

00:41:08.720 --> 00:41:15.720
But the update is, yeah, we were talking about having, so it'll go and do auto optional stuff

00:41:15.720 --> 00:41:22.720
where if you say something is like x:nt equals none as a default value, it goes,

00:41:22.720 --> 00:41:23.720
no, no, no, no, no, that doesn't make sense.

00:41:23.720 --> 00:41:29.720
So it'll create an optional of int automatically and correct the typing.

00:41:29.720 --> 00:41:31.720
But we made the comment, Brian, I think maybe you did.

00:41:31.720 --> 00:41:35.720
I can't remember who, but said, oh, it'd be really cool if we could use the pipe syntax

00:41:35.720 --> 00:41:36.720
that we just talked about earlier.

00:41:36.720 --> 00:41:42.720
So auto optional has been updated to create x:pipeNone instead of optional of x, which is

00:41:42.720 --> 00:41:43.720
really cool.

00:41:43.720 --> 00:41:44.720
Yeah.

00:41:44.720 --> 00:41:45.720
I love it.

00:41:45.720 --> 00:41:48.720
I love how the podcast helps bring some of this feedback to the world.

00:41:48.720 --> 00:41:49.720
Change the world.

00:41:49.720 --> 00:41:50.720
That's right.

00:41:50.720 --> 00:41:53.720
We have made a dent in the universe, Brian, and it is x:pipeNone.

00:41:53.720 --> 00:41:54.720
Okay.

00:41:54.720 --> 00:41:58.720
Coverage, Ned Batchelder just released coverage on Monday.

00:41:58.720 --> 00:42:01.720
So coverage six, which is a major reason.

00:42:01.720 --> 00:42:05.720
Python 2 has been expelled from coverage, which is all good.

00:42:05.720 --> 00:42:10.720
And 30 third-party packages are automatically ignored, which could be a big change for some people.

00:42:10.720 --> 00:42:11.720
All right.

00:42:11.720 --> 00:42:12.720
Bunch of other stuff.

00:42:12.720 --> 00:42:13.720
You can check it out if you care a lot.

00:42:13.720 --> 00:42:19.720
Django328 is out with a couple of bug fixes about read-only fields and admin and some regression

00:42:19.720 --> 00:42:20.720
bug going on.

00:42:20.720 --> 00:42:22.720
So check that out as well.

00:42:22.720 --> 00:42:23.720
Sweet.

00:42:23.720 --> 00:42:24.720
Yep.

00:42:24.720 --> 00:42:26.720
Well, I guess this might be a time for a joke.

00:42:26.720 --> 00:42:27.720
Shall we finish it with a joke?

00:42:27.720 --> 00:42:28.720
Yes.

00:42:28.720 --> 00:42:29.720
As we often do.

00:42:29.720 --> 00:42:30.720
All right.

00:42:30.720 --> 00:42:33.720
Going back to the very reliable geek and poke here.

00:42:33.720 --> 00:42:36.720
We have paired captcha, as in reCaptcha.

00:42:36.720 --> 00:42:38.720
You know, the little pop-up.

00:42:38.720 --> 00:42:39.720
Oh.

00:42:39.720 --> 00:42:40.720
You get the different panels.

00:42:40.720 --> 00:42:46.720
You've got to say, like, click all of the crosswalks or click all of the dogs or whatever.

00:42:46.720 --> 00:42:47.720
All right, Brian.

00:42:47.720 --> 00:42:51.720
Let's do this together like last time.

00:42:51.720 --> 00:42:57.720
I'll do the first one, the woman developer or just computer user trying to get through this.

00:42:57.720 --> 00:43:01.720
So is this a traffic light or just a light?

00:43:01.720 --> 00:43:02.720
No idea.

00:43:02.720 --> 00:43:05.720
I guess it would guess a traffic light.

00:43:05.720 --> 00:43:06.720
Nope.

00:43:06.720 --> 00:43:12.720
Does the gray pixel in the corner also belong to the street sign?

00:43:12.720 --> 00:43:14.720
And on and on it goes.

00:43:14.720 --> 00:43:20.720
It's a sad statement on our digital existence.

00:43:20.720 --> 00:43:22.720
There's been some where I'm stumped.

00:43:22.720 --> 00:43:24.720
I'm like, I don't know.

00:43:24.720 --> 00:43:25.720
I know.

00:43:25.720 --> 00:43:26.720
Next.

00:43:26.720 --> 00:43:27.720
Next question, please.

00:43:27.720 --> 00:43:32.720
Sometimes I just troll three times in a row.

00:43:32.720 --> 00:43:33.720
It's so embarrassing.

00:43:33.720 --> 00:43:35.720
Am I a machine?

00:43:35.720 --> 00:43:40.720
I couldn't find all the mountains.

00:43:40.720 --> 00:43:40.720
Yeah.

00:43:40.720 --> 00:43:43.720
The worst is when you find all the stuff correctly, then it refreshes and go find some mountains.

00:43:43.720 --> 00:43:45.720
And you're like, I just found them all.

00:43:45.720 --> 00:43:47.720
Why are you doing this to me?

00:43:47.720 --> 00:43:50.720
You seem like you like to find traffic lights.

00:43:50.720 --> 00:43:51.720
Here, have some more.

00:43:51.720 --> 00:43:53.720
You looked bored.

00:43:53.720 --> 00:43:55.720
We got some more lights for you.

00:43:55.720 --> 00:43:56.720
Yeah.

00:43:56.720 --> 00:43:57.720
All right.

00:43:57.720 --> 00:43:59.720
Well, that's the joke I brought for y'all.

00:43:59.720 --> 00:44:00.720
Well, thanks.

00:44:00.720 --> 00:44:02.720
And I appreciate you finding them.

00:44:02.720 --> 00:44:03.720
That's cool.

00:44:03.720 --> 00:44:04.720
Cool.

00:44:04.720 --> 00:44:05.720
So thanks a lot, everybody.

00:44:05.720 --> 00:44:07.720
And we'll wrap it up for today.

00:44:07.720 --> 00:44:10.720
And thanks, everybody on the stream for joining us.

00:44:10.720 --> 00:44:11.720
We really appreciate it.

00:44:11.720 --> 00:44:11.720
Yeah.

00:44:11.720 --> 00:44:12.720
Thanks.

00:44:12.720 --> 00:44:14.720
Y'all, thank you especially for being here.

00:44:14.720 --> 00:44:15.720
Yeah.

00:44:15.720 --> 00:44:15.720
It was really fun.

00:44:15.720 --> 00:44:15.720
Thank you.

00:44:15.720 --> 00:44:17.720
Thanks for listening to Python Bytes.

00:44:17.720 --> 00:44:19.720
Thanks for listening to Python Bytes.

00:44:19.720 --> 00:44:22.720
Follow the show on Twitter via @pythonbytes.

00:44:22.720 --> 00:44:25.720
That's Python Bytes as in B-Y-T-E-S.

00:44:25.720 --> 00:44:28.720
Get the full show notes over at pythonbytes.fm.

00:44:28.720 --> 00:44:33.720
If you have a news item we should cover, just visit pythonbytes.fm and click submit in the

00:44:33.720 --> 00:44:34.720
nav bar.

00:44:34.720 --> 00:44:36.720
We're always on the lookout for sharing something cool.

00:44:36.720 --> 00:44:40.720
If you want to join us for the live recording, just visit the website and click live stream

00:44:40.720 --> 00:44:43.720
to get notified of when our next episode goes live.

00:44:43.720 --> 00:44:48.720
That's usually happening at noon Pacific on Wednesdays over at YouTube.

00:44:48.720 --> 00:44:52.720
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:44:52.720 --> 00:44:56.720
Thank you for listening and sharing this podcast with your friends and colleagues.

