
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.460
to you by us over at Talk Python Training, and Brian through his pytest book.


00:00:10.460 --> 00:00:15.560
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.560 --> 00:00:17.600
over at Talk Python Training.


00:00:17.600 --> 00:00:21.560
Visit them via pythonbytes.fm/courses.


00:00:21.560 --> 00:00:25.920
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.920 --> 00:00:29.160
at pythonbytes.fm/pytest.


00:00:29.160 --> 00:00:30.160
Enjoy the episode.


00:00:30.160 --> 00:00:34.940
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:34.940 --> 00:00:36.160
to your earbuds.


00:00:36.160 --> 00:00:40.960
This is episode 253, recorded October 6, 2021.


00:00:40.960 --> 00:00:41.960
I'm Brian Okken.


00:00:41.960 --> 00:00:42.960
I'm Michael Kennedy.


00:00:42.960 --> 00:00:43.960
Yeah, my name is Fiat.


00:00:43.960 --> 00:00:44.960
This is me.


00:00:44.960 --> 00:00:45.960
So welcome.


00:00:45.960 --> 00:00:52.040
Hey, before we jump into some of our topics, could you tell us a little bit about yourself?


00:00:52.040 --> 00:00:53.040
Sure, of course.


00:00:53.040 --> 00:00:56.200
First of all, I'm super excited to be here.


00:00:56.200 --> 00:01:04.200
a little bit nervous because it's my first podcast ever and I'm very happy to be on Python Bytes.


00:01:04.200 --> 00:01:10.280
It's the podcast I've been listening to, I think, for the last five years, about the same time I


00:01:10.280 --> 00:01:18.440
got into Python. So right now I'm, I started like recently a month ago, I started working


00:01:18.440 --> 00:01:24.600
at a new company, cybersecurity company called Python Benito. They're doing some cool stuff


00:01:25.720 --> 00:01:33.720
automated network perimeter security for fortune 500 companies. Very interesting


00:01:33.720 --> 00:01:43.320
approach. What I do there is I'm an infrastructure and intel tools developer and Python, of course.


00:01:43.320 --> 00:01:50.360
And I've been doing Python for the last six years. So as a developer, as a back-end developer,


00:01:50.360 --> 00:01:57.800
an automation developer. I actually started my career as a QA engineer. I didn't have any


00:01:57.800 --> 00:02:03.080
background coding background, so I kind of learned the Python on the job starting from


00:02:03.080 --> 00:02:11.080
little script and snippets and then I got into pytest and automation and at some point I just


00:02:11.080 --> 00:02:18.760
switched to, yeah, full-time developer but still like testing is something very precious for me.


00:02:18.760 --> 00:02:20.160
I'm very invested in it.


00:02:20.160 --> 00:02:22.660
So yeah, kind of important to me too.


00:02:22.660 --> 00:02:23.560
Yeah, I know.


00:02:23.560 --> 00:02:25.660
I know.


00:02:25.660 --> 00:02:28.060
I have a lot of feeling.


00:02:28.060 --> 00:02:28.660
Thank you.


00:02:28.660 --> 00:02:31.860
Well, Michael, let's kick it off with some awesomeness.


00:02:31.860 --> 00:02:34.060
Yeah, I love awesome things.


00:02:34.060 --> 00:02:37.560
So let's kick it off with awesome htmx.


00:02:37.560 --> 00:02:41.860
So we've covered many awesome lists and one of the hottest


00:02:41.860 --> 00:02:46.360
technologies in the Python space these days and at least with


00:02:46.360 --> 00:02:50.120
the web is over at htmx.org,


00:02:50.120 --> 00:02:52.480
a really cool way to basically create apps


00:02:52.480 --> 00:02:54.400
that you would normally create with Vue or React,


00:02:54.400 --> 00:02:57.160
but just do it all in Python and mostly on the server,


00:02:57.160 --> 00:02:57.980
which is really cool.


00:02:57.980 --> 00:03:01.600
So let's see, make sure I get the name right here.


00:03:01.600 --> 00:03:04.760
Rageshagar, probably messed it up, sorry,


00:03:04.760 --> 00:03:07.200
but put together this list, thank you,


00:03:07.200 --> 00:03:09.840
for keeping track of all the things that are awesome


00:03:09.840 --> 00:03:12.000
that have to do with HTMX.


00:03:12.000 --> 00:03:15.480
So you look down here, there's like blog posts,


00:03:15.480 --> 00:03:18.260
tools, videos, examples.


00:03:18.260 --> 00:03:21.140
And what's kind of nice about it is it's not just,


00:03:21.140 --> 00:03:23.860
here's a Python list of using this framework,


00:03:23.860 --> 00:03:26.900
but it's this framework in a lot of different situations


00:03:26.900 --> 00:03:28.480
that might be useful to people.


00:03:28.480 --> 00:03:31.220
So for example, you wanna know how to use it in Django,


00:03:31.220 --> 00:03:34.260
there's an example, or rather a blog post for that.


00:03:34.260 --> 00:03:37.900
There's one for using Tailwind with Flask.


00:03:37.900 --> 00:03:41.500
There's one for doing it with somewhere in here,


00:03:41.500 --> 00:03:44.060
I don't see it yet, but there's a Ruby on Rails one.


00:03:44.060 --> 00:03:46.020
There's plugins for HTMS.


00:03:46.020 --> 00:03:49.020
Like, so if you do craft, which is a CMS,


00:03:49.020 --> 00:03:52.160
there's Django integration, Rails integration,


00:03:52.160 --> 00:03:53.000
all kinds of stuff.


00:03:53.000 --> 00:03:54.660
And there's videos, check out number three here,


00:03:54.660 --> 00:03:58.860
Python Bytes, HTMX, Dynamic and Live HTML without JavaScript.


00:03:58.860 --> 00:04:00.260
That's our YouTube live stream.


00:04:00.260 --> 00:04:02.140
And we had, I think that was Hannah Stepnik,


00:04:02.140 --> 00:04:04.020
who was on with us on that episode.


00:04:04.020 --> 00:04:06.200
And so there's some videos you can check out about it.


00:04:06.200 --> 00:04:08.860
There's also the Talk Python episode


00:04:08.860 --> 00:04:10.580
where I interviewed Carson Gross, the creator.


00:04:10.580 --> 00:04:13.060
So they're including our stuff,


00:04:13.060 --> 00:04:16.160
which is very much appreciated, but then also a bunch of examples for like


00:04:16.160 --> 00:04:19.240
node.js and ASP.net and oh my gosh, Elisp.


00:04:19.240 --> 00:04:22.540
Elisp is in there, but yeah, like plenty of Python ones as well.


00:04:22.540 --> 00:04:23.800
Yeah.


00:04:23.800 --> 00:04:26.080
This is cool. And yeah,


00:04:26.080 --> 00:04:29.880
I actually gave some try using HTML mix


00:04:29.880 --> 00:04:33.580
following one of the podcasts I listened to.


00:04:33.580 --> 00:04:35.580
I don't do a lot of frontend,


00:04:35.580 --> 00:04:39.720
but it was really nice to get rid of some


00:04:39.720 --> 00:04:46.440
ad hoc JavaScript stuff I did, you know, just to work so well, doesn't it?


00:04:46.440 --> 00:04:47.880
Oh yeah.


00:04:47.880 --> 00:04:54.200
And I, I really don't, I really don't enjoy doing JavaScript because I'm not a


00:04:54.200 --> 00:04:59.080
front-end developer, but sometimes I need to provide some kind of a UI interface


00:04:59.080 --> 00:05:01.640
and then it requires Java, JavaScript.


00:05:01.640 --> 00:05:07.240
And then I usually just take some snippets from Stack Overflow and throw it in there.


00:05:08.360 --> 00:05:13.160
And when I tried HTMX, it was so much cleaner.


00:05:13.160 --> 00:05:15.320
I could understand what's going on there.


00:05:15.320 --> 00:05:16.480
Very, very nice.


00:05:16.480 --> 00:05:20.800
I think I need a sticker for my laptop that says I really don't enjoy using JavaScript.


00:05:20.800 --> 00:05:34.800
So one thing I would like to throw out there that people, when I, I'm doing a talk in San Francisco and people, heard the title, which is something like, you know, interactive Python, web apps, hold the JavaScript, something like that.


00:05:34.800 --> 00:05:38.000
And they're like, Oh, why are you always hitting on JavaScript?


00:05:38.320 --> 00:05:41.760
I don't think that this is so much about hating on JavaScript.


00:05:41.760 --> 00:05:44.640
If you want to do JavaScript, knock yourself out.


00:05:44.640 --> 00:05:50.240
You can write, you can, like a lot of these examples are Node.js and Express using HTMX.


00:05:50.240 --> 00:05:54.480
But the three of us on this call, we're not like, I can't wait to run out and write


00:05:54.480 --> 00:05:57.680
stuff that runs on Node. We'd much rather go write stuff that runs on Python.


00:05:57.680 --> 00:06:03.760
So what this lets us do is still use like Python code on the server,


00:06:03.760 --> 00:06:07.280
but then it just behaves as if it was running on the front end.


00:06:07.280 --> 00:06:09.420
It's super smooth, just like y'all said.


00:06:09.420 --> 00:06:11.780
Like it really cleans things up and makes it simple.


00:06:11.780 --> 00:06:12.620
- Yeah.


00:06:12.620 --> 00:06:13.440
- So here's a bunch of awesome stuff.


00:06:13.440 --> 00:06:14.280
- It's not just JavaScript,


00:06:14.280 --> 00:06:15.100
there's a bunch of other languages


00:06:15.100 --> 00:06:16.400
I don't wanna work in either.


00:06:16.400 --> 00:06:17.360
(laughing)


00:06:17.360 --> 00:06:18.200
- Exactly.


00:06:18.200 --> 00:06:20.720
(laughing)


00:06:20.720 --> 00:06:21.560
Awesome.


00:06:21.560 --> 00:06:22.560
Well, there's not a whole lot more to add to this,


00:06:22.560 --> 00:06:25.360
but it's nice when these emerging technologies


00:06:25.360 --> 00:06:27.360
are coming along to get some help


00:06:27.360 --> 00:06:29.600
and examples and other resources.


00:06:29.600 --> 00:06:33.480
So thanks, Raj, for putting together this awesome list.


00:06:33.480 --> 00:06:34.320
- Yeah.


00:06:34.320 --> 00:06:36.320
Well, I can't believe I got this topic.


00:06:36.320 --> 00:06:40.480
You guys, yeah, anyway, Python 3.10, so excited.


00:06:40.480 --> 00:06:42.280
It came out two days ago.


00:06:42.280 --> 00:06:44.140
I'm loving it.


00:06:44.140 --> 00:06:45.760
I've switched.


00:06:45.760 --> 00:06:46.800
I'm using it at work.


00:06:46.800 --> 00:06:48.080
I'm using it at home.


00:06:48.080 --> 00:06:49.780
And it's not like it's new.


00:06:49.780 --> 00:06:52.440
I mean, one of the things, there was an article,


00:06:52.440 --> 00:06:54.400
okay, I'll just go through a few topics.


00:06:54.400 --> 00:06:55.840
One, the logo's awesome.


00:06:55.840 --> 00:06:59.120
3.10, the 3.10 launch logo, super cool.


00:06:59.120 --> 00:07:00.840
I want a sticker like that.


00:07:00.840 --> 00:07:02.740
There's a couple of videos that I think are good


00:07:02.740 --> 00:07:04.520
to at least know about.


00:07:04.520 --> 00:07:09.520
There's the launch party that started off


00:07:09.520 --> 00:07:11.400
with some awesome hats.


00:07:11.400 --> 00:07:13.400
They basically actually walked through


00:07:13.400 --> 00:07:18.400
the entire launch process of making 310 live on camera.


00:07:18.400 --> 00:07:21.080
It's three hours long though.


00:07:21.080 --> 00:07:24.000
I only watched a little bit, but great hats.


00:07:24.000 --> 00:07:24.880
- This is cool.


00:07:24.880 --> 00:07:27.960
Yeah, so this is by the people who are actually releasing.


00:07:27.960 --> 00:07:30.180
It's not a party celebrating the launch.


00:07:30.180 --> 00:07:32.360
It's the actual launch.


00:07:32.360 --> 00:07:33.200
- The actual launch.


00:07:33.200 --> 00:07:34.520
>> Right, that's awesome.


00:07:34.520 --> 00:07:37.380
>> But Jeff Brains hosted,


00:07:37.380 --> 00:07:39.000
I think that was a pre-recorded thing,


00:07:39.000 --> 00:07:43.200
but there was a What's New in Python 3.10 video.


00:07:43.200 --> 00:07:49.720
This is more consumable at 33 minutes.


00:07:49.720 --> 00:07:53.320
I watched this while it was live or while it


00:07:53.320 --> 00:07:56.760
was being broadcast at first just a couple of days ago.


00:07:56.760 --> 00:07:58.160
It's really interesting.


00:07:58.160 --> 00:07:59.520
This one's really great.


00:07:59.520 --> 00:08:02.240
I thought I knew everything that was coming in 3.10.


00:08:02.240 --> 00:08:09.120
The thing that I really love about this video is there's Lucas Lange and I can't remember somebody else


00:08:09.120 --> 00:08:12.080
talked about, do you know the other person was?


00:08:12.080 --> 00:08:15.280
Sebastian Ramirez and Brant Boucher.


00:08:15.280 --> 00:08:25.040
Okay, and Lucas talked about some of the details on, well a couple of them were talking about the


00:08:25.040 --> 00:08:30.560
I'm getting this wrong, what's the thing? The structural pattern matching, that's it.


00:08:30.560 --> 00:08:32.940
Yes, super switch.


00:08:32.940 --> 00:08:35.820
>> Yeah. Is structural pattern matching?


00:08:35.820 --> 00:08:37.220
It's really cool.


00:08:37.220 --> 00:08:39.580
I haven't come up with a reason to use it yet,


00:08:39.580 --> 00:08:41.520
but give me time.


00:08:41.520 --> 00:08:47.200
But there was a big discussion on this, which was neat.


00:08:47.200 --> 00:08:49.140
It was a tutorial right there.


00:08:49.140 --> 00:08:54.400
Then also a discussion of why black doesn't work for it yet.


00:08:54.400 --> 00:08:58.040
That was the odd takeaway that I wasn't expecting is,


00:08:58.040 --> 00:09:00.160
if you're really addicted to black,


00:09:00.160 --> 00:09:03.520
You can't use structural pattern matching and black together right now


00:09:03.520 --> 00:09:10.640
um, they will catch up but they're they have two different parsers for python and getting them all cut up will be


00:09:10.640 --> 00:09:14.000
Uh, it'll take a little time. So be patient nice


00:09:14.000 --> 00:09:20.400
Yeah, that yeah, that's huge but I guess if you want to use


00:09:20.400 --> 00:09:22.000
the


00:09:22.000 --> 00:09:28.560
If you still want to use black you just need to just do formatting off on the block when you use


00:09:29.360 --> 00:09:32.880
- Yeah, actually I have to put it in a different file


00:09:32.880 --> 00:09:35.900
'cause you can't, the format off doesn't work


00:09:35.900 --> 00:09:38.920
in the file with it.


00:09:38.920 --> 00:09:40.680
I tried that and--


00:09:40.680 --> 00:09:42.160
- And it didn't work, interesting.


00:09:42.160 --> 00:09:43.000
- Didn't work.


00:09:43.000 --> 00:09:45.240
- Oh, that's a bummer, okay.


00:09:45.240 --> 00:09:49.760
- But all the other features of 310 seem to work fine.


00:09:49.760 --> 00:09:50.640
So it's good.


00:09:50.640 --> 00:09:51.720
- Yeah, very nice.


00:09:51.720 --> 00:09:53.800
Some of the things that jump out that are exciting for me


00:09:53.800 --> 00:09:58.800
is X pipe Y versus, rather than X union Y,


00:09:58.800 --> 00:10:06.440
you know, union of X comma Y or optional of X versus X comma or X pipe none.


00:10:06.440 --> 00:10:07.320
Those, those are nice.


00:10:07.320 --> 00:10:10.520
The additional type information and better error messages.


00:10:10.520 --> 00:10:12.880
Those are the things that I'm looking forward to, except for I'm not


00:10:12.880 --> 00:10:13.960
really looking forward to errors.


00:10:13.960 --> 00:10:18.000
I generally don't like that, but once you're there, I prefer better error messages.


00:10:18.000 --> 00:10:21.480
I think everybody teaching Python is going to love the error messages.


00:10:21.480 --> 00:10:24.720
Oh, the error messages are pretty awesome.


00:10:24.720 --> 00:10:30.660
just a few days ago, I was refactoring some code and I had some, well, a bit


00:10:30.660 --> 00:10:35.720
complex expression that was like nested deep and I needed to do some asserting.


00:10:35.720 --> 00:10:39.680
And so another parenthesis, and I guess I missed something.


00:10:39.680 --> 00:10:44.960
And then I would have, I had this error, like expression is expected and


00:10:44.960 --> 00:10:47.780
we're like, what expression it's all right there.


00:10:47.780 --> 00:10:52.180
And I wasted literally like about three minutes figuring out what


00:10:52.180 --> 00:10:56.740
expression it's missing and eventually they end up like I missed some curly


00:10:56.740 --> 00:11:02.540
brackets and I really expect, I mean, yeah, pattern matching is great.


00:11:02.540 --> 00:11:05.820
The pie painting is awesome.


00:11:05.820 --> 00:11:10.820
And, but those specific like little things are, I don't know, I think


00:11:10.820 --> 00:11:13.660
like really bumps your dev experience.


00:11:13.660 --> 00:11:14.440
So yeah.


00:11:14.440 --> 00:11:16.100
Yeah, it definitely does.


00:11:16.100 --> 00:11:20.820
Speaking of better error messages and stuff, I'm planning to just integrating


00:11:20.820 --> 00:11:24.360
of rich, like the trace back stuff and all those kinds of things just into all


00:11:24.360 --> 00:11:26.020
my apps, cause it's just better.


00:11:26.020 --> 00:11:27.660
And it's one line of code at the top.


00:11:27.660 --> 00:11:28.380
So very nice.


00:11:28.380 --> 00:11:29.620
Yeah, that's cool.


00:11:29.620 --> 00:11:30.140
Yeah.


00:11:30.140 --> 00:11:30.500
All right.


00:11:30.500 --> 00:11:31.340
Good one, Brian.


00:11:31.340 --> 00:11:31.820
All right.


00:11:31.820 --> 00:11:33.900
Y'all you're up with the next one.


00:11:33.900 --> 00:11:34.740
Yeah.


00:11:34.740 --> 00:11:40.300
So it's a tool I've stumbled upon a while ago.


00:11:40.300 --> 00:11:48.460
Um, when I was looking for some kind of a solution for, bundling all my,


00:11:48.460 --> 00:11:52.660
and all our analysis tools under one umbrella.


00:11:52.660 --> 00:11:58.260
So we have large code bases and we use microservices,


00:11:58.260 --> 00:12:00.660
so we have a lot of repositories,


00:12:00.660 --> 00:12:04.060
and of course we would like to use some linking.


00:12:04.060 --> 00:12:06.660
And then we added PythonStyle.


00:12:06.660 --> 00:12:09.260
And then we added another package,


00:12:09.260 --> 00:12:12.460
because we found it pretty useful, called Vulture,


00:12:12.460 --> 00:12:20.780
that finds that some unused code and points it out that maybe it should be removed or refactored,


00:12:20.780 --> 00:12:28.940
which is quite cool. That is a fantastic name for that Lint feature. It goes in Fison's dead code.


00:12:28.940 --> 00:12:36.060
Oh my gosh. Yeah, it's pretty cool. Sorry, I just, I love the name. Yeah, that's one of the latest


00:12:36.060 --> 00:12:43.180
edition. And then, because we deal with some security and vulnerabilities, we decided also


00:12:43.180 --> 00:12:50.540
to add bandwidth to the whole party. Those are really awesome tools, but we started to get a bit


00:12:50.540 --> 00:12:57.500
frustrated. First of all, each and every tool requires its own configuration file, like profiling,


00:12:57.500 --> 00:13:03.900
like every linker has its own rules by that style. You want to ignore some stuff, which kind of


00:13:03.900 --> 00:13:09.840
Requires customization. So we ended up having like four different customization


00:13:09.840 --> 00:13:15.820
Profile files for each tool and that's okay. I mean once you've done it, it's okay


00:13:15.820 --> 00:13:20.080
But then people start to get really frustrated with their fci


00:13:20.080 --> 00:13:25.740
Because it became a big flow because of the all the tools run sequentially. So


00:13:25.740 --> 00:13:32.460
And even more so they become a bit frustrated with all the types all the different outputs


00:13:32.540 --> 00:13:38.620
So let's say you have issues in filings and then you have problems with Pycode style and at first


00:13:38.620 --> 00:13:40.860
We didn't


00:13:40.860 --> 00:13:47.340
We just started failing once you once you have a failure in filing you don't proceed so you fix filings and then


00:13:47.340 --> 00:13:53.520
Okay, yay, but then you have errors in Python style and so on and so on so it was really frustrating


00:13:53.520 --> 00:14:02.380
Um, so we said, okay just okay it fails, but let's continue and then just speed all the errors once once it's done


00:14:02.380 --> 00:14:08.380
But still people had some issues and started reading the output


00:14:08.380 --> 00:14:12.380
because it's a different format and they're like, "Okay, what does it want from me?


00:14:12.380 --> 00:14:19.380
What do I do?" And the whole experience is, "Okay, I finish working on my PR.


00:14:19.380 --> 00:14:24.380
I just want to post it and get a review on it, but then I get stuck in this limbo


00:14:24.380 --> 00:14:26.380
fixing all this kind of stuff."


00:14:26.380 --> 00:14:33.220
So we started thinking what can improve the user and the dev experience.


00:14:33.220 --> 00:14:37.060
So people will get frustrated with CI because people want people to protect


00:14:37.060 --> 00:14:42.740
the CI, they start disabling features and that's something that we didn't want.


00:14:42.740 --> 00:14:46.460
Then your CI starts to lose all its value and everything, right?


00:14:46.460 --> 00:14:47.220
Exactly.


00:14:47.220 --> 00:14:48.060
Exactly.


00:14:48.060 --> 00:14:55.580
So I kind of stumbled on a prospector and I say stumble because it was always there.


00:14:56.020 --> 00:15:02.660
It's actually brought by PySQL, the same guide, the same organization that are


00:15:02.660 --> 00:15:05.340
responsible for PyLink and for PyProp style.


00:15:05.340 --> 00:15:10.740
But somehow I missed the whole bundle thing that's called Perfector.


00:15:10.740 --> 00:15:12.980
I guess it's a bit less popular.


00:15:12.980 --> 00:15:14.540
So we started using it.


00:15:14.540 --> 00:15:23.340
It bundled all our analysis tools together in one run and in one unified output.


00:15:23.340 --> 00:15:30.340
So it's much easier when you have the output just to read it and understand what's going on.


00:15:30.340 --> 00:15:39.340
And more than that, some bonuses, we discovered some more tools that it provides that we weren't even familiar with,


00:15:39.340 --> 00:15:47.340
such as the McCabe Complexity Analysis, which points out some kind of a,


00:15:47.340 --> 00:15:52.480
of a cop, like in case you have a very big, function with


00:15:52.480 --> 00:15:54.400
nested conditions of stuff.


00:15:54.400 --> 00:15:54.940
Nice.


00:15:54.940 --> 00:15:57.620
Is that like cyclomatic complexity and stuff like that?


00:15:57.620 --> 00:15:58.740
Exactly.


00:15:58.740 --> 00:15:59.100
Yes.


00:15:59.100 --> 00:16:06.540
So there's actually a link there inside that takes you to Wikipedia and explains


00:16:06.540 --> 00:16:11.020
how all things, all those things are calculated, but it's pretty, pretty nice.


00:16:11.020 --> 00:16:16.780
Uh, some, you cannot always follow its rule because sometimes, well, you have a


00:16:16.780 --> 00:16:21.340
complex function. It's a legacy code and you don't necessarily want to mess with it.


00:16:21.340 --> 00:16:27.260
But it's nice to have this information or you can put it in a backlog. So that's something we


00:16:27.260 --> 00:16:33.580
discovered. There's also Pyroma if you're developing packages. So if you have some


00:16:33.580 --> 00:16:42.700
missing, let's say, contributor RFC, so it will point out all the stuff there. You have the dodgy


00:16:43.580 --> 00:16:53.820
package that points out if you have some sensitive data, such as passwords or AWS keys or some


00:16:53.820 --> 00:17:00.140
things you not necessarily want to include in your code base. So a lot of the goodies that


00:17:00.140 --> 00:17:07.820
come with this perspective is that it actually bundles a lot of analysis tools, which is cool.


00:17:07.820 --> 00:17:15.420
But as I said for us it really improved our experience because it's one output and one profile


00:17:15.420 --> 00:17:18.220
configuration which means instead of having like


00:17:18.220 --> 00:17:24.560
A configuration file for each of the tools you have only one tool demo


00:17:24.560 --> 00:17:29.760
And more than that you have profile which means like let's say you have


00:17:29.760 --> 00:17:33.200
At some point you would like to run my type


00:17:33.440 --> 00:17:40.020
Okay, but in some point you don't want like if you are merging to master maybe you want to check for vulnerabilities


00:17:40.020 --> 00:17:47.940
At that point but not on every commit because you're still developing so super useful and surprisingly


00:17:47.940 --> 00:17:52.960
It runs faster than each tool on its own. I mean


00:17:52.960 --> 00:17:56.800
It takes it takes some time. It takes some time


00:17:56.800 --> 00:18:02.500
I mean, it's not a super fast because that first of all it installs all the required


00:18:03.120 --> 00:18:07.860
tools, but that's been one bundle and the execution is still the


00:18:07.860 --> 00:18:09.720
frame execution for all the tools.


00:18:09.720 --> 00:18:12.540
But yeah, it's really simplified thing.


00:18:12.540 --> 00:18:14.720
So highly recommended.


00:18:14.720 --> 00:18:15.240
Cool.


00:18:15.240 --> 00:18:16.100
Good recommendation.


00:18:16.100 --> 00:18:20.120
Uh, out in the live stream, Paul Anzal has a question.


00:18:20.120 --> 00:18:21.340
Not sure if you know the answer.


00:18:21.340 --> 00:18:24.760
Is there a way to add a comment to your code for her example, hash, no


00:18:24.760 --> 00:18:27.820
prospector to tell it that a given line is actually not a problem.


00:18:27.820 --> 00:18:31.500
Similar to how bandit would disable warnings with hash no sec.


00:18:31.820 --> 00:18:35.000
Um, so prospector is just a bundle.


00:18:35.000 --> 00:18:39.580
It's, like behind the scene, it just ends up the, the same tool.


00:18:39.580 --> 00:18:44.540
So you use the same, the shable piling or disabled


00:18:44.540 --> 00:18:46.320
package file or no QA.


00:18:46.320 --> 00:18:50.760
So the, the rules there apply to each tool differently.


00:18:50.760 --> 00:18:51.380
Got it.


00:18:51.380 --> 00:18:51.960
Makes sense.


00:18:51.960 --> 00:18:54.080
All right.


00:18:54.080 --> 00:18:54.860
Am I up next, Brian?


00:18:54.860 --> 00:18:57.620
Uh, yeah, I think so.


00:18:57.620 --> 00:19:00.740
Uh, so another topic on rich.


00:19:00.940 --> 00:19:03.300
I feel like we're always talking about rich now.


00:19:03.300 --> 00:19:04.140
Super fun.


00:19:04.140 --> 00:19:06.580
I actually just had Will McGugan,


00:19:06.580 --> 00:19:07.740
who I see out in the audience.


00:19:07.740 --> 00:19:10.020
Hey, Will, on Talk Python.


00:19:10.020 --> 00:19:10.860
So that was really fun.


00:19:10.860 --> 00:19:14.780
So here's a thing from Avi Pearl, not Avi Python,


00:19:14.780 --> 00:19:16.660
but you know, we'll still accept it.


00:19:16.660 --> 00:19:18.420
Just kidding, that's just the last name.


00:19:18.420 --> 00:19:19.860
Thank you, Avi, for sending this over


00:19:19.860 --> 00:19:21.900
and let us know about it.


00:19:21.900 --> 00:19:26.900
So, Junyun Tran created this cool terminal-based visualizer


00:19:26.900 --> 00:19:30.020
for Pandas DataFrames.


00:19:30.020 --> 00:19:32.420
So she's into data science and stuff like that.


00:19:32.420 --> 00:19:35.820
And like many things that have to do with rich in UI,


00:19:35.820 --> 00:19:41.720
just having a screen animation is really all you need to know whether or not this is useful for you.


00:19:41.720 --> 00:19:45.020
And so you can just go to the website that we'll link to,


00:19:45.020 --> 00:19:48.420
the GitHub repo, and it's got an animated GIF right on the front there.


00:19:48.420 --> 00:19:49.420
Super nice.


00:19:49.420 --> 00:19:53.720
So just imagine you are in a Jupyter notebook and you went to a data frame,


00:19:53.720 --> 00:19:57.520
you said df.head or tail, something like that, and you get a little table that comes out.


00:19:57.520 --> 00:20:02.780
Well, here's one with animation and color and all that stuff as a rich table,


00:20:02.780 --> 00:20:08.120
you know, the rich library, generating the table of the data frame right there.


00:20:08.120 --> 00:20:13.620
So if you're creating something in the terminal and you want a nice output for a data frame,


00:20:13.620 --> 00:20:14.720
it's pretty simple.


00:20:14.720 --> 00:20:16.620
The code that you got to write is super easy.


00:20:16.620 --> 00:20:20.820
So for example, you come up with a data frame somehow,


00:20:20.820 --> 00:20:25.680
and then you just say from rich data frame and import pretty fine,


00:20:25.680 --> 00:20:28.960
and then just prettyfy your data frame and that's it.


00:20:28.960 --> 00:20:29.560
Done.


00:20:29.560 --> 00:20:30.400
>> Like it.


00:20:30.400 --> 00:20:33.360
>> Yeah, it's cool, right? You can also apply it to


00:20:33.360 --> 00:20:35.760
just regular dictionaries and stuff like that.


00:20:35.760 --> 00:20:39.600
You can control things like limit the number of rows that come back,


00:20:39.600 --> 00:20:42.960
how many columns will be shown in case there's a time.


00:20:42.960 --> 00:20:44.360
You don't want to fill the screen.


00:20:44.360 --> 00:20:46.520
Of course, you can transform your data frame,


00:20:46.520 --> 00:20:47.640
but if you just want a quick like,


00:20:47.640 --> 00:20:49.360
"Hey, just show me the first few columns."


00:20:49.360 --> 00:20:53.960
It'll do that. You can either view the head or the tail effectively.


00:20:53.960 --> 00:20:56.420
If you're going to say, give me 20 columns, there's 2000.


00:20:56.420 --> 00:20:59.420
Well, I think that by default it shows the first, the head,


00:20:59.420 --> 00:21:01.420
but you can also show it in reverse.


00:21:01.420 --> 00:21:04.700
And clear the console so it just fills the screen, things like that.


00:21:04.700 --> 00:21:06.860
So even control the animation.


00:21:06.860 --> 00:21:10.400
So not a lot to do with this, but if it's useful to you, I think,


00:21:10.400 --> 00:21:13.360
I mean, like not a lot of gears and ways to use it,


00:21:13.360 --> 00:21:16.700
but I think if it's useful to you, you'll really find it interesting.


00:21:16.700 --> 00:21:19.620
Yeah, all those pretty colors, I like it.


00:21:19.620 --> 00:21:21.620
Yeah, yeah, yeah, I love the colors.


00:21:21.620 --> 00:21:23.740
>> So super cool.


00:21:23.740 --> 00:21:26.020
>> So Rich has a ton of stuff in it,


00:21:26.020 --> 00:21:29.700
but I use the tables all over the place


00:21:29.700 --> 00:21:33.060
because it's just the easiest and prettiest way to display


00:21:33.060 --> 00:21:36.340
a table right now in a CLI application.


00:21:36.340 --> 00:21:37.060
>> Awesome.


00:21:37.060 --> 00:21:38.140
>> I love it.


00:21:38.140 --> 00:21:40.820
>> Love it. Raw Intel out in the live stream says,


00:21:40.820 --> 00:21:42.500
"Well, Rich for the win once again,


00:21:42.500 --> 00:21:44.140
looks great for SSH session."


00:21:44.140 --> 00:21:46.180
Yes, it does, and I hadn't really even thought about it for


00:21:46.180 --> 00:21:48.420
that scenario, but yeah, it definitely does.


00:21:48.420 --> 00:21:49.260
- Yeah, definitely.


00:21:49.260 --> 00:21:53.420
- And Jared says to us, Brian and me,


00:21:53.420 --> 00:21:55.540
"I can't thank you enough for all your podcasts


00:21:55.540 --> 00:21:56.820
"as great as they are.


00:21:56.820 --> 00:21:57.980
"The video format is even better."


00:21:57.980 --> 00:21:59.140
Yeah, Jared, thanks for being here.


00:21:59.140 --> 00:22:01.060
We always love having people on the show.


00:22:01.060 --> 00:22:03.540
It gives us a little bit more interactive aspects


00:22:03.540 --> 00:22:05.980
for all the people listening afterwards.


00:22:05.980 --> 00:22:06.820
- Yeah.


00:22:06.820 --> 00:22:08.300
- With that, Brian, go for it.


00:22:08.300 --> 00:22:13.300
- So yeah, I'm gonna go back to 310 for now.


00:22:13.300 --> 00:22:16.940
So I'm like, one of the things I'm excited about


00:22:16.940 --> 00:22:24.500
the union types like you said for one of the things that was released is union types so


00:22:24.500 --> 00:22:29.060
that you can do X or Y. The thing that I really like about this, one of the things is the


00:22:29.060 --> 00:22:33.340
optional so you can instead of if you've got, I don't have an example here, but if you've


00:22:33.340 --> 00:22:41.420
got a function that takes an integer but it might default to none, you can now say that


00:22:41.420 --> 00:22:44.520
the type is int or none,


00:22:44.520 --> 00:22:47.300
and then assign it the default value of none.


00:22:47.300 --> 00:22:50.480
It'd be int or none equal none.


00:22:50.480 --> 00:22:54.480
It's really clean. One of the nice things about that is you


00:22:54.480 --> 00:22:57.100
don't have to import optional from typing.


00:22:57.100 --> 00:23:00.680
That's really clean. But I was bummed


00:23:00.680 --> 00:23:03.140
because actually a lot of the projects I work on,


00:23:03.140 --> 00:23:05.920
I have to support more than just 3.10.


00:23:05.920 --> 00:23:07.920
I've got to support 3.7, 3.8.


00:23:07.920 --> 00:23:09.720
>> What? You haven't already moved to 3.10?


00:23:09.720 --> 00:23:11.120
You guys are such laggards.


00:23:11.120 --> 00:23:14.080
The stuff that like it's my application,


00:23:14.080 --> 00:23:15.420
but for two days,


00:23:15.420 --> 00:23:17.960
if you're supporting Python packages,


00:23:17.960 --> 00:23:20.840
you want to support more than just one version of Python,


00:23:20.840 --> 00:23:21.920
right? A little bit.


00:23:21.920 --> 00:23:23.400
I mean, you don't have to.


00:23:23.400 --> 00:23:25.920
No, of course, if you want to.


00:23:25.920 --> 00:23:30.480
And so then I was excited to see that Adam Johnson put out,


00:23:30.480 --> 00:23:34.680
and I was actually I want to shout out who told me about this.


00:23:34.680 --> 00:23:36.280
I lost it.


00:23:36.280 --> 00:23:37.840
Somebody else told me about this.


00:23:37.840 --> 00:23:42.240
So sorry, but Adam Johnson wrote an article about type hints,


00:23:42.240 --> 00:23:44.680
how to upgrade syntax with PyUpgrade.


00:23:44.680 --> 00:23:51.280
So Anthony Sotile wrote a PyUpgrade tool.


00:23:51.280 --> 00:23:52.960
What it'll do is,


00:23:52.960 --> 00:23:54.120
it does a lot of stuff,


00:23:54.120 --> 00:23:55.840
but one of the things it does is it changes


00:23:55.840 --> 00:24:00.720
this union operator for types.


00:24:00.720 --> 00:24:06.500
It includes the from future import annotations


00:24:06.500 --> 00:24:12.260
that will allow you to use this union types and none


00:24:12.260 --> 00:24:15.420
in everything back to Python 3.7.


00:24:15.420 --> 00:24:16.020
>> Very nice.


00:24:16.020 --> 00:24:18.020
>> Supposedly. I haven't tried it on 3.7,


00:24:18.020 --> 00:24:20.180
but that's the claim.


00:24:20.180 --> 00:24:24.900
There's a nice article on how to upgrade your syntax.


00:24:24.900 --> 00:24:27.860
>> This is a tool, like an automatic tool you just run?


00:24:27.860 --> 00:24:30.340
>> Yeah, it's a PyUpgrade.


00:24:30.340 --> 00:24:34.300
>> Very nice. Frederick out in the live stream says,


00:24:34.300 --> 00:24:37.740
The union pipe really makes everything a lot less noisy and more readable.


00:24:37.740 --> 00:24:38.100
Love it.


00:24:38.100 --> 00:24:38.620
Yeah.


00:24:38.620 --> 00:24:38.820
Yeah.


00:24:38.820 --> 00:24:39.660
What are you going to offer?


00:24:39.660 --> 00:24:40.740
What are you going to suggest?


00:24:40.740 --> 00:24:44.220
Um, like, Oh, the next topic, you mean?


00:24:44.220 --> 00:24:46.020
Oh yeah, sure.


00:24:46.020 --> 00:24:49.300
Um, I actually wanted to comment on that.


00:24:49.300 --> 00:24:50.620
I thought you were going to have a comment on that.


00:24:50.620 --> 00:24:54.660
I actually have a little comment because I really liked the,


00:24:54.660 --> 00:25:00.940
by upgrades stuff because it kind of feel that lately we have, I enjoyed


00:25:01.380 --> 00:25:06.740
type annotations, but like with each version, let me have like a little bit


00:25:06.740 --> 00:25:10.720
of change and then you have to comply to the previous one.


00:25:10.720 --> 00:25:17.120
And then like what I would love to see is like some kind of a convention on how


00:25:17.120 --> 00:25:23.400
to do type hinting correctly, because there are so many versions and well,


00:25:23.400 --> 00:25:28.760
because I'm a bit lazy, I don't always use type annotations, but I know I should.


00:25:29.160 --> 00:25:35.580
And then I use some kind of, I use the tools like the monkey pipe and sometimes


00:25:35.580 --> 00:25:41.460
the pie on the fake, so they just add the type on the station during run time.


00:25:41.460 --> 00:25:48.920
Um, and then I, then it's a kind of a, I, I, then I kind of have some kind of a


00:25:48.920 --> 00:25:55.080
convention there because I feel like with hyper-location you can do it in so many


00:25:55.080 --> 00:25:57.760
ways, so maybe the string formatting.


00:25:58.440 --> 00:26:04.280
Exactly, but eventually we all I think we can all agree that f strings is the way to go, right?


00:26:04.280 --> 00:26:10.920
But right now we're kind of in a wild wild west with five of the stations because we have those


00:26:10.920 --> 00:26:14.760
3.5 at 3


00:26:14.760 --> 00:26:19.960
And but they'll but they're evolving like each new


00:26:19.960 --> 00:26:24.440
item version and have something new and then the old becomes


00:26:24.980 --> 00:26:30.520
obsolete or a fraud upon and then you know, you shouldn't do it like that, but what I would like to see


00:26:30.520 --> 00:26:37.420
Maybe a tool such as that I operate that will tell me okay. This is the convention. This is how we do


00:26:37.420 --> 00:26:43.700
You shouldn't be doing your type on a type hinting from now on. It's a good idea. We saw you're doing the old way


00:26:43.700 --> 00:26:47.300
Here's the new way to that. Yeah. Yeah, I'm a bit confused


00:26:47.300 --> 00:26:50.500
And I'm lazy and I'm confused


00:26:51.180 --> 00:26:56.640
Not entirely. It's not a built-in feature. Still like you're using type annotation


00:26:56.640 --> 00:27:01.740
I see a lot of Python is so just wait going for them and for me like, okay


00:27:01.740 --> 00:27:07.900
I'll write my code and then okay, I'll start using some type painting. Yeah, sounds good


00:27:07.900 --> 00:27:08.480
Yeah


00:27:08.480 --> 00:27:12.400
I think pay upgrade is the trick so it does do a lot of these like the


00:27:12.400 --> 00:27:18.720
Going from uppercase list to lowercase list and switching away from optional and things like that


00:27:18.720 --> 00:27:21.000
So I may be running this later today.


00:27:21.000 --> 00:27:21.760
Does it look good?


00:27:21.760 --> 00:27:26.360
Some kind of a type on the type hinting that formatter,


00:27:26.360 --> 00:27:28.720
that's naked like it should be.


00:27:28.720 --> 00:27:31.480
That's what I would like to see.


00:27:31.480 --> 00:27:32.800
Yeah, exactly.


00:27:32.800 --> 00:27:34.680
Brian, you know what time it is?


00:27:34.680 --> 00:27:37.560
Extra time, extra time.


00:27:37.560 --> 00:27:40.160
You got anything you want to put up there throughout the people?


00:27:40.160 --> 00:27:44.440
Um, yeah, actually I don't have any links for it, but, I should have had links


00:27:44.440 --> 00:28:05.440
But I was, this is hard for me to believe actually, but in like 2017, a long time ago, 2017, 2018, I submitted a defect to pytest, the pytest project, and then I also wrote up a test to describe the defect, but I didn't know how to fix it.


00:28:05.440 --> 00:28:09.440
So that was my first contribution to pytest is adding test code.


00:28:09.440 --> 00:28:15.940
But this last week I added two, had two pull requests


00:28:15.940 --> 00:28:18.940
and they both got accepted and merged.


00:28:18.940 --> 00:28:21.940
So the next version of pytest will actually have my code in it.


00:28:21.940 --> 00:28:23.940
So it's kind of fun.


00:28:23.940 --> 00:28:27.440
Super cool. Hey, I just realized we skipped Yael's final thing.


00:28:27.440 --> 00:28:28.440
Oh, right.


00:28:28.440 --> 00:28:31.940
Sorry, tell us about that before we get to the rest of the extras.


00:28:31.940 --> 00:28:33.940
That's fine.


00:28:33.940 --> 00:28:39.140
I feel like you've got these, these, these cool ways to like bring together


00:28:39.140 --> 00:28:42.520
multiple tools instead of telling people about bandit, you're like, here's how to


00:28:42.520 --> 00:28:45.840
use bandit, all these things are instead of black, here's how to like do all these


00:28:45.840 --> 00:28:46.560
different things.


00:28:46.560 --> 00:28:47.160
Yeah.


00:28:47.160 --> 00:28:47.560
Yeah.


00:28:47.560 --> 00:28:52.640
I kind of like combining things and then make it more general.


00:28:52.640 --> 00:28:57.180
I mean, the Python ecosystem is so rich.


00:28:57.180 --> 00:28:58.520
There are so many things.


00:28:58.520 --> 00:28:59.520
Um, yeah.


00:28:59.820 --> 00:29:04.600
So it's nice to bring some stuff together, bundled and easy to use.


00:29:04.600 --> 00:29:09.480
Uh, so darker is something also I stumbled.


00:29:09.480 --> 00:29:16.600
Well, I was recommended by a friend after I, after describing, a problem or


00:29:16.600 --> 00:29:19.860
my resentment even to black formatter.


00:29:19.860 --> 00:29:23.760
I know it's not a popular, popularity.


00:29:23.760 --> 00:29:28.480
Um, maybe I shouldn't say it, but until recently I was quite well.


00:29:29.160 --> 00:29:31.860
It's not that I don't enjoy black formatting.


00:29:31.860 --> 00:29:33.320
I think it looks great.


00:29:33.320 --> 00:29:34.580
It's more readable.


00:29:34.580 --> 00:29:35.140
It's nice.


00:29:35.140 --> 00:29:41.920
But I had some major issues with, well, with myself and colleagues that we


00:29:41.920 --> 00:29:43.800
can get sometimes over into the app.


00:29:43.800 --> 00:29:48.000
Like, okay, I've started to write some code and I don't know, it's a bug


00:29:48.000 --> 00:29:52.560
feature, I'm adding some feature and I'm done, but then, yay, I want to


00:29:52.560 --> 00:29:54.840
make it black because it's cool.


00:29:55.160 --> 00:30:01.400
And then I run black on the model or sometimes if I really want to go wild


00:30:01.400 --> 00:30:07.960
I'll run it on the entire package and then I submit my PR and my PR


00:30:07.960 --> 00:30:16.220
Um, well, it includes the single bug fix or the little line i've added for the functionality or the fixing


00:30:16.220 --> 00:30:18.600
and then I have like


00:30:19.320 --> 00:30:25.320
one, I don't know, some hundred changed files because I ran black or even if it's


00:30:25.320 --> 00:30:28.760
in the model, like the whole model looks like brand new.


00:30:28.760 --> 00:30:34.300
And then if I have to use such code, I would say, okay, but where do I start?


00:30:34.300 --> 00:30:35.240
Where do I begin?


00:30:35.240 --> 00:30:36.360
Because I don't know what.


00:30:36.360 --> 00:30:36.880
Right.


00:30:36.880 --> 00:30:38.760
Why are there so many changes, right?


00:30:38.760 --> 00:30:39.880
Uh, yeah.


00:30:39.880 --> 00:30:44.620
And it became a real issue because on one hand, there are a lot of developers


00:30:44.620 --> 00:30:49.160
that was really like into black, let's everything, let's make everything black.


00:30:49.160 --> 00:30:51.320
like, let's make everything beautiful.


00:30:51.320 --> 00:30:56.460
And on the other hand, we would get those huge PRs, like, okay,


00:30:56.460 --> 00:30:57.320
well, do I start?


00:30:57.320 --> 00:30:58.440
Where do I even start?


00:30:58.440 --> 00:31:01.080
So we started restricting black.


00:31:01.080 --> 00:31:06.160
We, at some point, we as a group, we decided, okay, no more black.


00:31:06.160 --> 00:31:08.360
But that was also very frustrating.


00:31:08.360 --> 00:31:15.040
And then I had some talks with a friend of mine and said, okay,


00:31:15.040 --> 00:31:16.440
and you should use darker.


00:31:16.440 --> 00:31:23.640
And the Docker is really tiny. It's not a big package. It's very lightweight.


00:31:23.640 --> 00:31:29.960
And what it does, it takes a little bit more conservative approach.


00:31:29.960 --> 00:31:34.280
It doesn't say, "Okay, just black everything and have a huge PR."


00:31:34.280 --> 00:31:42.040
It says, "Okay, you want to convert your code being beautiful and black,


00:31:42.120 --> 00:31:46.040
But let's make it gradually and then you have


00:31:46.040 --> 00:31:54.300
And then you eliminate this huge pr and this huge mess just to change the stuff you need run meridalka


00:31:54.300 --> 00:31:58.280
Just on the file or even on the entire code


00:31:58.280 --> 00:32:05.800
And then it will format only the changes you made in the file. Okay, so here's I think


00:32:05.800 --> 00:32:08.440
See


00:32:08.440 --> 00:32:10.440
Nice example here


00:32:10.680 --> 00:32:17.160
I love that it runs on the last git changes and that it's actually that it's it's very simple


00:32:17.160 --> 00:32:20.520
I I can't believe no one thought of it for like


00:32:20.520 --> 00:32:25.080
So simple because what it does is just that was a git diff


00:32:25.080 --> 00:32:33.320
Gets the changes and then just runs black formatting all those changes and then you have a normal looking pr


00:32:33.320 --> 00:32:35.800
With with nice formatting


00:32:35.800 --> 00:32:42.700
And yeah, you won't get the whole beautiful black all in one and you'll make it gradually


00:32:42.700 --> 00:32:44.420
but


00:32:44.420 --> 00:32:52.280
Eventually, I think it's more control more more constrained and I think it's better this way and we started using it


00:32:52.280 --> 00:32:55.320
a couple of months ago and I think


00:32:55.320 --> 00:33:02.280
It has a good progress when we just integrated it into our pre-commit hooks. So it's kind of seamless


00:33:02.360 --> 00:33:07.820
It's not that you need to remember running black. Of course, you can also integrate it in by charm


00:33:07.820 --> 00:33:13.960
Oh, yes, oh, I think you know even been for people who are fond of being myself


00:33:13.960 --> 00:33:17.000
I think it has some kind of a plug-in. I don't know who would do that


00:33:17.000 --> 00:33:19.000
Yeah


00:33:19.000 --> 00:33:20.920
Who are those people?


00:33:20.920 --> 00:33:22.920
anyways


00:33:22.920 --> 00:33:26.120
But yeah, so it's simple yeah, it's


00:33:26.120 --> 00:33:29.040
nice and


00:33:29.040 --> 00:33:31.080
made by


00:33:31.680 --> 00:33:39.220
Opal it's the main ride. It's Auntie. Auntie. Co. Co. Co. Co. Yes.


00:33:39.220 --> 00:33:45.920
But I think this is great. Paul out in the audience has an interesting bit of feedback.


00:33:45.920 --> 00:33:52.100
This would be super helpful if you're starting to enforce code standards on an already existent repo, which is most kind of code.


00:33:52.100 --> 00:34:00.000
He works. So, yeah. Yeah. If you're starting like new project. So yeah. Black it all the way. That's fine.


00:34:00.240 --> 00:34:08.160
But yeah, you're showing recommendations. I've heard recommendations before to just have one commit that just does the black thing


00:34:08.160 --> 00:34:14.660
But one of the problems with that is you lose sort of the history of when the file really was last modified


00:34:14.660 --> 00:34:21.120
So if a file hasn't been touched in two years, it's kind of nice to leave it as not touched for two years


00:34:21.120 --> 00:34:24.720
Um so that you can you know kind of see the history, but yeah


00:34:24.880 --> 00:34:30.080
Yeah, because if you will, yeah, if you'll run black and on a five year old


00:34:30.080 --> 00:34:34.560
kit call base, it would look, it would look like you did it all from the beginning.


00:34:34.560 --> 00:34:38.280
On the other hand, if you want to up your commit status, number of lines


00:34:38.280 --> 00:34:40.840
changed way more than the rest of the team.


00:34:40.840 --> 00:34:41.720
You can always do that.


00:34:41.720 --> 00:34:45.240
All right.


00:34:45.240 --> 00:34:47.920
I know y'all, you have a couple of things that you want to give a


00:34:47.920 --> 00:34:49.560
shout out to at the end here as well.


00:34:49.560 --> 00:34:51.400
So, let's just keep going with those.


00:34:51.400 --> 00:34:52.400
Yeah, sure.


00:34:52.520 --> 00:35:06.840
So I have to think the first one is actually a colleague of mine and he's been writing a book, a very interesting book, a bit of a controversial book if you dive into it.


00:35:06.840 --> 00:35:18.040
He basically says that object-oriented, it's good for some but in general when you deal with complex


00:35:18.040 --> 00:35:26.200
problems, the object-oriented programming might even make stuff a lot more


00:35:26.200 --> 00:35:32.240
complicated in terms of debugging, in terms of the separation of concerns.


00:35:32.240 --> 00:35:41.920
And then we present some kind of a new way to deal with the data and how we process


00:35:42.020 --> 00:35:46.620
data, so it's data-oriented programming.


00:35:46.620 --> 00:35:52.380
I have to admit, I read some of the chapters, not all.


00:35:52.380 --> 00:35:53.500
I didn't finish the book.


00:35:53.500 --> 00:35:57.500
It's still, it's almost still a work in progress, but most of it's a bit broad.


00:35:57.500 --> 00:36:05.220
And you don't have to agree on everything, but the whole approach is the combination


00:36:05.220 --> 00:36:10.060
of data-oriented programming with functional programming.


00:36:10.140 --> 00:36:15.180
I think there are some benefits to it and then some complex problems can be


00:36:15.180 --> 00:36:20.100
solved faster and easier and with less debugging strain.


00:36:20.100 --> 00:36:27.060
And like for me, like I have this rule of thumb that if I have to activate


00:36:27.060 --> 00:36:32.620
debugger over and over again to understand what the code does instead


00:36:32.620 --> 00:36:39.340
of just reading the code, it means that something with the code is not 100% right.


00:36:39.620 --> 00:36:45.460
Okay, because the code should be readable and I encountered those issues when working with


00:36:45.460 --> 00:36:48.260
very heavy object-oriented


00:36:48.260 --> 00:36:50.340
code bases


00:36:50.340 --> 00:36:55.880
Like a lot of inheritance and multi inheritance and then I went to django and they use mixins


00:36:55.880 --> 00:36:58.820
It is hard. It is hard to


00:36:58.820 --> 00:37:01.540
design it is hard to


00:37:01.540 --> 00:37:08.580
But mostly it is hard to read and this approach. It's interesting as I said, I'm not fully


00:37:09.060 --> 00:37:14.420
Like, I'm not belittling that, okay, object oriented should be gone from the world.


00:37:14.420 --> 00:37:17.060
It's not my stand, but I think...


00:37:17.060 --> 00:37:20.900
>> Some people have made that stand, but it still is around, isn't it?


00:37:20.900 --> 00:37:29.540
>> Yeah, but I'm not completely on board with that, but I think in some cases,


00:37:29.540 --> 00:37:36.580
there are approaches that are much more lightweight in the whole thing with data versus


00:37:36.580 --> 00:37:39.540
cold separation, I think it's, yeah, I think it's nice.


00:37:39.540 --> 00:37:43.500
I think it's, and it's kind of, yeah, it's kind of change,


00:37:43.500 --> 00:37:48.860
rewires your brain a bit after you read the chapter or two, like next year.


00:37:48.860 --> 00:37:51.180
Maybe it's one of those things like functional programming.


00:37:51.180 --> 00:37:53.380
You don't necessarily do it all the time, but you read it and it gives


00:37:53.380 --> 00:37:56.260
you a different perspective, even if you don't totally adopt it.


00:37:56.260 --> 00:37:57.460
Yeah, exactly.


00:37:57.460 --> 00:37:58.780
Yeah.


00:37:58.780 --> 00:37:59.500
Okay.


00:37:59.500 --> 00:38:02.100
And, oh yeah, a little bit.


00:38:02.340 --> 00:38:07.140
So a few months ago I released my first open source project.


00:38:07.140 --> 00:38:11.460
The Cornell was actually covered by Brian.


00:38:11.460 --> 00:38:14.340
I think two months ago.


00:38:14.340 --> 00:38:14.840
Yeah.


00:38:14.840 --> 00:38:15.340
Yeah.


00:38:15.340 --> 00:38:21.300
So I just thought that to do a little shout out to all the developers out there


00:38:21.300 --> 00:38:26.180
who are looking to contribute to a little bit nice with a very nice


00:38:26.180 --> 00:38:29.620
a little bit nice with a very nice documentation


00:38:29.620 --> 00:38:39.780
project. It's only the beginning. What it does is that it's actually a record and replay


00:38:39.780 --> 00:38:48.900
server for mock. It's a mock server that we call the real data and then can be used as part of the


00:38:48.900 --> 00:38:55.380
CI and for purposes for end-to-end testing because like if you have


00:38:55.380 --> 00:39:03.060
some kind of an entry point that starts a cascade of events including celery or whatever and just then


00:39:03.060 --> 00:39:06.900
that eventually you reach the part when you


00:39:06.900 --> 00:39:15.060
Go out and send an HTTP request. So here cornell comes in handy. We use it quite a lot. Um


00:39:15.860 --> 00:39:21.620
my previous company and I'm trying to now integrate it in my current, work


00:39:21.620 --> 00:39:27.380
place and I think it has some potential and I will, and it's, and it's not very


00:39:27.380 --> 00:39:27.980
mature.


00:39:27.980 --> 00:39:33.380
So I would love like really, if someone wants to contribute even a title or


00:39:33.380 --> 00:39:38.900
documentation or whatever, we really warmly welcome all contributions.


00:39:38.900 --> 00:39:39.320
So.


00:39:39.320 --> 00:39:40.660
Yeah, that's great.


00:39:40.660 --> 00:39:44.300
Uh, Brian asked me on that episode of where I thought the name came from.


00:39:44.620 --> 00:39:48.620
And I thought Chris Cornell from Soundgarden and all that is, is that


00:39:48.620 --> 00:39:49.140
correct?


00:39:49.140 --> 00:39:50.980
Black hole sun and all those things.


00:39:50.980 --> 00:39:54.940
Well, you see the face, what the face reminds you of.


00:39:54.940 --> 00:39:56.100
Yeah, it does.


00:39:56.100 --> 00:39:56.620
No, I didn't.


00:39:56.620 --> 00:40:00.460
I don't think I saw that, paid attention to that before, but yeah, now that I see


00:40:00.460 --> 00:40:02.220
it, I'm more confident in my answer.


00:40:02.220 --> 00:40:03.860
Yeah, you are correct.


00:40:03.860 --> 00:40:04.620
Indeed.


00:40:04.620 --> 00:40:05.740
Right on.


00:40:05.740 --> 00:40:06.620
Right on.


00:40:06.620 --> 00:40:07.220
All right.


00:40:07.220 --> 00:40:09.660
Well, I got a few more extras to share with the world.


00:40:09.660 --> 00:40:10.540
Uh, let's see.


00:40:10.540 --> 00:40:14.000
I had just like literally midnight last night,


00:40:14.000 --> 00:40:14.960
released a new course,


00:40:14.960 --> 00:40:18.200
HTMX plus Flask, Modern Web Apps, Hold the JavaScript.


00:40:18.200 --> 00:40:21.640
So this is a three hour course that like dives into


00:40:21.640 --> 00:40:25.040
cool ways of putting HTMX and Flask together.


00:40:25.040 --> 00:40:27.480
And it also brings together some of the other things


00:40:27.480 --> 00:40:29.400
we've talked about on the podcast before.


00:40:29.400 --> 00:40:31.040
Like when I was creating this course,


00:40:31.040 --> 00:40:35.000
I didn't really like the way that you would reuse HTML.


00:40:35.000 --> 00:40:36.920
I have a lot of duplication and other crummy stuff.


00:40:36.920 --> 00:40:38.680
So I created the ginger partials


00:40:38.680 --> 00:40:42.240
and Chameleon Partials projects to make this code better.


00:40:42.240 --> 00:40:45.540
But anyone who uses HTMX with Jinja or Chameleon,


00:40:45.540 --> 00:40:46.720
should definitely check those out.


00:40:46.720 --> 00:40:47.600
That's covered in the course.


00:40:47.600 --> 00:40:49.300
There's also just links to it.


00:40:49.300 --> 00:40:50.140
Course does cost money,


00:40:50.140 --> 00:40:52.160
but you can go and get the GitHub repo


00:40:52.160 --> 00:40:53.820
and check out the stuff there.


00:40:53.820 --> 00:40:54.660
So that's really cool.


00:40:54.660 --> 00:40:56.800
We build like a really fun little app there


00:40:56.800 --> 00:40:58.640
and add a bunch of HTMX things to it.


00:40:58.640 --> 00:41:01.200
So link in the show notes, check that out.


00:41:01.200 --> 00:41:04.680
Auto-optional, we've got an update, an update from Dan.


00:41:04.680 --> 00:41:06.880
So Brian, did you cover this?


00:41:06.880 --> 00:41:08.480
I covered this last time, I think.


00:41:08.480 --> 00:41:12.800
>> The update is, yeah, we were talking about having,


00:41:12.800 --> 00:41:19.640
so it'll go and do auto optional stuff where if you say something is like


00:41:19.640 --> 00:41:23.440
x colon int equals none as a default value, it goes no, no, no, no, no.


00:41:23.440 --> 00:41:24.200
That doesn't make sense.


00:41:24.200 --> 00:41:29.760
So it'll create an optional of int automatically and correct the typing.


00:41:29.760 --> 00:41:33.040
But we made the comment, Brian, I think maybe you did, I can't remember who.


00:41:33.040 --> 00:41:36.520
But said, it'd be really cool if we could use the pipe syntax that we just


00:41:36.520 --> 00:41:41.020
talked about earlier. So auto optional has been updated to create X pipe none


00:41:41.020 --> 00:41:45.820
instead of optional of X, which is nice. Yeah, I love it. I love how the


00:41:45.820 --> 00:41:48.320
podcast helps bring some of this feedback to the world.


00:41:48.320 --> 00:41:49.320
>>Change the world.


00:41:49.320 --> 00:41:54.020
>>That's right. We have made a dent in the universe, Brian, and it is X pipe


00:41:54.020 --> 00:41:59.720
none. Okay. Coverage, Ned Batchelder just released coverage on Monday. So


00:41:59.720 --> 00:42:04.020
coverage six, which is a major reason. Python two has been expelled from


00:42:04.020 --> 00:42:06.020
coverage, which is all good.


00:42:06.020 --> 00:42:08.020
And 30 third-party packages are


00:42:08.020 --> 00:42:10.020
automatically ignored, which could be a big change


00:42:10.020 --> 00:42:12.020
for some people. Alright, bunch of other stuff, you can


00:42:12.020 --> 00:42:14.020
check it out if you care a lot. Django 3.2.8


00:42:14.020 --> 00:42:16.020
is out with a couple of bug fixes


00:42:16.020 --> 00:42:18.020
about read-only fields and admin


00:42:18.020 --> 00:42:20.020
and some regression bug


00:42:20.020 --> 00:42:22.020
going on, so check that


00:42:22.020 --> 00:42:24.020
out as well. - Sweet. - Yep.


00:42:24.020 --> 00:42:26.020
Well, I guess this might be a time


00:42:26.020 --> 00:42:28.020
for a joke. Shall we finish it with a joke?


00:42:28.020 --> 00:42:30.020
- Yes. - As we often do. Alright.


00:42:30.020 --> 00:42:32.020
Going back to the very


00:42:32.020 --> 00:42:34.420
very reliable geek and poke here.


00:42:34.420 --> 00:42:37.960
We have paired Captcha as in recapture,


00:42:37.960 --> 00:42:39.360
you know, the little pop up


00:42:39.360 --> 00:42:41.120
and you get the different panels.


00:42:41.120 --> 00:42:41.960
You got to say like,


00:42:41.960 --> 00:42:44.020
click all of the crosswalks


00:42:44.020 --> 00:42:47.360
or click all of the dogs or whatever.


00:42:47.360 --> 00:42:48.260
All right, Brian,


00:42:48.260 --> 00:42:52.640
let's do this together like last time.


00:42:52.640 --> 00:42:54.860
I'll do the first one,


00:42:54.860 --> 00:42:57.660
the woman developer or just computer user


00:42:57.660 --> 00:42:58.540
trying to get through this.


00:42:58.540 --> 00:43:02.060
So is this a traffic light or just a light?


00:43:02.060 --> 00:43:06.180
>> No idea. I guess it would guess a traffic light.


00:43:06.180 --> 00:43:10.660
>> Nope. Does the gray pixel in


00:43:10.660 --> 00:43:13.260
the corner also belong to the street sign?


00:43:13.260 --> 00:43:15.940
On and on it goes.


00:43:15.940 --> 00:43:20.960
A sad statement on our digital existence.


00:43:20.960 --> 00:43:23.100
>> There's been some where I'm stumped.


00:43:23.100 --> 00:43:25.460
I'm like, I don't know.


00:43:25.460 --> 00:43:26.340
>> I know.


00:43:26.340 --> 00:43:28.340
Next next question, please


00:43:28.340 --> 00:43:36.040
Sometimes I get thrown three times in a row so embarrassing am I am I a machine


00:43:36.040 --> 00:43:45.060
I couldn't find all the mountains. Yeah, the worst is when you find all the stuff correctly then it refreshes and go find some more of them


00:43:45.060 --> 00:43:47.860
I just found them all. Why are you doing this to me?


00:43:47.860 --> 00:43:52.340
You seem like you like to find traffic lights here have some more


00:43:52.340 --> 00:43:55.540
You looked bored. We got some more lights for you


00:43:55.540 --> 00:43:56.380
- Yeah.


00:43:56.380 --> 00:43:57.200
- Yeah.


00:43:57.200 --> 00:44:00.180
- All right, well, that's the joke I brought for you all.


00:44:00.180 --> 00:44:01.760
- Well, thanks.


00:44:01.760 --> 00:44:03.080
And I appreciate you finding them.


00:44:03.080 --> 00:44:04.300
That's cool.


00:44:04.300 --> 00:44:06.040
So thanks a lot, everybody.


00:44:06.040 --> 00:44:07.660
And we'll wrap it up for today.


00:44:07.660 --> 00:44:11.080
And thanks everybody on the stream for joining us.


00:44:11.080 --> 00:44:12.360
We really appreciate it.


00:44:12.360 --> 00:44:13.200
- Yeah, thanks.


00:44:13.200 --> 00:44:14.960
Y'all, thank you especially for being here.


00:44:14.960 --> 00:44:16.920
- Yeah, it was really fun.


00:44:16.920 --> 00:44:18.260
Thank you.


00:44:18.260 --> 00:44:20.080
- Thanks for listening to Python Bytes.


00:44:20.080 --> 00:44:23.000
Follow the show on Twitter via @PythonBytes.


00:44:23.000 --> 00:44:29.960
Python bytes as in b y t e s. Get the full show notes over at Python bytes dot fm. If you have a


00:44:29.960 --> 00:44:34.800
news item we should cover, just visit Python bytes dot fm and click Submit in the nav bar. We're


00:44:34.800 --> 00:44:38.880
always on the lookout for sharing something cool. If you want to join us for the live recording,


00:44:38.880 --> 00:44:44.280
just visit the website and click live stream to get notified of when our next episode goes live.


00:44:44.280 --> 00:44:50.720
That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself


00:44:50.720 --> 00:44:56.720
I'm Brian Okken. This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

