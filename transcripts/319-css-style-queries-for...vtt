
00:00:00.000 --> 00:00:09.840
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 319 recorded January 17, 2023.


00:00:09.840 --> 00:00:10.900
And I'm Brian Okken.


00:00:10.900 --> 00:00:12.140
And I'm Michael Kennedy.


00:00:12.140 --> 00:00:23.100
Well, I'm super excited to talk about whatever you have to share with us. But before we go, before we get started, I just want to say thanks to Microsoft for Startup Founders Hub for sponsoring this episode.


00:00:23.100 --> 00:00:28.140
Listen to their spot later in the show and let's see what you have to talk about, Michael.


00:00:28.140 --> 00:00:29.220
what do I got to talk about?


00:00:29.220 --> 00:00:30.840
I also want to remind people they can go to


00:00:30.840 --> 00:00:33.780
Python by Set FM, click on the live stream


00:00:33.780 --> 00:00:35.780
and see all the upcoming live streams and be part of that.


00:00:35.780 --> 00:00:37.780
So it's always awesome to have them there


00:00:37.780 --> 00:00:39.060
and follow us on Mastodon.


00:00:39.060 --> 00:00:40.340
We got all of our things there.


00:00:40.340 --> 00:00:42.260
Believe it or not, we actually do a couple things


00:00:42.260 --> 00:00:43.860
on Mastodon every now and then.


00:00:43.860 --> 00:00:47.540
But what I want to do is actually talk about


00:00:47.540 --> 00:00:49.700
this article that Ned Banchelder wrote,


00:00:49.700 --> 00:00:52.220
which I found on Mastodon when we did our


00:00:52.220 --> 00:00:56.180
tools for readmes and other repo homepage types of things


00:00:56.180 --> 00:00:58.660
called the secure maintainer workflow.


00:00:58.660 --> 00:01:02.580
So Brian, we got to judge the level of paranoia here.


00:01:02.580 --> 00:01:06.580
Do you worry about people get into like pytest check?


00:01:06.580 --> 00:01:08.380
You worry about people getting on your computer


00:01:08.380 --> 00:01:11.700
and accessing SSH keys or things like that?


00:01:11.700 --> 00:01:14.060
- Don't, I don't know if I should, but I don't.


00:01:14.060 --> 00:01:16.820
- Well, Ned does.


00:01:16.820 --> 00:01:19.620
And I share some of his concern, you know,


00:01:19.620 --> 00:01:22.740
like on my hard drive, I have SSH keys.


00:01:22.740 --> 00:01:25.180
If you could figure out what computers those went to,


00:01:25.180 --> 00:01:27.260
and you could remotely log into them.


00:01:27.260 --> 00:01:29.340
There's a few layers of indirection


00:01:29.340 --> 00:01:31.380
that make that more difficult than you would imagine,


00:01:31.380 --> 00:01:33.380
but still not that tricky.


00:01:33.380 --> 00:01:35.840
And there's been a bunch of issues.


00:01:35.840 --> 00:01:39.860
For example, let's see, there's the CircleCI breach,


00:01:39.860 --> 00:01:43.020
I believe, it's probably a fair search term.


00:01:43.020 --> 00:01:46.660
CircleCI is super scary because they build the things


00:01:46.660 --> 00:01:48.220
that companies ship.


00:01:48.220 --> 00:01:51.660
So if you ship a website or a mobile app


00:01:51.660 --> 00:01:54.980
or you ship a desktop app or any of those types of things,


00:01:54.980 --> 00:01:56.940
it's automated potentially through CircleCI


00:01:56.940 --> 00:01:57.780
and you send it out.


00:01:57.780 --> 00:02:00.980
So if somebody say were to take over your CircleCI,


00:02:00.980 --> 00:02:02.300
that would be bad.


00:02:02.300 --> 00:02:06.180
Believe what happened was somebody had gotten hold of


00:02:06.180 --> 00:02:08.780
someone who works on CircleCI,


00:02:08.780 --> 00:02:11.860
got into their GitHub account, right?


00:02:11.860 --> 00:02:13.700
That could be through an SSH key


00:02:13.700 --> 00:02:15.340
or when you're on your terminal,


00:02:15.340 --> 00:02:18.140
you could just type git add, git push,


00:02:18.140 --> 00:02:19.540
all those types of things, right?


00:02:19.540 --> 00:02:22.620
So Ned says, well, what can I do


00:02:22.620 --> 00:02:27.220
so that if someone did get access to run code on my behalf,


00:02:27.220 --> 00:02:31.320
that it maybe wouldn't be able to push directly to coverage.py


00:02:31.320 --> 00:02:33.120
and just start going out.


00:02:33.120 --> 00:02:35.560
And that's the next thing, is once that goes out,


00:02:35.560 --> 00:02:38.820
that goes to everybody's servers, many of them anyway, right?


00:02:38.820 --> 00:02:41.080
And then you potentially have bad code


00:02:41.080 --> 00:02:42.020
running on people's servers.


00:02:42.020 --> 00:02:44.820
So the consequence is not just, oh, Ned might get hacked,


00:02:44.820 --> 00:02:47.120
but everyone using coverage.py,


00:02:47.120 --> 00:02:49.680
which is many, many, many, many, many people


00:02:49.680 --> 00:02:50.820
might get hacked, right?


00:02:50.820 --> 00:02:53.540
- Yeah, and it's also used on developer workstations,


00:02:53.540 --> 00:02:55.860
so it's going on developers' computers as well.


00:02:55.860 --> 00:02:58.020
- Exactly, and then rinse and repeat, right?


00:02:58.020 --> 00:03:00.940
Now they have SSH keys, but are they building an Onyx?


00:03:00.940 --> 00:03:03.460
You know, like it goes sideways fast.


00:03:03.460 --> 00:03:06.720
So he's like, well, I have terminal sessions


00:03:06.720 --> 00:03:09.580
that have implicit access to credentials,


00:03:09.580 --> 00:03:12.240
PyPI, Git, and so on.


00:03:12.240 --> 00:03:15.340
It would be better, you know, for example,


00:03:15.340 --> 00:03:17.740
you can push to Git without asking for a password, right?


00:03:17.740 --> 00:03:19.820
Either through credential cache or an SSH key


00:03:19.820 --> 00:03:20.740
or something like that.


00:03:20.740 --> 00:03:23.480
This is problematic in a couple of ways.


00:03:23.480 --> 00:03:25.560
The less likely, less concerning,


00:03:25.560 --> 00:03:28.440
although a lot of advice sort of worries about this,


00:03:28.440 --> 00:03:29.960
I agree that it's not very concerning at all,


00:03:29.960 --> 00:03:33.000
is somebody actually gets physical access to your computer.


00:03:33.000 --> 00:03:35.400
So I don't know what most people do,


00:03:35.400 --> 00:03:38.560
but you should be turning on full disk encryption,


00:03:38.560 --> 00:03:40.520
especially if you have a laptop, right?


00:03:40.520 --> 00:03:42.040
If it could be stolen,


00:03:42.040 --> 00:03:43.840
or especially if you travel around with it


00:03:43.840 --> 00:03:45.000
and it could be lost somewhere


00:03:45.000 --> 00:03:48.080
or picked up and lifted off like the subway or something,


00:03:48.080 --> 00:03:50.120
you don't want to be able to just take the disk out


00:03:50.120 --> 00:03:51.440
and read all the data off it, right?


00:03:51.440 --> 00:03:54.280
So a super easy way to do that with low overhead


00:03:54.280 --> 00:03:56.640
is like FileVault, which is built into macOS,


00:03:56.640 --> 00:03:59.120
and I'm pretty sure Windows has something built in.


00:03:59.120 --> 00:04:00.720
So anyway, full disk encryption.


00:04:00.720 --> 00:04:02.680
So chances something bad happens there


00:04:02.680 --> 00:04:04.200
is really, really small.


00:04:04.200 --> 00:04:08.420
On the other hand though, is if you run some evil code.


00:04:08.420 --> 00:04:11.400
Now, evil code could come from traditional places


00:04:11.400 --> 00:04:15.740
like spam or phishing or those other areas,


00:04:15.740 --> 00:04:18.080
but for developers, especially people maintaining


00:04:18.080 --> 00:04:20.300
popular projects like coverage.py


00:04:20.300 --> 00:04:22.100
and the many other things that Ned does


00:04:22.100 --> 00:04:27.100
is somebody could try to send him malicious code


00:04:27.100 --> 00:04:30.140
through Python and through source control.


00:04:30.140 --> 00:04:32.580
For example, what if somebody says,


00:04:32.580 --> 00:04:35.980
hey Ned, I've got this issue with coverage.py,


00:04:35.980 --> 00:04:37.540
check out this repo and run it


00:04:37.540 --> 00:04:39.660
to see the bug to reproduce it.


00:04:39.660 --> 00:04:42.180
It's like, you know what that might do?


00:04:42.180 --> 00:04:43.820
Well, whatever Ned can do on his computer


00:04:43.820 --> 00:04:44.660
is what it might do.


00:04:44.660 --> 00:04:46.660
And he says, look, if I get a huge repo,


00:04:46.660 --> 00:04:49.980
not a PR to coverage.py, but a huge set of code


00:04:49.980 --> 00:04:52.060
that coverage.py is applied to,


00:04:52.060 --> 00:04:54.380
you know, what is that potentially gonna do?


00:04:54.380 --> 00:04:57.400
He can't go code review every huge PR


00:04:57.400 --> 00:04:58.820
that is sent to him when it, you know,


00:04:58.820 --> 00:05:00.700
refers to someone else's repo, right?


00:05:00.700 --> 00:05:01.540
So there's things you can do,


00:05:01.540 --> 00:05:04.800
but that's his primary concern is,


00:05:04.800 --> 00:05:07.980
how do you deal with people sending him bad code?


00:05:07.980 --> 00:05:10.620
So first thing is 1Password.


00:05:10.620 --> 00:05:11.860
1Password is awesome.


00:05:11.860 --> 00:05:13.920
Also not LastPass.


00:05:13.920 --> 00:05:15.740
Don't use LastPass more than that at the end,


00:05:15.740 --> 00:05:17.540
but oh my God, don't use LastPass.


00:05:17.540 --> 00:05:20.420
1Password or Bitwarden are really good choices.


00:05:20.420 --> 00:05:23.700
And it says, look, I store my credentials in there,


00:05:23.700 --> 00:05:27.420
and then you can have two shell functions


00:05:27.420 --> 00:05:32.420
that will load those variables into and out of environment,


00:05:32.420 --> 00:05:34.560
the environment just for a moment.


00:05:34.560 --> 00:05:38.140
So load the GitHub credential into the environment,


00:05:38.140 --> 00:05:40.300
do a get push, unload it, for example.


00:05:40.300 --> 00:05:41.140
Something like that, right?


00:05:41.140 --> 00:05:41.980
That's pretty cool.


00:05:41.980 --> 00:05:44.660
Similarly, things that are very less likely to be used


00:05:44.660 --> 00:05:46.080
like PyPI credentials, right?


00:05:46.080 --> 00:05:48.080
How often do you really do a push?


00:05:48.080 --> 00:05:50.960
It says, but also I have a .ssh directory,


00:05:50.960 --> 00:05:53.200
which on Mac and I think Linux as well


00:05:53.200 --> 00:05:55.840
is where the default SSH keys just live


00:05:55.840 --> 00:05:57.200
and encrypted hanging out there.


00:05:57.200 --> 00:06:00.240
So that would be something you wanna keep away.


00:06:00.240 --> 00:06:01.880
Now he says, I don't know what to do with that.


00:06:01.880 --> 00:06:03.620
The comments here are very helpful.


00:06:03.620 --> 00:06:04.520
But the other thing is he says,


00:06:04.520 --> 00:06:06.500
if I've got to run that PR


00:06:06.500 --> 00:06:08.240
and somebody gives me some huge bit of code,


00:06:08.240 --> 00:06:09.640
I'm running that in Docker.


00:06:09.640 --> 00:06:13.560
So get one of the base Docker files for Python,


00:06:13.560 --> 00:06:18.000
log into their interactive shell, get clone, try it out.


00:06:18.000 --> 00:06:21.880
So, who cares if somebody hacks your Docker file,


00:06:21.880 --> 00:06:23.320
or your Docker container,


00:06:23.320 --> 00:06:24.720
you're gonna throw it away anyway, right?


00:06:24.720 --> 00:06:27.080
So he asked, what else can I be doing to keep safe?


00:06:27.080 --> 00:06:31.560
And luckily there are comments on his blog here.


00:06:31.560 --> 00:06:34.600
It says, you could piggyback on the one password workflow


00:06:34.600 --> 00:06:36.880
to export extra SSH config.


00:06:36.880 --> 00:06:40.960
And go down here, Dirk Schaden says,


00:06:40.960 --> 00:06:45.440
I use secretive, which keeps SSH keys on the Mac locked up.


00:06:45.440 --> 00:06:47.240
Some comments for protecting Docker,


00:06:47.240 --> 00:06:48.800
although I don't really see any reason


00:06:48.800 --> 00:06:51.180
I would care about protecting a base Docker image.


00:06:51.180 --> 00:06:54.080
But Kushal Das, another core developer,


00:06:54.080 --> 00:06:57.080
says 1Password can do SSH.


00:06:57.080 --> 00:06:59.720
So 1Password will run an SSH agent


00:06:59.720 --> 00:07:01.380
that will serve up the keys on demand,


00:07:01.380 --> 00:07:04.120
but prompt you for a fingerprint reading


00:07:04.120 --> 00:07:06.440
or verify on your watch


00:07:06.440 --> 00:07:09.680
or enter your 1Password password type thing, which is cool.


00:07:09.680 --> 00:07:11.360
And they also suggest using Podman,


00:07:11.360 --> 00:07:13.400
which has higher security than Docker.


00:07:13.400 --> 00:07:14.720
Again, I'm not sure why you need that.


00:07:14.720 --> 00:07:16.000
But finally, Brett Cannon says,


00:07:16.000 --> 00:07:17.520
one password for SSH.


00:07:17.520 --> 00:07:18.340
Let's go.


00:07:18.340 --> 00:07:19.180
That seems pretty awesome.


00:07:19.180 --> 00:07:20.480
So. - Interesting.


00:07:20.480 --> 00:07:21.800
- Anyway, these are some ideas.


00:07:21.800 --> 00:07:25.060
I think it's only scratching the surface, but yeah.


00:07:25.060 --> 00:07:27.700
And then Christopher, just to follow up,


00:07:27.700 --> 00:07:30.320
says BitLocker is the file vault equivalent for Windows.


00:07:30.320 --> 00:07:31.160
That's right.


00:07:31.160 --> 00:07:31.980
Thanks, Christopher.


00:07:31.980 --> 00:07:33.440
- So one of the things that, I mean,


00:07:33.440 --> 00:07:36.040
okay, so yes, protecting against, you know,


00:07:36.040 --> 00:07:37.960
losing your laptop or somebody taking it


00:07:37.960 --> 00:07:40.140
or reading or whatever.


00:07:40.140 --> 00:07:42.000
These are all kind of cool.


00:07:42.000 --> 00:07:44.400
One of the, my concern isn't really that


00:07:44.400 --> 00:07:45.800
somebody's gonna try to access it,


00:07:45.800 --> 00:07:48.140
is that I can't anymore.


00:07:48.140 --> 00:07:52.660
Like my laptop just dies and I can't use it anymore.


00:07:52.660 --> 00:07:55.520
So things like 1Password, I assume they're backupable


00:07:55.520 --> 00:07:57.520
so that I can get access to it again.


00:07:57.520 --> 00:07:59.880
- Yeah, yeah, so 1Password stores all that information


00:07:59.880 --> 00:08:04.280
on their servers, where you control


00:08:04.280 --> 00:08:06.920
a super long encryption key that they don't have.


00:08:06.920 --> 00:08:08.920
So there's no, if you lose it, there's no,


00:08:08.920 --> 00:08:09.940
I'll get my thing back.


00:08:09.940 --> 00:08:11.680
Part of the setup process for one password


00:08:11.680 --> 00:08:13.920
is they're like, here's your 30 character


00:08:13.920 --> 00:08:16.240
secret key that is combined with your password,


00:08:16.240 --> 00:08:19.240
and if you don't have both of those, we can't help you.


00:08:19.240 --> 00:08:21.440
It's encrypted with this and we don't know what it is.


00:08:21.440 --> 00:08:24.120
So it's pretty good, it's pretty good.


00:08:24.120 --> 00:08:27.520
It's not LastPass, again, which we'll touch on.


00:08:27.520 --> 00:08:30.640
But, so that syncs to all, like it syncs to your phone,


00:08:30.640 --> 00:08:33.040
it syncs to your different computers.


00:08:33.040 --> 00:08:35.640
There's a web version.


00:08:35.640 --> 00:08:37.860
It works on Windows, Mac, Linux.


00:08:37.860 --> 00:08:39.300
It's a pretty good option, honestly.


00:08:39.300 --> 00:08:42.460
It's paid, but it's not much, like five bucks a month.


00:08:42.460 --> 00:08:43.580
You don't want that in Bitwarden,


00:08:43.580 --> 00:08:45.380
but Bitwarden's not quite as secure,


00:08:45.380 --> 00:08:46.980
'cause I don't think it has the secret key.


00:08:46.980 --> 00:08:49.380
It's just the password, so you need a longer password.


00:08:49.380 --> 00:08:50.740
I don't know, we're going a bit down,


00:08:50.740 --> 00:08:52.180
too far down that rabbit hole, maybe,


00:08:52.180 --> 00:08:55.140
but yeah, it's pretty interesting.


00:08:55.140 --> 00:08:57.760
Certainly it's a concern, but so, for example,


00:08:57.760 --> 00:09:00.180
you can have file attachments in your 1Password,


00:09:00.180 --> 00:09:02.900
so you can attach your SSH folder


00:09:02.900 --> 00:09:06.160
to like a logins thing that you put in there.


00:09:06.160 --> 00:09:07.620
So if you go to a new computer,


00:09:07.620 --> 00:09:09.620
you can just open that thing up


00:09:09.620 --> 00:09:11.540
and get your SSH keys, drop them in there,


00:09:11.540 --> 00:09:12.840
and off you go.


00:09:12.840 --> 00:09:17.320
But never, never lose that 30 character secret key


00:09:17.320 --> 00:09:19.420
'cause you're not getting back in without it.


00:09:19.420 --> 00:09:21.420
All right, over to you, what you got?


00:09:21.420 --> 00:09:22.300
- What do I have?


00:09:22.300 --> 00:09:24.420
I've got some web scraping.


00:09:24.420 --> 00:09:27.740
So, or a tool, actually a couple tools


00:09:27.740 --> 00:09:29.920
for parsing HTML and parsing JSON


00:09:29.920 --> 00:09:31.640
that I thought were just pretty darn cool.


00:09:31.640 --> 00:09:34.100
So I was reading this article, which is a decent article,


00:09:34.100 --> 00:09:37.660
called "A Year of Writing About Web Scraping in Review."


00:09:37.660 --> 00:09:43.760
So somebody that got a job doing a whole bunch of blog posts about web scraping.


00:09:43.760 --> 00:09:48.240
But one of the things, when he talks about doing it in Python,


00:09:48.240 --> 00:09:52.640
it had "httpx," and yeah, you and I both like that a lot.


00:09:52.640 --> 00:09:54.300
- Oh, yeah, it's great stuff. - Pretty popular.


00:09:54.300 --> 00:09:57.600
But I hadn't heard of Parcel or JamesPath.


00:09:57.600 --> 00:10:00.500
Or JamesPath is J-M-E-S, Path.


00:10:00.560 --> 00:10:03.060
And so I wanted to check that out.


00:10:03.060 --> 00:10:04.860
These are some pretty cool tools.


00:10:04.860 --> 00:10:08.260
So what Parcel does is it's a Python library


00:10:08.260 --> 00:10:12.600
to extract and remove data from HTML and XML,


00:10:12.600 --> 00:10:16.460
sure, I guess, using XPath and CSS.


00:10:16.460 --> 00:10:19.360
So the CSS part is the part that I'm excited about.


00:10:19.360 --> 00:10:23.800
So the idea is, like, here's an example bit of HTML


00:10:23.800 --> 00:10:25.660
that we're showing on the live stream.


00:10:25.720 --> 00:10:35.440
And you can just like access elements like you would CSS access like, you know, h1 colon colon text.


00:10:35.440 --> 00:10:37.440
I'm not sure why it's colon colon instead of dot.


00:10:37.440 --> 00:10:38.440
But anyway.


00:10:38.440 --> 00:10:44.040
I think those are what they call like special classes in CSS.


00:10:44.040 --> 00:10:44.760
Okay.


00:10:44.760 --> 00:10:45.960
Yeah, the text is up.


00:10:45.960 --> 00:10:48.680
But you can do things like h1 colon hover.


00:10:48.680 --> 00:10:50.560
And that like only triggers when it hovers.


00:10:50.560 --> 00:10:52.040
But yeah, colon colon text, you're right.


00:10:52.040 --> 00:10:52.760
That okay, I get it.


00:10:52.760 --> 00:10:53.360
That is weird.


00:10:53.360 --> 00:10:57.360
But anyway, kind of interesting.


00:10:57.360 --> 00:11:02.160
I like the, and then I'm used to the, like the greater than,


00:11:02.160 --> 00:11:04.660
I think that's like some child of or something.


00:11:04.660 --> 00:11:05.760
>> Immediate child.


00:11:05.760 --> 00:11:06.560
>> Immediate child.


00:11:06.560 --> 00:11:08.120
>> Yeah, it has to be immediate child, yeah.


00:11:08.120 --> 00:11:12.880
>> Okay. But it's fairly clear to read then to be able to pull out


00:11:12.880 --> 00:11:17.280
some stuff out of your HTML using these selectors.


00:11:17.280 --> 00:11:18.340
So that's pretty cool.


00:11:18.340 --> 00:11:19.680
>> Yeah, that's really nice.


00:11:19.680 --> 00:11:22.040
I've always thought a beautiful soup for that,


00:11:22.040 --> 00:11:23.240
But this sounds really nice.


00:11:23.240 --> 00:11:25.800
The other one that I thought was great,


00:11:25.800 --> 00:11:27.520
and which I probably do more often,


00:11:27.520 --> 00:11:30.240
is grabbing stuff out of JSON.


00:11:30.240 --> 00:11:32.760
I hadn't heard of James Path.


00:11:32.760 --> 00:11:38.920
It's just some pretty cool expressions to be able to pull out some stuff.


00:11:38.920 --> 00:11:42.720
If you've got this example of foo,


00:11:42.720 --> 00:11:45.400
and foo is a dictionary element,


00:11:45.400 --> 00:11:50.920
and it has another dictionary inside with bar and the value of baz.


00:11:50.920 --> 00:11:54.000
you can just say foo.bar and it'll return bats.


00:11:54.000 --> 00:11:57.720
So those are pretty cool.


00:11:57.720 --> 00:12:01.280
Just simple little tools about getting JSON data.


00:12:01.280 --> 00:12:03.640
>> That's interesting because I never really thought of


00:12:03.640 --> 00:12:06.880
parsing JSON with a search.


00:12:06.880 --> 00:12:07.560
>> Yeah.


00:12:07.560 --> 00:12:10.320
>> With a query CSS like search,


00:12:10.320 --> 00:12:11.480
I've always just thought of it as,


00:12:11.480 --> 00:12:13.320
well, I'm just going to load it up and navigate it.


00:12:13.320 --> 00:12:15.280
But I just want to go to


00:12:15.280 --> 00:12:17.120
this section and grab this array


00:12:17.120 --> 00:12:18.480
and I don't care what's in the middle.


00:12:18.480 --> 00:12:43.640
Yeah, well, and actually, so I need to play with it. So you're right. I've never really thought about too, too much about doing searches or something. I just like loaded up and just navigate it. But, but if it's somewhere buried deep inside my document, I wouldn't know how to get it. So yeah, or, or possibly if it changes over time. So it's like, you know, there's a component on the site on the page, but it's, it might be loaded anywhere on the page.


00:12:44.520 --> 00:12:48.200
Yeah, exactly. Yeah, it's kind of like a CSS selector for JSON, which


00:12:48.200 --> 00:12:49.640
that is a cool discovery.


00:12:49.640 --> 00:12:50.360
Yeah.


00:12:50.360 --> 00:12:52.600
Anyway, that's it. A couple short items, but


00:12:52.600 --> 00:12:56.840
Nice. Out there, Will McGugan says, "Pseudo classes?"


00:12:56.840 --> 00:12:59.960
And yes, pseudo classes for sure. Absolutely. So that's like


00:12:59.960 --> 00:13:02.920
the colon hover and stuff. But these are all


00:13:02.920 --> 00:13:06.680
like colon read-only, colon valid, colon,


00:13:06.680 --> 00:13:10.280
you know, these colon visited. But I don't know about the double colon. Maybe


00:13:10.280 --> 00:13:12.120
that's something else. Maybe it's just a special


00:13:12.120 --> 00:13:14.120
specialization of pseudo classes.


00:13:14.120 --> 00:13:17.000
Yeah, I don't know, I have to dig into it a little bit more.


00:13:17.000 --> 00:13:19.760
Same. I've only been doing the web for like a few weeks.


00:13:19.760 --> 00:13:22.800
I went to this boot camp, I'm getting good at HTML.


00:13:22.800 --> 00:13:25.360
Alright, tell us about our sponsor.


00:13:25.360 --> 00:13:27.360
This episode of Python Bytes is


00:13:27.360 --> 00:13:29.640
brought to you by Microsoft for Startups.


00:13:29.640 --> 00:13:34.280
So Microsoft for Startups has built Founders Hub to help startups be successful.


00:13:34.280 --> 00:13:39.960
Founders Hub provides founders at any stage with free resources to help solve startup challenges.


00:13:39.960 --> 00:13:43.080
The digital platform provides technology benefits,


00:13:43.080 --> 00:13:44.940
access to expert guidance,


00:13:44.940 --> 00:13:46.880
skilling resources, mentorship,


00:13:46.880 --> 00:13:49.540
and network connections, and so much more.


00:13:49.540 --> 00:13:52.680
Founders Hub is truly open to all,


00:13:52.680 --> 00:13:56.140
along with free access to GitHub and Microsoft Cloud,


00:13:56.140 --> 00:13:59.520
with the ability to unlock credits over time.


00:13:59.520 --> 00:14:01.520
Founders Hub also has partnered with


00:14:01.520 --> 00:14:03.400
other innovative companies to provide


00:14:03.400 --> 00:14:05.460
exclusive benefits and discounts.


00:14:05.460 --> 00:14:08.100
You'll also have access to their mentorship network,


00:14:08.100 --> 00:14:09.740
giving you access to a pool of


00:14:09.740 --> 00:14:12.460
hundreds of mentors across a range of disciplines.


00:14:12.460 --> 00:14:14.620
you'll be able to book a one-on-one meeting


00:14:14.620 --> 00:14:18.060
with mentors, many of whom are former founders themselves.


00:14:18.060 --> 00:14:20.220
Make your idea a reality today with


00:14:20.220 --> 00:14:24.220
critical support you'll get from Microsoft for Startups Founders Hub.


00:14:24.220 --> 00:14:25.620
To join the program,


00:14:25.620 --> 00:14:30.100
please visit pythonbytes.fm/foundershub2022.


00:14:30.100 --> 00:14:31.740
The link is in your show notes.


00:14:31.740 --> 00:14:33.940
>> Indeed. Thank you, Microsoft,


00:14:33.940 --> 00:14:35.580
for sponsoring the show.


00:14:35.580 --> 00:14:37.580
Let's see, what do I got next?


00:14:37.580 --> 00:14:40.540
Back to Git, but this time not protecting Git,


00:14:40.540 --> 00:14:42.960
understanding your Git repository.


00:14:42.960 --> 00:14:46.180
Brian, do you know what your largest Git repository is in size?


00:14:46.180 --> 00:14:46.680
>> No.


00:14:46.680 --> 00:14:48.920
>> Not either, but I'm pretty sure that


00:14:48.920 --> 00:14:52.800
Talk Python Training the website is just under a gig,


00:14:52.800 --> 00:14:54.320
and that's quite a bit.


00:14:54.320 --> 00:14:56.280
I haven't looked at all the others,


00:14:56.280 --> 00:14:58.560
but that one's one of the larger ones that I manage,


00:14:58.560 --> 00:14:59.640
and it's pretty big.


00:14:59.640 --> 00:15:01.360
But is it big because it has a bunch of


00:15:01.360 --> 00:15:04.160
binary stuff that I should maybe find and remove?


00:15:04.160 --> 00:15:07.320
Is it big because there's just a lot of files?


00:15:07.320 --> 00:15:11.520
If you have directories named like backup one, backup two, stored in there.


00:15:11.520 --> 00:15:12.720
No, no, no.


00:15:12.720 --> 00:15:17.280
Version one, version two, version one final, version one final, final.


00:15:17.280 --> 00:15:19.960
I zip those, I don't just have those directories.


00:15:19.960 --> 00:15:24.320
Yeah, so anyway, what I want to tell you all about is a tool called Git Sizer.


00:15:24.320 --> 00:15:27.720
So it computes various size metrics for Git repositories


00:15:27.720 --> 00:15:31.760
and pointing out aspects of your repository that might cause problems.


00:15:31.760 --> 00:15:34.560
So if you've got a small repo, like who cares, don't worry about this stuff.


00:15:34.560 --> 00:15:37.620
But on the other hand, if you've got one where it's like,


00:15:37.620 --> 00:15:39.260
"This thing is a pain to check out,"


00:15:39.260 --> 00:15:41.960
or "CI builds are really dragging because of this,"


00:15:41.960 --> 00:15:44.560
this segment, if not necessarily this tool,


00:15:44.560 --> 00:15:46.260
I think will be helpful for you.


00:15:46.260 --> 00:15:51.780
I recently did an episode on Monorepos with David Vjek,


00:15:51.780 --> 00:15:55.020
and we uncovered a bunch of cool tools.


00:15:55.020 --> 00:15:58.040
One of them is this GetSizer because Monorepos are like,


00:15:58.040 --> 00:16:00.220
"I don't just have a repository for this project,


00:16:00.220 --> 00:16:02.540
I have a repository for the company," and all 100 people put


00:16:02.540 --> 00:16:05.020
all of their projects into that one repository,


00:16:05.020 --> 00:16:06.780
which is a bit of a mind bender.


00:16:06.780 --> 00:16:07.980
But if you do stuff like that,


00:16:07.980 --> 00:16:09.860
you need to think way more carefully


00:16:09.860 --> 00:16:13.860
about how you work with files in Git and so on.


00:16:13.860 --> 00:16:15.980
So you can ask questions like,


00:16:15.980 --> 00:16:18.400
is the repo too big overall?


00:16:18.400 --> 00:16:20.500
Ideally it should be under one gig.


00:16:20.500 --> 00:16:22.360
Well actually maybe I'm over by a couple bytes,


00:16:22.360 --> 00:16:23.200
but whatever.


00:16:23.200 --> 00:16:25.440
And they start to get out of control at five gigs.


00:16:25.440 --> 00:16:28.180
Like Git doesn't behave well sort of thing.


00:16:28.180 --> 00:16:32.240
So you can do things like avoiding compiled output.


00:16:32.240 --> 00:16:35.160
So if you have jar files, right, or wheels, I guess,


00:16:35.160 --> 00:16:37.080
in our case, we have less compiled output.


00:16:37.080 --> 00:16:38.160
But if you have, say, like wheels,


00:16:38.160 --> 00:16:40.480
and you wanna keep a version of every release,


00:16:40.480 --> 00:16:42.040
maybe don't store that in Git.


00:16:42.040 --> 00:16:44.480
Maybe store that somewhere else and link to it in Git.


00:16:44.480 --> 00:16:45.320
I don't know.


00:16:45.320 --> 00:16:47.320
You also use Git large file system


00:16:47.320 --> 00:16:50.200
instead of putting large files directly in there.


00:16:50.200 --> 00:16:52.880
And things that's not very compressible


00:16:52.880 --> 00:16:55.920
and cannot be diffed, they're very much hated by Git,


00:16:55.920 --> 00:16:59.800
because Git does a lot of its work by doing deltas.


00:16:59.800 --> 00:17:01.000
Like, okay, here's the main one,


00:17:01.000 --> 00:17:03.500
and then here's just the difference of these versions I need to keep.


00:17:03.500 --> 00:17:05.540
Like this one line in this text file changed.


00:17:05.540 --> 00:17:06.960
That could be what's stored,


00:17:06.960 --> 00:17:09.780
but if it's just a binary thing that can't be diffed,


00:17:09.780 --> 00:17:11.860
then it's always a copy.


00:17:11.860 --> 00:17:15.700
You can go through here and you download it.


00:17:15.700 --> 00:17:17.580
To get started, it says, you run it,


00:17:17.580 --> 00:17:19.580
it'll tell you things like,


00:17:19.580 --> 00:17:22.220
go through the blog, basically analyzing the system.


00:17:22.220 --> 00:17:23.900
It says overall repository size.


00:17:23.900 --> 00:17:25.220
Here's how many commits there are,


00:17:25.220 --> 00:17:26.820
how big the commit history is.


00:17:26.820 --> 00:17:30.180
Here's how many trees as in folders and stuff,


00:17:30.180 --> 00:17:33.900
and how overall size of them and the blobs, right?


00:17:33.900 --> 00:17:38.900
So this one has 55 gigs of blobs with 1.65 million blobs.


00:17:38.900 --> 00:17:42.820
That is a serious, serious bit of history there,


00:17:42.820 --> 00:17:44.680
whatever this project they ran it on.


00:17:44.680 --> 00:17:46.600
But it'll go through and tell you, you know,


00:17:46.600 --> 00:17:47.620
what's going on.


00:17:47.620 --> 00:17:49.900
And yeah, you can sort of look


00:17:49.900 --> 00:17:52.900
and get a better understanding of what's happening


00:17:52.900 --> 00:17:54.300
in your Git repository.


00:17:54.300 --> 00:17:55.240
- Cool.


00:17:55.240 --> 00:17:58.660
Something else that I'm sure everybody knows this already,


00:17:58.660 --> 00:18:00.520
but especially in CI and stuff,


00:18:00.520 --> 00:18:04.240
it's helpful when you're going to clone a branch,


00:18:04.240 --> 00:18:08.560
to clone it to depth one so that you're not cloning all the history.


00:18:08.560 --> 00:18:10.040
You don't need it for-


00:18:10.040 --> 00:18:16.840
>> Yes. I have some interesting newer version of that guidance for you, Brian.


00:18:16.840 --> 00:18:17.400
>> Okay.


00:18:17.400 --> 00:18:21.800
>> I watched some of the presentations at GitHub Universe.


00:18:21.800 --> 00:18:24.560
What you're talking about is what's called a shallow copy.


00:18:24.560 --> 00:18:26.720
It says, we're only going to pretend that there's


00:18:26.720 --> 00:18:29.360
three commits deep in this branch,


00:18:29.360 --> 00:18:31.160
in which case you only see like three level,


00:18:31.160 --> 00:18:34.320
three commits worth of history and so on.


00:18:34.320 --> 00:18:36.240
But it is much smaller because it doesn't keep


00:18:36.240 --> 00:18:38.440
all those files over time,


00:18:38.440 --> 00:18:42.560
but you make the trade-off that you don't have all the history.


00:18:42.560 --> 00:18:44.900
If you wanted to go back and read that,


00:18:44.900 --> 00:18:46.640
potentially even check out back to one of those,


00:18:46.640 --> 00:18:48.760
you'd have to delete the thing or check it out


00:18:48.760 --> 00:18:51.400
again and somehow in another less shallow way.


00:18:51.400 --> 00:18:54.520
What you can do that's real similar is you can do


00:18:54.520 --> 00:18:56.360
a partial clone.


00:18:56.360 --> 00:18:58.960
I don't know how I ended up on this page,


00:18:58.960 --> 00:19:02.760
but there's docs for it on the GitHub documentation page.


00:19:02.760 --> 00:19:04.300
With a shallow clone,


00:19:04.300 --> 00:19:07.280
all that it will check out is the depth of one.


00:19:07.280 --> 00:19:09.480
I'm sorry, not shallow, partial clone.


00:19:09.480 --> 00:19:13.100
All it will check out is level one of files,


00:19:13.100 --> 00:19:15.520
but all of the commit history and messages.


00:19:15.520 --> 00:19:18.280
This file has 10 changes and here's the messages,


00:19:18.280 --> 00:19:20.480
but it doesn't check out those nine others.


00:19:20.480 --> 00:19:24.160
But what's cool is if you were to switch a branch or


00:19:24.160 --> 00:19:28.000
go back in history, Git will on demand download that other one.


00:19:28.000 --> 00:19:31.040
So what you end up typing is you type something like


00:19:31.040 --> 00:19:35.760
git clone --filter boleyn blob equals none


00:19:35.760 --> 00:19:39.440
or you can even say I want all the files except for anything over


00:19:39.440 --> 00:19:43.120
a certain size that might be in history. So anything over 100k


00:19:43.120 --> 00:19:46.720
but other than that give me every file forever throughout its all history.


00:19:46.720 --> 00:19:50.960
So this partial clone is like a similar type of thing


00:19:50.960 --> 00:19:55.220
but it's a little more flexible in that it's like a transparent proxy


00:19:55.220 --> 00:19:58.600
to the full history of the repo without cloning it. Does that make sense?


00:19:58.600 --> 00:20:01.960
>> Yeah. That might be a good workflow for in a development environment.


00:20:01.960 --> 00:20:06.740
>> Yes, exactly. If you're not hoping that you're going to be able to go


00:20:06.740 --> 00:20:10.540
offline and completely disassociate yourself from GitHub.


00:20:10.540 --> 00:20:13.740
If you are assuming I still have online access and I don't want


00:20:13.740 --> 00:20:17.940
this folder to be the true complete full history forever of the repo,


00:20:17.940 --> 00:20:20.240
I trust that it's other places, then you'd be totally good.


00:20:20.240 --> 00:20:24.920
The one place where the shallow clone would be really awesome is for CI.


00:20:24.920 --> 00:20:26.640
>> Yeah, that's what I was mentioning.


00:20:26.640 --> 00:20:29.080
>> Yeah. If you're doing it for CI,


00:20:29.080 --> 00:20:31.960
then your CI system does not care what the history is.


00:20:31.960 --> 00:20:33.760
It only cares what the current is.


00:20:33.760 --> 00:20:34.120
>> Yeah.


00:20:34.120 --> 00:20:36.040
>> Right. So shallow clone.


00:20:36.040 --> 00:20:40.200
Then similarly related to that is you have sparse checkouts where you can say,


00:20:40.200 --> 00:20:41.300
I know there's a huge repo,


00:20:41.300 --> 00:20:44.000
but I just want these three directories and stuff under them.


00:20:44.000 --> 00:20:45.880
You can mix that with a partial clone.


00:20:45.880 --> 00:20:47.280
So you can combine these,


00:20:47.280 --> 00:20:48.560
not only with a partial clone,


00:20:48.560 --> 00:20:49.900
but of just these three directories,


00:20:49.900 --> 00:20:51.100
even though there's thousands.


00:20:51.100 --> 00:20:52.900
>> All right. Well, and some companies do


00:20:52.900 --> 00:20:56.340
the whole mega repo thing where everyone's using one.


00:20:56.340 --> 00:20:57.980
>> That's where it would matter because you're like,


00:20:57.980 --> 00:21:00.260
"Well, I don't want to check out seven terabytes.


00:21:00.260 --> 00:21:01.580
I don't want our returns out to be."


00:21:01.580 --> 00:21:01.820
>> Yeah.


00:21:01.820 --> 00:21:04.260
>> Anyway, there's a couple of interesting things.


00:21:04.260 --> 00:21:09.540
I present to you all the Git Sizer to give you a little bit of advice,


00:21:09.540 --> 00:21:12.780
but then also some of these other tools to help you deal with it more.


00:21:12.780 --> 00:21:14.820
If you're already in this realm,


00:21:14.820 --> 00:21:17.340
partial clone, shallow clones,


00:21:17.340 --> 00:21:19.900
and sparse checkouts all might be


00:21:19.900 --> 00:21:22.220
tools you can apply, just built in to Git


00:21:22.220 --> 00:21:23.740
that make this a lot better.


00:21:23.740 --> 00:21:25.980
And also LFS is not that hard to use.


00:21:25.980 --> 00:21:28.380
So if you really have to use LFS.


00:21:28.380 --> 00:21:29.820
Yeah, I have one other thing for you.


00:21:29.820 --> 00:21:31.340
I did this on the Talk Python Training.


00:21:31.340 --> 00:21:32.540
I did a partial clone.


00:21:32.540 --> 00:21:36.380
Well, filter blob equals none, blob colon none.


00:21:36.380 --> 00:21:39.580
And without, so without I had


00:21:39.580 --> 00:21:42.300
the deltas with 71,000 deltas


00:21:42.300 --> 00:21:46.300
and 118,000 objects with 10,000 objects.


00:21:46.300 --> 00:21:49.580
1400 deltas. Much, much faster


00:21:49.580 --> 00:21:53.940
checkout. And like I said, it's kind of on-demand. It'll go get the older files if it needs to.


00:21:53.940 --> 00:21:54.440
Cool.


00:21:54.440 --> 00:21:56.840
Yeah, anyway, it seems like it's pretty handy.


00:21:56.840 --> 00:21:59.140
Lots of Git. What are we getting to next?


00:21:59.140 --> 00:22:02.500
Oh, we've, oops, right now we've got bad advice.


00:22:02.500 --> 00:22:05.700
So, I guess this may be under category of


00:22:05.700 --> 00:22:07.940
do not try this at home or just


00:22:07.940 --> 00:22:11.240
don't listen to Brian. But it wasn't me, it was this other guy, Adrian.


00:22:11.240 --> 00:22:16.340
So this is a fun article called "Data Classes Without Type Annotations."


00:22:16.340 --> 00:22:19.780
So I'm using data classes a lot now. I like them.


00:22:19.780 --> 00:22:24.180
And adders too. I like both adders and data classes.


00:22:24.180 --> 00:22:26.920
Anyway, so apparently,


00:22:26.920 --> 00:22:31.520
I didn't know this, but data classes don't really care what the type is.


00:22:31.520 --> 00:22:37.020
You can put a type, but it doesn't use the type?


00:22:37.020 --> 00:22:39.520
It doesn't use the type at all, apparently.


00:22:39.520 --> 00:22:44.040
So you can do something like dot dot dot, for instance, is the type.


00:22:44.040 --> 00:22:47.080
And you can do some crazy things.


00:22:47.080 --> 00:22:49.760
So that doesn't even make any sense. But apparently it works fine.


00:22:49.760 --> 00:22:52.880
And I'm like, I don't believe it. So I tried it, and they're right.


00:22:52.880 --> 00:22:54.880
It doesn't do that.


00:22:54.880 --> 00:22:58.880
So there's a whole bunch of


00:22:58.880 --> 00:23:01.640
discussion around types here and type ints.


00:23:01.640 --> 00:23:04.840
And some people just kind of are, they don't want to use types.


00:23:04.840 --> 00:23:08.720
And that's fine. But if you wanted to use type classes or data classes,


00:23:08.720 --> 00:23:10.720
they kind of require you to use types.


00:23:10.720 --> 00:23:12.720
But apparently you can get around it.


00:23:12.720 --> 00:23:17.040
And I just really wanted to show this horrible example of code.


00:23:17.040 --> 00:23:21.160
And there's a data class


00:23:21.160 --> 00:23:23.160
that is called literally


00:23:23.160 --> 00:23:26.440
and it has a variable, anything


00:23:26.440 --> 00:23:29.800
with the type is a tuple


00:23:29.800 --> 00:23:31.200
with two strings in it


00:23:31.200 --> 00:23:33.320
saying can go in here.


00:23:33.320 --> 00:23:37.640
And we've got other variables with like lambdas expressions as types


00:23:37.640 --> 00:23:46.780
And also I tried this, you have to put from future import annotations in your file, but then


00:23:46.780 --> 00:23:53.440
you can put all sorts of horrible things in there. It doesn't even have, these symbols don't even have to be anywhere in your file.


00:23:53.440 --> 00:23:56.080
As long as it parses, it works fine.


00:23:56.080 --> 00:24:00.080
For example, the first type is a tuple.


00:24:00.080 --> 00:24:06.040
It's not saying the type is tuple, it just is a tuple, like parenthesis, string, comma, string.


00:24:06.040 --> 00:24:11.160
The second one is a lambda where the type value would go and so on.


00:24:11.160 --> 00:24:13.160
And it's not even a valid lambda.


00:24:13.160 --> 00:24:14.360
Well, I guess it is.


00:24:14.360 --> 00:24:15.560
You can have a lambda.


00:24:15.560 --> 00:24:17.560
A parameterless lambda.


00:24:17.560 --> 00:24:19.560
That only returns a string.


00:24:19.560 --> 00:24:25.440
How about not as an expression for a type?


00:24:25.440 --> 00:24:30.520
Not even dot evaluate is apparently a valid type.


00:24:30.520 --> 00:24:32.680
And then the last one is just awful.


00:24:32.680 --> 00:24:38.520
just dot has as a two equals B as the parameter to has


00:24:38.520 --> 00:24:42.040
and multiplied by syntactically bracket valid.


00:24:42.040 --> 00:24:44.080
These are, this is a nightmare,


00:24:44.080 --> 00:24:46.640
but it parses fine.


00:24:46.640 --> 00:24:49.880
>> Crazy. Yeah, your editor might not like it.


00:24:49.880 --> 00:24:51.160
mypy might not like it.


00:24:51.160 --> 00:24:52.120
>> Yeah.


00:24:52.120 --> 00:24:53.200
>> Wow.


00:24:53.200 --> 00:24:58.600
>> But there is some discussion of things that might be useful about this.


00:24:58.600 --> 00:25:02.600
Like if you're really not using data type annotations,


00:25:02.600 --> 00:25:04.440
but you want to use data classes,


00:25:04.440 --> 00:25:08.000
you perhaps want to put some strings in there as the type


00:25:08.000 --> 00:25:12.320
to declare as a comment for what the thing is instead of,


00:25:12.320 --> 00:25:14.640
I don't know, this is bad advice.


00:25:14.640 --> 00:25:16.680
Don't follow this, but it's fun.


00:25:16.680 --> 00:25:22.520
>> It does break some conceptions that people might have about data classes.


00:25:22.520 --> 00:25:25.440
Unlike, say, Pydantic where this stuff matters.


00:25:25.440 --> 00:25:28.000
They're like data classes, but apparently validated.


00:25:28.000 --> 00:25:31.880
>> Yeah. Apparently, this was apparently popular


00:25:31.880 --> 00:25:56.760
or enough, this was written last year. And if you want to try to do something similar to data classes, where you are similar to adders, where you have like a trip or something, apparently, there's this other you can say a typeless, a typeless data class. And you can just say it's a field and and get around it. And this is a this is available in a API package.


00:25:56.760 --> 00:25:59.760
Okay, cool. typeless data classes fun.


00:26:01.840 --> 00:26:04.640
All right, well, is that all of our topics, Brian?


00:26:04.640 --> 00:26:06.220
- I think it is.


00:26:06.220 --> 00:26:08.000
I don't have any extras either.


00:26:08.000 --> 00:26:09.400
Do you have any extras for us?


00:26:09.400 --> 00:26:11.240
- I have two.


00:26:11.240 --> 00:26:12.920
Let's see what have I got going on here.


00:26:12.920 --> 00:26:16.160
So my notes in the show, share notes,


00:26:16.160 --> 00:26:19.320
my comment is the LastPass story just keeps getting worse.


00:26:19.320 --> 00:26:21.120
What I have on the screen here, what I linked to,


00:26:21.120 --> 00:26:23.760
does not fully communicate the degree


00:26:23.760 --> 00:26:25.160
to which it has gotten worse.


00:26:25.160 --> 00:26:26.720
So keep that in mind.


00:26:26.720 --> 00:26:30.200
With LastPass, it turns out that someone, guess what,


00:26:30.200 --> 00:26:33.000
broke into the GitHub repository of a developer


00:26:33.000 --> 00:26:34.660
sometime last year, like November.


00:26:34.660 --> 00:26:37.160
They then used that access to further their access


00:26:37.160 --> 00:26:39.580
and eventually got the ability to copy


00:26:39.580 --> 00:26:44.580
every single customer's user's last pass encrypted vault,


00:26:44.580 --> 00:26:48.720
which sounds terrifying, shouldn't be, but it does,


00:26:48.720 --> 00:26:51.380
because that's theoretically encrypted


00:26:51.380 --> 00:26:55.260
with your big, long, not reused password.


00:26:55.260 --> 00:26:57.220
That's a big if, but it should be, right?


00:26:57.220 --> 00:26:59.600
And then it probably should have some kind


00:26:59.600 --> 00:27:02.360
of secret key type of thing like one password.


00:27:02.360 --> 00:27:05.160
So even if my password was the letter A for one password,


00:27:05.160 --> 00:27:07.200
it's still 27 characters


00:27:07.200 --> 00:27:08.820
for the person of this perspective.


00:27:08.820 --> 00:27:10.840
LastPass doesn't have that, it's just the letter A.


00:27:10.840 --> 00:27:12.560
So that's not ideal.


00:27:12.560 --> 00:27:14.040
There's some posts like, oh, well, don't worry,


00:27:14.040 --> 00:27:16.160
it's gonna take like 100 years to decrypt this.


00:27:16.160 --> 00:27:18.120
If, if, big if,


00:27:18.120 --> 00:27:20.440
that would be if they had the latest settings,


00:27:20.440 --> 00:27:23.440
which are like if I just created a new account


00:27:23.440 --> 00:27:27.180
and it used like 100,000 iterations of folding the password


00:27:27.180 --> 00:27:29.920
and other things about how long the password has to be.


00:27:29.920 --> 00:27:32.220
But here's the getting worse part.


00:27:32.220 --> 00:27:35.300
The older versions didn't enforce that.


00:27:35.300 --> 00:27:37.420
And they didn't use password folding.


00:27:37.420 --> 00:27:39.740
Instead of using 100,000 or a million iterations,


00:27:39.740 --> 00:27:40.740
they used one.


00:27:40.740 --> 00:27:43.460
So instead of taking 100 years or whatever it is


00:27:43.460 --> 00:27:47.700
to decrypt it with a regular sort of cracking GPU system,


00:27:47.700 --> 00:27:50.140
it takes about 25 seconds to crack the password.


00:27:50.140 --> 00:27:54.020
And those passwords are versioned and changed in this way


00:27:54.020 --> 00:27:56.340
depending on when you last used them over time.


00:27:56.340 --> 00:27:58.120
So if you create a password 10 years ago,


00:27:58.120 --> 00:28:00.840
but then change the settings, I don't think it goes back.


00:28:00.840 --> 00:28:02.980
Not a hundred percent sure, but I think it's still,


00:28:02.980 --> 00:28:05.400
you can have historical older passwords in your vault


00:28:05.400 --> 00:28:06.540
that are like that.


00:28:06.540 --> 00:28:10.120
On top of that, it turns out that things like the URL


00:28:10.120 --> 00:28:11.880
of where that password belongs to,


00:28:11.880 --> 00:28:14.840
and your email address were stored in plain text.


00:28:14.840 --> 00:28:18.080
Not true with Bitwarden, not true with 1Password,


00:28:18.080 --> 00:28:20.680
but with LastPass, stored in plain text.


00:28:20.680 --> 00:28:22.920
Well, it's not plain text, it's base64 encoded,


00:28:22.920 --> 00:28:24.520
but we all know what that means.


00:28:25.720 --> 00:28:28.120
just not readable by humans, but that's plain text.


00:28:28.120 --> 00:28:30.100
So, and when was it last accessed?


00:28:30.100 --> 00:28:30.940
So you can do things like,


00:28:30.940 --> 00:28:32.200
I wanna go to the vault and see


00:28:32.200 --> 00:28:34.760
who has accessed some shady site.


00:28:34.760 --> 00:28:37.000
Like, who has accessed Tinder,


00:28:37.000 --> 00:28:38.420
but also seems to be married?


00:28:38.420 --> 00:28:39.640
Can I blackmail that person


00:28:39.640 --> 00:28:41.240
without even figuring out what their password is?


00:28:41.240 --> 00:28:43.200
Just say, look, that's a little shady.


00:28:43.200 --> 00:28:45.240
I'm gonna tell your wife about your Tinder account.


00:28:45.240 --> 00:28:47.960
You know, so I mean, there's all sorts of really bad things.


00:28:47.960 --> 00:28:50.680
Plus, I can see that some of those passwords


00:28:50.680 --> 00:28:55.260
are going to my bank with a password folding of one


00:28:55.260 --> 00:28:57.700
500 or 5,000, which I can just break straight away.


00:28:57.700 --> 00:29:02.680
So you can use the unencrypted bits to target which ones you want to go after.


00:29:02.680 --> 00:29:03.540
It's really bad.


00:29:03.540 --> 00:29:07.360
So just PSA, if you use last pass, change your passwords.


00:29:07.360 --> 00:29:08.100
Yeah.


00:29:08.100 --> 00:29:09.060
Period.


00:29:09.060 --> 00:29:13.620
Cause cause this is out there and it's in plain text, except for the password.


00:29:13.620 --> 00:29:14.620
Not ideal.


00:29:14.620 --> 00:29:15.820
Okay.


00:29:15.820 --> 00:29:18.000
So, anyway, it's, I figured that was bad enough.


00:29:18.000 --> 00:29:21.080
I wanted to kind of point out, I know.


00:29:21.080 --> 00:29:22.360
Cause a lot of people are like, don't worry.


00:29:22.360 --> 00:29:23.120
It's super encrypted.


00:29:23.120 --> 00:29:24.980
Like sometimes.


00:29:24.980 --> 00:29:29.140
Yeah, but who would actually do it for 25 seconds?


00:29:29.140 --> 00:29:31.340
I know, come on. I mean, if it just said,


00:29:31.340 --> 00:29:33.740
you know, like, Bank of America account,


00:29:33.740 --> 00:29:36.380
dot com slash logon, I don't know.


00:29:36.380 --> 00:29:38.380
Is that worth 25 seconds? Probably.


00:29:38.380 --> 00:29:40.380
I mean, banks are like kind of a unique case


00:29:40.380 --> 00:29:42.380
because they often have like a 2FA or, you know,


00:29:42.380 --> 00:29:43.880
what's your cat's


00:29:43.880 --> 00:29:46.580
favorite toy's name or whatever, you got to answer.


00:29:46.580 --> 00:29:48.180
But like, there's many places


00:29:48.180 --> 00:29:50.880
that don't have like some kind of second check like that.


00:29:50.880 --> 00:29:53.380
And my bank even has the feature of


00:29:53.380 --> 00:29:56.740
Even if I tell them to remember my device, they won't.


00:29:56.740 --> 00:29:59.380
So I have to 2FA every single time.


00:29:59.380 --> 00:30:01.140
I know, it drives me nuts.


00:30:01.140 --> 00:30:02.660
It drives me nuts.


00:30:02.660 --> 00:30:03.160
All right.


00:30:03.160 --> 00:30:08.100
The other thing is I woke up this morning with a couple thousand dollars.


00:30:08.100 --> 00:30:11.380
And unfortunately, by the time of the recording, I no longer have that money.


00:30:11.380 --> 00:30:14.020
But I have a new Mac mini coming, Brian.


00:30:14.020 --> 00:30:15.380
I want one of these.


00:30:15.380 --> 00:30:22.660
They just announced a new Mac mini M2 Pro and the new MacBook Air Pros and Maxes and all that.


00:30:22.660 --> 00:30:23.940
So we've been waiting.


00:30:23.940 --> 00:30:25.400
It says 600 bucks.


00:30:25.400 --> 00:30:27.340
How, where, where are you down 2000?


00:30:27.340 --> 00:30:27.860
Wow.


00:30:27.860 --> 00:30:28.500
Let us go.


00:30:28.500 --> 00:30:30.740
Let us go on, on the pass.


00:30:30.740 --> 00:30:35.460
So 600 bucks is the M2 version, which is basically the upgrade of what I have now,


00:30:35.460 --> 00:30:36.240
which is awesome.


00:30:36.240 --> 00:30:41.440
But what I want is the M2 pro for all the video editing, which is like 1300 to start.


00:30:41.440 --> 00:30:46.240
But then you're like, you know, I really could use a little more, a little more


00:30:46.240 --> 00:30:51.040
Ram and now it's that, then all the video and podcast stuff, I need some more storage.


00:30:51.040 --> 00:30:53.840
and all of a sudden it's like, "Oh, I'll just sell my car. I'll get a Mini."


00:30:53.840 --> 00:30:55.040
That'll be cool.


00:30:55.040 --> 00:30:57.040
But anyway, I'm very excited about this coming out.


00:30:57.040 --> 00:30:59.440
A lot of people know what I think when I get it, but I'm sure it'll be lovely.


00:30:59.440 --> 00:31:02.240
>> Hmm, Cooper Mini or Mac Mini, they're about the same price.


00:31:02.240 --> 00:31:03.040
>> Exactly.


00:31:03.040 --> 00:31:04.880
[LAUGHTER]


00:31:04.880 --> 00:31:07.280
One's made in Cupertino by Apple.


00:31:07.280 --> 00:31:11.760
The other one is Cooper made by BMW in London or England somewhere.


00:31:11.760 --> 00:31:13.520
All right. That's it for extras, though.


00:31:13.520 --> 00:31:14.960
I got some jokes, if you want a joke.


00:31:14.960 --> 00:31:16.400
>> Yeah, let's do something funny.


00:31:16.400 --> 00:31:18.000
>> Yeah. All right.


00:31:18.000 --> 00:31:20.320
So this one's about debugging.


00:31:20.320 --> 00:31:25.120
And have you ever done like, I've got a section and I need a break point here,


00:31:25.120 --> 00:31:28.780
but there's not a great way to put the break point there.


00:31:28.780 --> 00:31:33.880
Or, or you might say, I would say if you know, user equals such and such, or


00:31:33.880 --> 00:31:37.320
this value is in the range of what I expected, then I want it to break.


00:31:37.320 --> 00:31:40.420
So you might say, if something created just a variable set of


00:31:40.420 --> 00:31:41.640
value and give it a break point.


00:31:41.640 --> 00:31:45.000
Well, this is kind of about the, the philosophical wonderings


00:31:45.000 --> 00:31:47.200
of this situation here.


00:31:47.200 --> 00:31:50.700
So there's a variable, it just says var a equals zero,


00:31:50.700 --> 00:31:52.580
JavaScript, I guess, or it could be C#.


00:31:52.580 --> 00:31:53.720
But it has a little squiggly,


00:31:53.720 --> 00:31:56.660
which is clearly like unused variable, right?


00:31:56.660 --> 00:31:57.440
>> Yes.


00:31:57.440 --> 00:31:59.720
>> The variable asks, "Dear programmer,


00:31:59.720 --> 00:32:01.080
what is my purpose?"


00:32:01.080 --> 00:32:02.880
Then the programmer says,


00:32:02.880 --> 00:32:07.000
"You're a dummy variable to place a breakpoint on."


00:32:07.000 --> 00:32:07.960
Oh my God.


00:32:07.960 --> 00:32:10.560
>> [LAUGHTER]


00:32:10.560 --> 00:32:11.360
>> Isn't that amazing?


00:32:11.360 --> 00:32:12.240
>> That's pretty funny.


00:32:12.240 --> 00:32:16.800
>> Yeah. The existential despair of the dummy variable.


00:32:16.800 --> 00:32:18.880
>> But it's short-lived,


00:32:18.880 --> 00:32:20.760
but it can be quite helpful and loved.


00:32:20.760 --> 00:32:23.260
Don't let it get you down, dummy variable.


00:32:23.260 --> 00:32:26.620
>> Yeah. Or it could have been used once before,


00:32:26.620 --> 00:32:28.400
and then somebody refactored the code and


00:32:28.400 --> 00:32:30.460
forgot to delete the declaration.


00:32:30.460 --> 00:32:32.760
>> Exactly. Then you live a long time.


00:32:32.760 --> 00:32:33.160
>> Yeah.


00:32:33.160 --> 00:32:34.040
>> All right. Well, that's it.


00:32:34.040 --> 00:32:35.420
>> All right. That was funny.


00:32:35.420 --> 00:32:38.160
Thanks a lot, and thanks for joining me again today,


00:32:38.160 --> 00:32:41.780
and thanks of course to Microsoft Founders Hub to sponsor us.


00:32:41.780 --> 00:32:43.640
>> You bet. Thanks everyone for listening.

