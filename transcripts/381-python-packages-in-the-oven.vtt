WEBVTT

00:00:00.000 --> 00:00:05.440
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05.440 --> 00:00:11.600
This is episode 381 recorded April 30th, 2024. And I am Brian Okken.

00:00:11.600 --> 00:00:12.960
And I'm Michael Kennedy.

00:00:12.960 --> 00:00:17.920
And this episode is brought to you by Scout APM. Listen to their spot later in the show

00:00:17.920 --> 00:00:24.160
and connect with your hosts if you'd like to. We're @mkennedy, @brianokken and at pythonbytes,

00:00:24.160 --> 00:00:30.880
all@foss.org. Connect with us on mastodon. And if you are listening and would like to join us live

00:00:30.880 --> 00:00:37.200
sometime to be part of the audience, you can go to pythonbytes.fm/live and check that out. And

00:00:37.200 --> 00:00:42.320
while you're there, while you're at pythonbytes.fm, go ahead and sign up for the friends of the show

00:00:42.320 --> 00:00:47.360
list. And that way you will get an email announcement after we have the everything

00:00:47.360 --> 00:00:51.680
all polished up and put up online. So what you got for us first, Michael?

00:00:51.680 --> 00:00:56.320
Well, first I have a new audio setup because I'm traveling this week and I had a much nicer setup,

00:00:56.320 --> 00:01:02.640
Brian, until these guys, these construction guys dropped in and, started causing a ruckus.

00:01:02.640 --> 00:01:04.960
Can you describe the ruckus? I don't hear any ruckus.

00:01:04.960 --> 00:01:07.520
Little breakfast club.

00:01:07.520 --> 00:01:13.280
Uh, yeah, I'm on the East coast this week, visiting my dad and, there's a ruckus. So

00:01:13.280 --> 00:01:17.680
I'm in a slightly different setup. It's a little echoey. So forgive me folks for the echo.

00:01:17.680 --> 00:01:19.360
I'll be back to the studio next week.

00:01:19.360 --> 00:01:20.880
Connecting with Michael in the field.

00:01:21.520 --> 00:01:25.120
That's right. Reporting from the field. I did see a wild Turkey over there and there've been

00:01:25.120 --> 00:01:28.960
a couple of squirrels, a baby squirrels were playing. So it's a very exciting, but not as

00:01:28.960 --> 00:01:36.240
exciting as py2wasm, a Python to Wasm WebAssembly compiler. Now, Brian, it would be entirely

00:01:36.240 --> 00:01:43.360
reasonable to ask or to point out that there is already a Wasm version of CPython. So why would

00:01:43.360 --> 00:01:48.320
it be exciting? More exciting than baby squirrels? Well, let's see. So really it's about performance.

00:01:48.320 --> 00:01:56.160
This comes from a company called Wasmer. They make Wasmer edge. Don't fully understand Wasmer edge.

00:01:56.160 --> 00:02:00.320
I'll talk about it for a second in a minute, but they basically have like cloud computing,

00:02:00.320 --> 00:02:06.800
but what you deliver are WebAssembly things to run rather than full native code to run.

00:02:06.800 --> 00:02:13.040
So they can do them closer to the edge, like CDN and points, things like that. But regardless

00:02:13.040 --> 00:02:18.720
of how you run it, they've come up with this thing called py2wasm. And so you can take your

00:02:18.720 --> 00:02:25.120
code and compile it to this. And it's not quite as fast as true native CPython. But what I didn't

00:02:25.120 --> 00:02:32.800
realize that the CPython Wasm is like one fifth as fast as native Python. Okay. So this is three

00:02:32.800 --> 00:02:38.080
times faster than the alternatives if you're going to do anything WebAssembly. So that's pretty cool.

00:02:38.080 --> 00:02:43.840
And that makes it maybe two thirds, the speed of truly native Python rather than compiling C to

00:02:43.840 --> 00:02:48.080
WebAssembly and interpret it in a JavaScript runtime, which I guess I understand why that's

00:02:48.080 --> 00:02:53.440
slower. Yeah. Right. So pretty interesting. You just pip install py2wasm and then you just

00:02:53.440 --> 00:02:59.600
py2wasm your program and you output your .wasm. And actually that, I mean, you can run it in

00:02:59.600 --> 00:03:04.320
Wasmer, but it also kind of just opens up the possibility to run interesting things on the web

00:03:04.320 --> 00:03:09.920
and web-based platforms in general. Right. That's pretty, pretty easy workflow. Yeah. It doesn't

00:03:09.920 --> 00:03:14.720
look too bad. And, and the pip install one is one time, right? Like you get that set up, good to go.

00:03:14.720 --> 00:03:22.320
Now this is actually based on Nutka. Am I saying that right? Nutka, I believe is the, the way the

00:03:22.320 --> 00:03:30.320
Python compiler. And so that's both awesome, but also has an effect. And the effect is that Nutka,

00:03:30.320 --> 00:03:35.840
but why I'm saying that's close, right? Only supports 3.11 so far. And so your code will

00:03:35.840 --> 00:03:41.840
only work on Python 3.11, but honestly, these days, 3.11, 3.12, they're real similar, right?

00:03:41.840 --> 00:03:46.960
There's not a lot of features that we go, I can't use it. Can't use 3.11 these days, right? That's

00:03:46.960 --> 00:03:51.280
kind of as mainstream as you get. Most, most people that have a lot of really hard requirements

00:03:51.280 --> 00:03:57.440
for stability are a step behind anyway. Right. Yeah. Yeah. And yeah, not, not to dis anybody

00:03:57.440 --> 00:04:02.800
that worked on 3.12. 3.12 is awesome, but yeah. Oh no. I mean, when we have 3.13, 3.12 will be

00:04:02.800 --> 00:04:06.400
kind of like the mainstream one, right? Not, not, not saying nothing's wrong. Nothing's wrong with

00:04:06.400 --> 00:04:10.480
that. It's just a lot of people stick one version behind. That's all. Yeah. That's pretty neat.

00:04:10.480 --> 00:04:17.040
Absolutely. I'm excited to try that for something. Yeah. There's a bunch of, I exactly.

00:04:17.040 --> 00:04:22.400
So it's awesome. I'm, I so want a front end framework to be based on PyScript and the

00:04:22.400 --> 00:04:27.120
MicroPython runtime and all of that, but we don't have that yet. And so until we do, I don't have a

00:04:27.120 --> 00:04:31.520
huge use case. I mean, in the data science world, there's a lot of, there's a lot of reasons for

00:04:31.520 --> 00:04:36.720
like, Hey, can we push the compute for this computationally expensive thing to the browsers

00:04:36.720 --> 00:04:41.680
so that we don't have we don't have to pay all the cloud computing costs. Just like let them

00:04:41.680 --> 00:04:48.320
download, oxidize, oxide and run it locally. Right. That would be awesome. But if you're not doing

00:04:48.320 --> 00:04:53.120
that now, if we can have front end framework in Python, I'd be all about it. Well, just one thing

00:04:53.120 --> 00:04:57.920
to wrap up this article here that analysis this, they also talk about like, well, how could you

00:04:57.920 --> 00:05:01.760
get Python into WebAssembly? There are ways to do it. There's ways to make it faster. You could

00:05:01.760 --> 00:05:06.080
use a subset of Python. You could use a JIT. You could use static analysis, et cetera, et cetera.

00:05:06.080 --> 00:05:12.240
So they talk about using Cython, R Python. Have you heard of R Python? Transforms typed code into

00:05:12.240 --> 00:05:17.120
C and then compiles it with a normal C compiler. Okay. I didn't know. I didn't know that, but

00:05:17.120 --> 00:05:22.000
yeah, you just say R Python, hello, world.py and boom, there's a binary executable. That's

00:05:22.000 --> 00:05:27.280
actually kind of interesting. Okay. And then some other options you could do Python JIT,

00:05:27.280 --> 00:05:34.720
PyPy, PYPY is probably the most common one of those. And you can do static analysis with mypyc.

00:05:34.720 --> 00:05:39.920
And finally, the one that they chose was Nuke, Nuike, that one. Right. And then they talk about

00:05:39.920 --> 00:05:44.000
how they use it here. So people want to dig deeper. There's a lot more to go here, but I think

00:05:44.000 --> 00:05:49.040
that's enough for introducing the idea. Yeah. And I do appreciate that they talked about their

00:05:49.040 --> 00:05:53.840
trade-offs and why they picked one over the other and stuff. Yeah, exactly. Pretty neat.

00:05:53.840 --> 00:05:58.880
Pretty neat as well. All right. Over to you. Well, I want to talk a little bit about where

00:05:58.880 --> 00:06:05.440
you get packages from. So normally I take a look at pypi.org to look for stuff and that's kind of

00:06:05.440 --> 00:06:09.760
where stuff's coming from. And unless you have a local repo, if you do pip install, it's coming

00:06:09.760 --> 00:06:17.760
from PyPI. And, but the, or local or your company or something like that. But in the end, this is

00:06:17.760 --> 00:06:23.200
the place that we, we shove all the stuff that people share. And you can browse things like I

00:06:23.200 --> 00:06:28.960
picked one of mine, pytestCheck. And you can, you get, it's pretty quick. You can see a bunch of

00:06:28.960 --> 00:06:33.920
stuff about it. Well, the maintainers, some of the meta. And the reason why I'm covering this is

00:06:33.920 --> 00:06:39.360
because that's, that's kind of what you get with, with PyPI, this browse feature. But there's a

00:06:39.360 --> 00:06:46.800
couple other options that I wasn't aware of. And I'm pretty excited about Oven. So both Oven and

00:06:47.440 --> 00:06:53.040
what's the other one? PyPI browser. So, so let's take a look at Oven. So I just learned about this

00:06:53.040 --> 00:07:00.560
recently. It's from Frostming and a really slick interface. And when you, when you search for

00:07:00.560 --> 00:07:06.960
something here, you get, you get like something similar to what you see on PyPI. But there's some,

00:07:06.960 --> 00:07:11.600
some meta information on the left and you've got there with the readme documentation on the right,

00:07:11.600 --> 00:07:17.680
the description. But there's also, this is kind of fun. It's got the authors is blank. I wonder

00:07:17.680 --> 00:07:23.360
what I'm doing wrong here. But anyway, it says how to install it in case you didn't know, like

00:07:23.360 --> 00:07:30.320
pip install, PDM, Rai and poetry instructions for how to install something kind of fun. The,

00:07:30.320 --> 00:07:35.680
the thing that I really enjoy is some of the extra stuff that it's adding is, so some of the extra

00:07:35.680 --> 00:07:40.640
stuff is a really great browser for what great look at what the versions. So this is a really

00:07:40.640 --> 00:07:48.000
clean old version interface and how old they are. And then the file browser is kind of amazing. So

00:07:48.000 --> 00:07:53.600
you've got both wheels. So I'm, I'm distributing both a wheel and a tarball. And within the wheel,

00:07:53.600 --> 00:07:59.600
you can check to see, you can just see all the files in here. Oh, you can even look inside

00:07:59.600 --> 00:08:05.360
individual files. This is pretty amazing to be able to inspect, inspect what, what you're getting

00:08:05.360 --> 00:08:10.960
with your wheel before you even try to install it. So it's cool. And it's really for people who

00:08:10.960 --> 00:08:16.160
are not pulling this up while they're listening. It looks very much like the source view, the code

00:08:16.160 --> 00:08:21.760
view and GitHub actually, but based directly on the wheel. Yeah, it's pretty great. And then even,

00:08:21.760 --> 00:08:28.400
so even the, the tarball pulls things apart and you can see, see what's in there through,

00:08:28.400 --> 00:08:32.960
through the tarball. This is pretty amazing. All the meta, all the meta data, and then just

00:08:32.960 --> 00:08:37.440
everything you can just completely view it without even installing it or downloading it or anything.

00:08:37.440 --> 00:08:44.640
So pretty awesome to look at different, different things here. The, it is open source. It is based

00:08:44.640 --> 00:08:52.880
on I think it's JavaScript. I think JS, JavaScript and something called Remix, which I'm not familiar

00:08:52.880 --> 00:08:59.440
with, but pretty new project, but pretty exciting. I'm, I think this is gorgeous and helpful to the

00:08:59.440 --> 00:09:07.520
community. The, and then the, I think I saw this on the announcement for Oven was comparing it to

00:09:07.520 --> 00:09:12.480
also PyPI browser. And I'm like, I didn't know about that. So let's take a look at PyPI browser.

00:09:12.480 --> 00:09:20.560
So PyPI browser, pypi.browser.org also has you can search for packages. And this is not trying

00:09:20.560 --> 00:09:26.400
to replace the PyPI interface too much. It's just so you can take a look at wheels. So being able

00:09:26.400 --> 00:09:32.240
to look at the metadata and the package content within, Oh, wow. You can just like see all this

00:09:32.240 --> 00:09:37.680
stuff. So yeah, PyPI browser allows you to go in and look at all the code, but there's a little

00:09:37.680 --> 00:09:43.680
more clicking around to, to be able to, to see everything. So that's why I think that's one of

00:09:43.680 --> 00:09:49.760
the, the the reasons for the Oven is to try to maybe clean up this interface a little bit, but

00:09:49.760 --> 00:09:55.840
still, this is pretty cool. And then one of the neat things about PyPI browser is that it is

00:09:55.840 --> 00:10:00.640
based it's written in Python. It's open source. Both are open source, but this one's written in

00:10:00.640 --> 00:10:07.520
Python on Starlet. So it's a Starlette app. And and it even says that one of the benefits of this is

00:10:07.520 --> 00:10:14.960
you can use it as, as a browser for a private PyPI registry at your company or an internal registry.

00:10:14.960 --> 00:10:20.080
So that's pretty cool. So I don't know what the difference is with try to between trying to

00:10:20.080 --> 00:10:26.560
install this versus other things, but anyway, a couple of neat ways to browse Python packages.

00:10:26.560 --> 00:10:31.280
Yeah, both are new to me and very interesting. I like Oven a lot. It looks real good.

00:10:31.280 --> 00:10:36.000
Yeah. The, the, the interface is just gorgeous. Of course, of course, this is mostly the image

00:10:36.000 --> 00:10:42.160
is neat, but it looks nice. It says Oven to bake pies. No, not to bake pies, to explore Python

00:10:42.160 --> 00:10:48.320
packages. And, and for a while I was like, what's going on? What, I don't get the, the joke. I, I

00:10:48.320 --> 00:10:53.360
honestly, I didn't get the joke for a few minutes and then it's the pies in the oven. I get it now.

00:10:53.360 --> 00:11:01.360
Yeah. Very nice. A little slow sometimes. So do you know what's not slow? Scout APM.

00:11:01.360 --> 00:11:07.200
Let me tell you real quick about Scout APM. They're big supporters of Python Bytes. So we

00:11:07.200 --> 00:11:13.040
appreciate that very much. So if you are tired of spending hours trying to find the root cause of

00:11:13.040 --> 00:11:18.240
issues impacting your performance, then you owe it to yourself to check out Scout APM. They're a

00:11:18.240 --> 00:11:24.000
leading Python application performance monitoring tool, APM, that helps you identify and solve

00:11:24.000 --> 00:11:29.840
performance abnormalities faster and easier. Scout APM ties bottlenecks such as memory leaks,

00:11:29.840 --> 00:11:34.960
slow database queries, background jobs, and the dreaded N plus one queries that you can end up if

00:11:34.960 --> 00:11:40.480
you do lazy loading in your ORM. And then you say, Oh no, why is it so slow? Why are you doing 200

00:11:40.480 --> 00:11:44.160
database queries for what should be one? So you can find out things like that. And it links it

00:11:44.160 --> 00:11:49.200
back directly to the source code. So you can spend less time in the debugger and healing logs and

00:11:49.200 --> 00:11:53.280
just finding the problems and moving on. And you'll love it because it's built for developers

00:11:53.280 --> 00:11:58.160
by developers. It makes it easy to get set up. Seriously. You can do it in less than four minutes.

00:11:58.160 --> 00:12:03.280
So that's awesome. And the best part is the pricing is straightforward. You only pay for

00:12:03.280 --> 00:12:09.680
the data that you use with no hidden overage fees or per seat pricing. And I just learned this,

00:12:09.680 --> 00:12:15.120
Brian. They also have, they provide the pro version for free to all open source projects.

00:12:15.120 --> 00:12:19.840
So if you're an open source maintainer and you want to have Scout APM for that project,

00:12:19.840 --> 00:12:23.680
just shoot them a message or something on their pricing page about that. So you can start your

00:12:23.680 --> 00:12:30.240
free trial and get instant insights today. Visit pythonbytes.fm/scout. The link is in your podcast

00:12:30.240 --> 00:12:35.360
player show notes as well. And please use that link. Don't just search for them because otherwise

00:12:35.360 --> 00:12:39.440
they don't think you came from us and then they'd stop supporting the show. So please use our link

00:12:39.440 --> 00:12:45.280
pythonbytes.fm/scout. Check them out. It really supports the show. Right. Thank you, Scout. Now

00:12:45.280 --> 00:12:52.800
on to the next thing, which is a freeze frame of Paul Everett in YouTube here doing an announcement.

00:12:52.800 --> 00:13:00.720
So I want to just give a quick shout out to this new, autocomplete code intelligence engine that's

00:13:00.720 --> 00:13:05.280
in PyCharm. People know I'm a big fan of PyCharm, right? I talk about it all the time. But if you

00:13:05.280 --> 00:13:13.200
have any of the pro tools, including PyCharm Pro, there's something that you've noticed. But if you

00:13:13.200 --> 00:13:17.280
haven't used it lately, you wouldn't notice, obviously. And they've added, you know, how

00:13:17.280 --> 00:13:23.200
people have, you know, Copilot and some of these other things that they can plug into their

00:13:23.200 --> 00:13:28.480
development tools, right? Yeah. Well, the way that works is it takes a section of your code or your

00:13:28.480 --> 00:13:32.640
code comment that you asked, instructed to do a thing and then a section of your code and it sends

00:13:32.640 --> 00:13:37.840
it off to the cloud and stuff happens. That send it off to the cloud. Some companies may frown upon

00:13:37.840 --> 00:13:44.400
it. I believe your company says, "Nein, du kannst nicht." You can't do it. You're not doing that.

00:13:44.400 --> 00:13:49.600
So being a German company, they say it that way. That's why I said that. So this is awesome because

00:13:49.600 --> 00:13:53.760
it's sort of like that, but that's probably the wrong mental model. But nonetheless, it's like

00:13:53.760 --> 00:14:00.000
totally local. So it comes as a plugin for PyCharm and others if you have the pro version,

00:14:00.000 --> 00:14:05.440
and it just lets you do like awesome code completion locally with no round tripping,

00:14:05.440 --> 00:14:10.400
just pretty neat. And I think it was on by default on the new PyCharm because why not?

00:14:10.400 --> 00:14:14.320
So I want to give you an example to give you a sense so people, otherwise it's just like,

00:14:14.320 --> 00:14:17.840
"Hey, this thing, it's neat. It helps you write code. What does that mean?" So here's a little

00:14:17.840 --> 00:14:26.640
bit of code I wrote. It's a Flask view endpoint and it's using Blueprint. So it says @blueprint.get/listing.

00:14:26.640 --> 00:14:32.080
It says a function deflisting, and then it wants to show some videos and some view. So this is all

00:14:32.080 --> 00:14:36.080
code existing. I'm trying to help people get a sense of where it starts. Videos equals some

00:14:36.080 --> 00:14:43.280
database query to get a list of video objects. Now, if you type the word R-E-T and attempt to

00:14:43.280 --> 00:14:48.800
begin to write return, do you know what tab will write for you with this hell out of them? Return

00:14:48.800 --> 00:14:57.680
Flask.renderTemplate(/home/listing.html) because there's a hierarchy of the templates and that is

00:14:57.680 --> 00:15:02.880
the correct one. And videos equals videos, close parentheses. Tab to write that.

00:15:02.880 --> 00:15:04.240
Yeah. That's amazing.

00:15:04.240 --> 00:15:09.360
You just do that all day. Just tab, tab, tab, tab. Sometimes it gets it wrong.

00:15:09.360 --> 00:15:13.760
And sometimes it's close enough. You tab it and correct it. And sometimes it gets it,

00:15:13.760 --> 00:15:17.040
actually, this is exactly what should be written, which is insane.

00:15:17.040 --> 00:15:21.280
And some pretty long, like Gary was showing, some pretty long stuff that I'm surprised by.

00:15:21.280 --> 00:15:24.560
Some short stuff I'm like, "Oh yeah, that's probably, that's right. Yeah, that's right."

00:15:24.560 --> 00:15:29.600
Yeah. Like, "Oh, we're going to sort the functions by most used rather than

00:15:29.600 --> 00:15:34.240
alphabetical only." And like something silly like that. Right? It's not that, it's way more than

00:15:34.240 --> 00:15:34.480
that.

00:15:34.480 --> 00:15:39.440
But there's been times now, I'm so loving this because there's times where I'm calling some

00:15:39.440 --> 00:15:45.440
API function and I'm just about to think, "Yeah, I don't use this very often. I have to look it up."

00:15:45.440 --> 00:15:49.840
And it just pops it in and it's correct. I'm like, "Oh yeah, that's exactly what I wanted."

00:15:49.840 --> 00:15:50.240
Thank you.

00:15:50.240 --> 00:15:57.840
Yeah. And I'm already getting used to it to the point where I can't live without it now. This is

00:15:57.840 --> 00:15:59.440
an incredible extra feature.

00:15:59.440 --> 00:16:03.200
It is. And where it frustrates me is where I'll type a little too much and it'll go away. I'm

00:16:03.200 --> 00:16:06.720
like, "No, I should have just accepted it. I didn't read. How do I get this back?"

00:16:06.720 --> 00:16:11.440
Yeah. I've actually started over. I'm like, "Okay, delete the line and start over because

00:16:11.440 --> 00:16:12.320
that's easier."

00:16:12.320 --> 00:16:14.960
It's going to be quicker than writing the rest of it. Absolutely.

00:16:14.960 --> 00:16:15.440
Yeah.

00:16:15.440 --> 00:16:21.520
So anyway, I know PyTorch Pro is a paid thing, but it's also one of the very most common tools.

00:16:21.520 --> 00:16:25.520
And this is not paid, but I think it's awesome. And so I just wanted to give a shout out for it

00:16:25.520 --> 00:16:30.080
because so many of these coding assistants do all this magic by sending all of your code to the

00:16:30.080 --> 00:16:34.400
cloud and they've got the cloud latency and all that. And this is just nice and local and sweet.

00:16:34.400 --> 00:16:39.280
Yeah. That's the part that I really... So yeah, I like that it's just easier. It fits in my

00:16:39.280 --> 00:16:46.400
workflow. But also, like you said, at work, we have local GPT kind of things that we can use

00:16:46.400 --> 00:16:52.240
that are company internal, which is a neat thing for people to do. But this is just local and it

00:16:52.240 --> 00:16:57.200
doesn't even go anywhere. So it's super fast. I can even have my laptop unplugged and this works.

00:16:57.200 --> 00:17:04.560
So it's pretty cool. Anyway, good job. Cool. Next up. So that's good news. We've got some

00:17:04.560 --> 00:17:11.600
bad news and I got this from lots of people. So a lot of people were talking about this on Mastodon.

00:17:11.600 --> 00:17:18.080
The news is that Google seems to be shedding Python developers, at least in the US. And

00:17:18.080 --> 00:17:27.520
there's a bunch of articles around it. So we've got Registry talked about it. The Registry had

00:17:30.000 --> 00:17:35.280
said Python and Flutter teams latest on the Google shopping block. Nevermind the record

00:17:35.280 --> 00:17:43.680
revenues cost must be cut. And I kind of like this article in that it highlighted that in

00:17:43.680 --> 00:17:51.360
this time where they're like laying off a lot of great people, last week they announced a one-year

00:17:51.360 --> 00:18:00.240
jump on net profits to 23.66 billion over for Q1. So record profits. I don't know if that's

00:18:00.240 --> 00:18:04.800
record profits, but really great profits. And yet that's not enough and they're cutting people.

00:18:04.800 --> 00:18:13.440
And I saw it all over Mastodon. TechCrunch has some highlights of different people posting,

00:18:13.440 --> 00:18:18.320
including from Thomas Wooders, who's one of the Python core people.

00:18:18.320 --> 00:18:20.240
He's on the steering council too as well.

00:18:20.240 --> 00:18:26.160
Oh yeah. And also Dart. So Google lays off staff from Flutter, Dart and Python teams.

00:18:26.160 --> 00:18:32.720
And there's no official announcement as far as I can tell from Google yet. It's just,

00:18:32.720 --> 00:18:36.560
since it was under a hundred people, they not announcing it.

00:18:36.560 --> 00:18:42.400
Basically leaked messages from team leaders to the teams and stuff like that is what we're seeing.

00:18:42.400 --> 00:18:52.000
Yeah. And I don't remember what article I saw this in and it'd be, oh, it's from the register.

00:18:52.000 --> 00:18:58.560
I think some of the teams have been reduced in favor of a new team based in Munich.

00:18:58.560 --> 00:19:05.760
And then I thought, I don't know if this is true or not. I heard somebody mentioned that

00:19:05.760 --> 00:19:09.920
some of the laid off people are getting or having to retrain, having to train their

00:19:09.920 --> 00:19:14.720
replacements, which is tacky and yicky. So hopefully that's not true.

00:19:14.720 --> 00:19:22.080
Anyway, I guess, I hope everything goes well for everybody that is part of this and hopefully

00:19:22.080 --> 00:19:25.120
they land on their feet well. So good luck.

00:19:25.120 --> 00:19:28.560
Yeah. Sorry, folks. Brian, it's like, they want to try to take out my entire tech stack.

00:19:28.560 --> 00:19:33.360
Python and then the mobile apps are Flutter and Dart. And I was like, oh, come on.

00:19:33.360 --> 00:19:38.400
I'm actually more worried about Flutter and Dart because Google is such a density to like,

00:19:38.400 --> 00:19:42.560
just kill stuff. You know, there's the Google graveyard and all that sort of

00:19:42.560 --> 00:19:47.040
things that you hear about. And they're the lead of Flutter and Dart, whereas

00:19:47.040 --> 00:19:49.760
they're not in charge of Python. It's just unfortunate.

00:19:49.760 --> 00:19:56.960
Yeah. Yeah. So yeah. You've used Flutter and Dart before for projects, right?

00:19:56.960 --> 00:20:00.800
Yeah. It's great. Yeah. So it's the talk Python courses, mobile app is built in.

00:20:00.800 --> 00:20:02.000
Yeah.

00:20:02.000 --> 00:20:06.720
I would build it in Python if we had solid options there, but sadly we're not there yet. Someday.

00:20:07.040 --> 00:20:07.520
Someday.

00:20:07.520 --> 00:20:09.120
All right.

00:20:09.120 --> 00:20:13.200
Before we call it on that, I have a quick follow up to this. It's part of this.

00:20:13.200 --> 00:20:13.680
Okay.

00:20:13.680 --> 00:20:17.920
This is not as timely, although it's an article from seven days ago.

00:20:17.920 --> 00:20:23.840
It talks about the history last couple of years and it's quite a long article. Let me look.

00:20:23.840 --> 00:20:32.320
Sorry. The original. There we go. That's what I'm like. The original one on where's your ed at,

00:20:32.320 --> 00:20:38.640
which is an awesome domain, but it's a really long write up and it's entitled the man who killed

00:20:38.640 --> 00:20:44.480
Google search. And basically it documents the struggle between the search team whose job is

00:20:44.480 --> 00:20:50.000
to build features that are better for you, better for me, better for everyone. And the ad team whose

00:20:50.000 --> 00:20:55.360
job is to make you do more queries. So more ads show up so that you might click them.

00:20:55.360 --> 00:20:59.840
Oh, so they called for a code yellow, which in Google parlance actually means a really bad thing.

00:20:59.840 --> 00:21:04.560
Like code red would probably be the way people would think of it. It says people are finding

00:21:04.560 --> 00:21:09.760
what they look for too quickly and leaving. So what can we do to like make them see more ads

00:21:09.760 --> 00:21:14.960
basically. And there was a big struggle for a couple of years. This all started in 2019,

00:21:14.960 --> 00:21:23.120
but it's basically the, the in crapification, if you will, the slightly nicer Cory doctor term

00:21:23.120 --> 00:21:26.560
of Google search. And if you've felt like over the last couple of years, Google search has gotten

00:21:26.560 --> 00:21:32.000
worse, it's intention purpose so that you will spend more time seeing ads and maybe clicking

00:21:32.000 --> 00:21:36.800
them. How about that? Well, yeah. So one of the things that people look at is your bounce rate.

00:21:36.800 --> 00:21:43.680
So I may get this wrong cause I'm not really a, like a stats wonk, but bounce rate I think is,

00:21:43.680 --> 00:21:48.960
I don't know what it is. It measures how, how many, how long people stay in on your site and

00:21:48.960 --> 00:21:53.600
look at different, what is it? How many pages they see look at before they leave or something.

00:21:53.600 --> 00:21:56.640
I think that's right. As you, you get to one page and you leave, you don't

00:21:56.640 --> 00:21:58.400
subsequently explore the page.

00:21:58.400 --> 00:22:05.440
Okay. So a lot of people don't want that. And I, I personally, I think for my like blog and stuff,

00:22:05.440 --> 00:22:10.720
anything I'm doing, I love a low bounce rate. That means that my, my analytics and whatever,

00:22:10.720 --> 00:22:15.200
or my Google search terms and all that are correct. And people can find exactly what

00:22:15.200 --> 00:22:18.880
they're looking for right away and they don't need to click around and find something else,

00:22:18.880 --> 00:22:22.240
but I'm not, I'm not like pushing ads. So yeah. Anyway.

00:22:22.240 --> 00:22:26.160
I have to read this. This is very interesting.

00:22:26.160 --> 00:22:31.520
It's super interesting. Yeah. I read it yesterday. It's really interesting and it's not inspiring,

00:22:31.520 --> 00:22:35.280
but it is interesting. And the reason I even brought it up, not just because the word Google

00:22:35.280 --> 00:22:41.280
appears in both, but the, the like, Hey, we don't care so much about the tech. We're not doing this

00:22:41.280 --> 00:22:45.520
to support the community. We need our cut. And what can we do to make that happen? It feels

00:22:45.520 --> 00:22:50.320
very much like the same vibe of it's motivating a lot of these layoffs and like, yeah, we don't

00:22:50.320 --> 00:22:53.920
really like how do we make money on ads from Flutter? I don't think we do. Can we get that

00:22:53.920 --> 00:22:57.280
out of here? Like these people are just dead weight, like that kind of thing. Right. And these

00:22:57.280 --> 00:23:02.000
a little less so for Python, but still. Also, but this is the, this isn't a

00:23:02.000 --> 00:23:05.280
struggling company. This is one of the most profitable companies in the world.

00:23:05.280 --> 00:23:09.280
I think they just became a $2 trillion stock market valuation.

00:23:09.280 --> 00:23:14.240
So like, it's not just, we need to make money, but we need to make more and always more and

00:23:14.240 --> 00:23:21.120
always more. Never enough. So anyway, it's too bad. Well, those are our topics. Do you,

00:23:21.120 --> 00:23:25.920
do you have anything extra since you're. I have really not very extra. I have one extra,

00:23:25.920 --> 00:23:33.680
one extra. This is good. Cool. So previously I've spoken about LM studio, and this is like,

00:23:33.680 --> 00:23:38.720
right in line with what I was talking about earlier, the local LLM. So download, discover,

00:23:38.720 --> 00:23:44.800
and run local LLMs. The way it works is you'd run this app. Then you tell it, you basically search

00:23:44.800 --> 00:23:50.000
hugging face models and they get rankings and all that kind of stuff. And then it just downloads a

00:23:50.000 --> 00:23:54.320
whole bunch of them. It gives you a chat interface. You can say, now I'm going to run Mistral. Now I

00:23:54.320 --> 00:23:59.440
want to run fine. Now I'm going to run whatever, right? You pick the ones you downloaded,

00:23:59.440 --> 00:24:05.760
different sizes, all sorts of things. Well, the big deal is LLAMA3, which is a very powerful,

00:24:05.760 --> 00:24:13.200
but not too big open source LLM for meta is now available locally on LM studio. And boy,

00:24:13.200 --> 00:24:18.880
oh boy, is it good. It's really good. So like, for example, I gave it a segment of a Docker

00:24:18.880 --> 00:24:26.480
compose file with concrete settings. I said, tell me what this does and tell me not just

00:24:26.480 --> 00:24:32.240
what do these mean, but exactly what does each command do? Like when it says restart,

00:24:32.240 --> 00:24:36.080
does it just, and it says restart five times until you consider it failed.

00:24:36.080 --> 00:24:40.880
They just try as fast as it can. Does it use, is there some kind of way to set a timeout? It's

00:24:40.880 --> 00:24:45.120
like, Oh no, no, it uses an exponential backoff and it works like this. And here's the formula

00:24:45.120 --> 00:24:51.040
to compute like pretty good running locally. I highly recommend. That's pretty cool. So that's

00:24:51.040 --> 00:24:56.560
my only extra. My one extra is just a public service announcement because I run into this

00:24:56.560 --> 00:25:02.320
all the time. I don't know. It's a basic Python thing, but this article, Oh, who's it from?

00:25:02.320 --> 00:25:09.280
I should give him his anyway, somebody, sorry. It's Python gotchas strip L strip and R strip

00:25:09.280 --> 00:25:13.920
can remove more than expected. And I do this all the time. I forget about it. So what else

00:25:13.920 --> 00:25:18.160
strip L strip and R strip do is they take a string and they strip characters out of it.

00:25:18.160 --> 00:25:23.760
And if you give it like a word, it doesn't take the word out. It takes, it's a, that's

00:25:23.760 --> 00:25:30.560
a set of characters that it removes. And that's not usually what I mean, but Python has what do

00:25:30.560 --> 00:25:36.160
they have? We have remove prefix and remove suffix that you want to use instead. So if you, if that's

00:25:36.160 --> 00:25:40.160
what you want to do, if you just want to remove something off the beginning of the, of a string

00:25:40.160 --> 00:25:46.080
use, remove suffix, remove prefix. And I bring this up because I always run into it. And, and

00:25:46.080 --> 00:25:51.040
then in, in my little test example, it works. And then I put it in a bigger project and it doesn't

00:25:51.040 --> 00:25:58.320
work. What's going on. So that's it. That's it. Yeah. Yeah. That's it. So anyway, if you could

00:25:58.320 --> 00:26:02.480
start over, I think it would be awesome that L strip and R strip and all those things could take

00:26:02.480 --> 00:26:07.200
two keyword arguments that were required as keyword. One is characters and another is

00:26:07.200 --> 00:26:12.800
substrings or something. You just say characters equal list or substring equals that or something.

00:26:12.800 --> 00:26:17.600
But you know, even changing keyword names, primary names is breaking because you can

00:26:17.600 --> 00:26:22.480
explicitly state them. So, well, yeah. And it's, it's a different interesting thing because

00:26:22.480 --> 00:26:28.720
strings are iterable. So like, because sometimes I really do want what it does. Like sometimes I

00:26:28.720 --> 00:26:34.960
want to take out the like the, the dashes out of a string or something like, yeah. Anyway. All right.

00:26:34.960 --> 00:26:40.240
Oh, let's see. Who's this from? This is Andrew Wagner, Andrew. So thanks Andrew. All right.

00:26:40.240 --> 00:26:44.480
Something funny. Oh, I got some funny today. I had a couple of funny. So let's start with

00:26:44.480 --> 00:26:50.160
the traditional style of money. So this comes to us from dev humor and both you and I work on

00:26:50.160 --> 00:26:56.320
courses, but a ton of energy and we don't charge that much money for them. But here's kind of a

00:26:56.320 --> 00:27:04.240
paradox or, or something. So this is the post that says developers will spend $150,000 on a

00:27:04.240 --> 00:27:08.720
computer science degree. Then they go and they go and learn JavaScript on YouTube for free.

00:27:09.360 --> 00:27:17.600
Pay 20 bucks for it. Yeah. Yeah. Like of course you get that too. Right. People say,

00:27:17.600 --> 00:27:21.360
and they're like, can I get it for cheaper? Yeah. And then I've been playing with pie joke,

00:27:21.360 --> 00:27:27.520
the actual Python API, not the CLI of it. And did you know that in pie joke, you can specify a

00:27:27.520 --> 00:27:31.920
category and one of the categories is Chuck Norris. So let me read you. I'm just going to get

00:27:31.920 --> 00:27:36.080
like five, five Chuck Norris programming jokes for you. Are you ready for this? This one is right,

00:27:36.080 --> 00:27:40.640
right down your alley. The first Chuck Norris is unit tests. Don't run. They die.

00:27:40.640 --> 00:27:48.560
Let me have a hit if you're good. Okay. This one's pretty good. Chuck Norris doesn't need to use Ajax

00:27:48.560 --> 00:27:52.960
for JavaScript postbacks. Chuck Norris doesn't need to use Ajax because pages are too afraid

00:27:52.960 --> 00:28:00.160
to post back anyway. Chuck Norris can dereference null. Okay. That's, that's my favorite so far.

00:28:01.600 --> 00:28:08.560
Hold on. Okay. Last one. Chuck Norris's programs never exit. They are terminated.

00:28:08.560 --> 00:28:15.280
Yeah. Okay. That's pretty good. Yeah. So anyway, if you pass the Chuck category to pie jokes,

00:28:15.280 --> 00:28:20.560
plural, not pie jokes, singular, pretty awesome. Those are those two different things. Well,

00:28:20.560 --> 00:28:27.840
oh yeah. One is like a expired version from 2014. Jokes has at least been updated in 2019.

00:28:27.840 --> 00:28:31.440
Okay. All right. Looking for contributors there, man.

00:28:31.440 --> 00:28:36.800
Exactly. Sure. We can get a few more of these. No one has ever paired program with Chuck Norris

00:28:36.800 --> 00:28:40.560
and live to tell the tale. We can tell the tale of the podcast, Brian.

00:28:40.560 --> 00:28:45.280
Yeah. Well, next week, are you back in town or?

00:28:45.280 --> 00:28:49.920
I am back in town. Everything is back to normal. So glad we'll-

00:28:49.920 --> 00:28:51.200
Talk to everybody next week.

00:28:51.200 --> 00:28:54.560
Yeah. I'm glad we're able to do the show anyway. So yeah. Yeah. Good to see you.

