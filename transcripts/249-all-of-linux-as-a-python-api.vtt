
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.360
to you by us over at TalkBython Training and Brian through his pytest book.


00:00:10.360 --> 00:00:15.460
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.460 --> 00:00:17.320
over at TalkBython Training.


00:00:17.320 --> 00:00:21.040
Visit them via pythonbytes.fm/courses.


00:00:21.040 --> 00:00:25.420
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.420 --> 00:00:28.440
at pythonbytes.fm/pytest.


00:00:28.440 --> 00:00:29.440
>> Enjoy the episode.


00:00:29.440 --> 00:00:31.000
>> Hello and welcome to Python Bytes,


00:00:31.000 --> 00:00:32.800
where we deliver news and headlines


00:00:32.800 --> 00:00:34.160
directly to your earbuds.


00:00:34.160 --> 00:00:36.680
This is episode 249,


00:00:36.680 --> 00:00:39.680
recorded September 8th, 2021.


00:00:39.680 --> 00:00:41.080
And I am Brian Okken.


00:00:41.080 --> 00:00:42.320
>> Hey, I'm Michael Kennedy.


00:00:42.320 --> 00:00:43.760
>> And I am Edith Christensen.


00:00:43.760 --> 00:00:45.720
>> Hey, Eric, thanks for joining us today.


00:00:45.720 --> 00:00:47.360
>> Yeah, thank you so much for having me.


00:00:47.360 --> 00:00:49.520
>> So tell us a little bit about who you are.


00:00:49.520 --> 00:00:52.360
>> So first of all, I'm a long-time listener to the show.


00:00:52.360 --> 00:00:53.560
I just told Michael,


00:00:53.560 --> 00:00:56.040
well, I'm listening since episode one of this podcast,


00:00:56.040 --> 00:00:56.880
actually.


00:00:56.880 --> 00:00:57.700
>> Wow.


00:00:57.700 --> 00:01:03.140
listening to Michael's podcast, obviously. And then once I get to know it, I started


00:01:03.140 --> 00:01:07.700
listening to your podcast as well. So basically everything that's out there, I'm listening.


00:01:07.700 --> 00:01:12.660
What I'm doing, I'm currently leading the competence center for AI and data science


00:01:12.660 --> 00:01:17.880
at Data Drivers, which is a consultancy firm from Hamburg, Germany. Our focus is mainly


00:01:17.880 --> 00:01:24.220
on building big data platforms and applications, mostly using cloud-native services. And we


00:01:24.220 --> 00:01:29.380
try to apply best DevOps and MLOps practices to wherever we are.


00:01:29.380 --> 00:01:30.380
That's super cool.


00:01:30.380 --> 00:01:32.900
Do you have a favorite cloud?


00:01:32.900 --> 00:01:35.100
In all honesty, probably Google cloud.


00:01:35.100 --> 00:01:36.100
Gotta say it.


00:01:36.100 --> 00:01:37.100
Yeah.


00:01:37.100 --> 00:01:38.100
Yeah.


00:01:38.100 --> 00:01:39.100
Nice.


00:01:39.100 --> 00:01:40.100
Well, Michael, why don't you kick us off with our first item?


00:01:40.100 --> 00:01:41.100
Yeah.


00:01:41.100 --> 00:01:42.100
This one's a little fickle.


00:01:42.100 --> 00:01:43.220
Comes to us from Ollie.


00:01:43.220 --> 00:01:44.220
He sent that in.


00:01:44.220 --> 00:01:45.340
Thank you, Ollie.


00:01:45.340 --> 00:01:50.440
And sort of indirectly from Patrick Gray over at Risky Business, which is a cool security


00:01:50.440 --> 00:01:51.440
focused podcast.


00:01:51.440 --> 00:01:52.940
Python supports security.


00:01:52.940 --> 00:01:54.180
they talk about it over there.


00:01:54.180 --> 00:01:58.860
So you've heard of Pickles, obviously, Pickling in Python.


00:01:58.860 --> 00:02:03.860
It's like, I wanna take this binary Python object graph


00:02:03.860 --> 00:02:06.160
and turn it into a blob that I can stash away


00:02:06.160 --> 00:02:07.620
and then later get it back.


00:02:07.620 --> 00:02:09.940
Sometimes it's real simple, stash it in Reddit


00:02:09.940 --> 00:02:13.220
and other systems can pull it out real quick as a cache,


00:02:13.220 --> 00:02:14.380
maybe save it to a file.


00:02:14.380 --> 00:02:16.380
But where it's become really popular


00:02:16.380 --> 00:02:18.200
as a means of data exchange


00:02:18.200 --> 00:02:20.700
is actually in machine learning.


00:02:20.700 --> 00:02:23.840
So the people who built this thing I'm gonna tell you about


00:02:23.840 --> 00:02:26.200
were really built it around focusing


00:02:26.200 --> 00:02:27.720
on the machine learning use case


00:02:27.720 --> 00:02:29.660
because people are handing around these models,


00:02:29.660 --> 00:02:31.000
these pre-trained models,


00:02:31.000 --> 00:02:32.980
and like here's the model loaded up in roll


00:02:32.980 --> 00:02:35.280
and loaded up in roll may mean


00:02:35.280 --> 00:02:37.400
you have an amazing artificial intelligence


00:02:37.400 --> 00:02:38.560
that drives a car,


00:02:38.560 --> 00:02:40.380
or it may mean that you have a virus


00:02:40.380 --> 00:02:43.400
because pickles can contain all sorts of bad things.


00:02:43.400 --> 00:02:45.120
All right, so this thing I'm gonna tell you about


00:02:45.120 --> 00:02:47.520
is called Fickling, like pickling.


00:02:47.520 --> 00:02:50.480
It's a decompiler, a static analyzer,


00:02:50.480 --> 00:02:52.320
and a byte code rewriter


00:02:52.320 --> 00:02:54.700
for Python pickle object serializations.


00:02:54.700 --> 00:02:56.320
So you take these pickle files,


00:02:56.320 --> 00:02:58.920
these object graphs of Python things,


00:02:58.920 --> 00:03:01.240
and you can pull them apart and look at them.


00:03:01.240 --> 00:03:04.060
You can ask questions like, is it a virus?


00:03:04.060 --> 00:03:07.200
And you can even say things like, let's put a virus in it.


00:03:07.200 --> 00:03:10.580
So all of these are possible with this tool.


00:03:10.580 --> 00:03:13.380
And it's made by a security pen testing company


00:03:13.380 --> 00:03:16.480
called TrailerBits for basically that purpose, right?


00:03:16.480 --> 00:03:21.240
So it's kind of either side, the attacking pen testing side


00:03:21.240 --> 00:03:23.540
or the defensive side of the store.


00:03:23.540 --> 00:03:25.680
So it works on three, six and above


00:03:25.680 --> 00:03:27.820
and you can see it's super simple.


00:03:27.820 --> 00:03:30.520
You say, basically do pickle stuff


00:03:30.520 --> 00:03:33.720
and you say from fickling.pickle import pickled


00:03:33.720 --> 00:03:38.680
and then you can kind of as if you would use the dis module


00:03:38.680 --> 00:03:40.760
to disassemble Python code,


00:03:40.760 --> 00:03:43.920
you can do that with this pickled library


00:03:43.920 --> 00:03:45.080
and it'll print out something


00:03:45.080 --> 00:03:48.160
that's kind of like an abstract syntax tree of the pickle.


00:03:48.160 --> 00:03:50.200
And they've got a real simple example on the GitHub repo.


00:03:50.200 --> 00:03:53.040
It's like a list of four numbers, one, two, three, four.


00:03:53.040 --> 00:03:55.040
And then it just shows you, look,


00:03:55.040 --> 00:03:58.480
we're assigning the results of creating a list


00:03:58.480 --> 00:03:59.960
and setting these constants in it.


00:03:59.960 --> 00:04:01.440
Another thing that is nice about this


00:04:01.440 --> 00:04:05.120
is it's not specifically built for Python developers.


00:04:05.120 --> 00:04:08.040
So it's also kind of something you can integrate


00:04:08.040 --> 00:04:10.520
into other tooling and say continuous integration


00:04:10.520 --> 00:04:11.360
and stuff like that.


00:04:11.360 --> 00:04:13.920
So you can run it off the command line as well.


00:04:13.920 --> 00:04:17.040
you can just on the terminal just type fickling


00:04:17.040 --> 00:04:20.440
and give it the data and then outcomes some answer.


00:04:20.440 --> 00:04:21.880
The one that people might wanna do


00:04:21.880 --> 00:04:24.720
is the dash dash check safety.


00:04:24.720 --> 00:04:28.000
And that will try to look and see if it's doing bad things


00:04:28.000 --> 00:04:30.920
like for example, talking to os.system


00:04:30.920 --> 00:04:33.080
or doing other malicious stuff like that.


00:04:33.080 --> 00:04:36.320
So that's good, but I wouldn't trust that entirely.


00:04:36.320 --> 00:04:37.800
Like how well is it checking, right?


00:04:37.800 --> 00:04:40.880
If you, for example, were to encode Python code


00:04:40.880 --> 00:04:43.240
and then decode it and then take that decoded stuff


00:04:43.240 --> 00:04:45.280
and it did OS something, right?


00:04:45.280 --> 00:04:47.120
You feed that to a Val or whatever.


00:04:47.120 --> 00:04:49.040
There's all sorts of layers here, right?


00:04:49.040 --> 00:04:50.720
So it can check for obvious things,


00:04:50.720 --> 00:04:53.760
but it's not like an absolute guarantee.


00:04:53.760 --> 00:04:57.300
And then finally, you can inject arbitrary Python code


00:04:57.300 --> 00:05:01.200
that will run on unpickling into an existing pickle file


00:05:01.200 --> 00:05:02.640
with dash dash inject.


00:05:02.640 --> 00:05:04.460
Seems fine, right?


00:05:04.460 --> 00:05:05.300
Everything's fine.


00:05:05.300 --> 00:05:06.600
- That's the fun part.


00:05:06.600 --> 00:05:07.720
- Yeah.


00:05:07.720 --> 00:05:11.560
Well, if there's no malicious code present, here you go.


00:05:11.560 --> 00:05:12.400
- Yeah, exactly.


00:05:12.400 --> 00:05:17.720
So maybe I'm imagining something like a little thing that count that like prints out in,


00:05:17.720 --> 00:05:20.040
in like flashing bright colors.


00:05:20.040 --> 00:05:22.440
We told you shouldn't unpickle untrusted data.


00:05:22.440 --> 00:05:24.560
Don't do it.


00:05:24.560 --> 00:05:25.560
Beginning hard drive format.


00:05:25.560 --> 00:05:27.320
It has a, like a loud beeping sound.


00:05:27.320 --> 00:05:28.680
It was three, two, one.


00:05:28.680 --> 00:05:33.160
And just like, obviously not really do it, but like that would get your attention, right?


00:05:33.160 --> 00:05:34.360
That'd be a mean, mean trick.


00:05:34.360 --> 00:05:37.880
But this, this is interesting.


00:05:37.880 --> 00:05:42.280
And you know, I didn't really put it together with the ML data exchange model exchange story,


00:05:42.280 --> 00:05:46.480
until I heard the folks talking about it over on Risky Business.


00:05:46.480 --> 00:05:49.680
So it seems like, especially in the ML story,


00:05:49.680 --> 00:05:51.480
you want to have a look at these kinds of things.


00:05:51.480 --> 00:05:52.480
Yeah.


00:05:52.480 --> 00:05:55.080
So I've thought about the use case before, actually,


00:05:55.080 --> 00:05:58.380
but I didn't know that somebody would solve it in this way.


00:05:58.380 --> 00:05:59.680
So pretty nice.


00:05:59.680 --> 00:06:02.180
Yeah, I mean, Eric, this is sort of your world, right?


00:06:02.180 --> 00:06:03.780
The machine learning stuff.


00:06:03.780 --> 00:06:06.780
So how does this sit with you?


00:06:06.780 --> 00:06:07.480
What do you think?


00:06:07.480 --> 00:06:08.880
Yeah, so it comes up all the time


00:06:08.880 --> 00:06:12.420
that you pick up some random model that someone has built.


00:06:12.420 --> 00:06:18.060
So as security issues become more prevalent, this might be a thing.


00:06:18.060 --> 00:06:18.580
Yeah.


00:06:18.580 --> 00:06:21.700
Well, is there better ways to store it?


00:06:21.700 --> 00:06:23.460
Like JSON or something else?


00:06:23.460 --> 00:06:26.280
So even if models don't have to exist that way, do they?


00:06:26.280 --> 00:06:26.760
Yeah.


00:06:26.760 --> 00:06:31.060
I mean, even if there was there, there are some projects that focus on building


00:06:31.060 --> 00:06:35.860
like some reusable interface across all these different frameworks and stuff.


00:06:36.180 --> 00:06:38.680
But in reality, people just use pickle.


00:06:38.680 --> 00:06:39.820
And yeah, really?


00:06:39.820 --> 00:06:40.220
Yeah.


00:06:40.220 --> 00:06:40.420
Yeah.


00:06:40.420 --> 00:06:40.720
They do.


00:06:40.720 --> 00:06:43.260
I just didn't know anybody was really using it for much.


00:06:43.260 --> 00:06:44.980
No, it's absolutely common.


00:06:44.980 --> 00:06:49.700
So within like say scikit-learn, which is probably most used library ever.


00:06:49.700 --> 00:06:53.780
Um, it just, use pickle on the pivot, store your files.


00:06:53.780 --> 00:06:54.700
Yeah.


00:06:54.700 --> 00:06:55.260
All right.


00:06:55.260 --> 00:06:55.820
Well, cool.


00:06:55.820 --> 00:06:59.820
So this is a useful library from trail a bit so people can check out and we're


00:06:59.820 --> 00:07:01.120
going to start with everything is fine.


00:07:01.120 --> 00:07:04.900
And we'll end with everything is fine as well, Brian, but over to you.


00:07:04.900 --> 00:07:05.500
Okay.


00:07:05.940 --> 00:07:08.420
>> Well, this is something,


00:07:08.420 --> 00:07:11.940
it's a blast from the past a little bit, about a year ago.


00:07:11.940 --> 00:07:18.020
Anyway, I want to talk about virtual environments and directories.


00:07:18.020 --> 00:07:22.100
There's an article from Hinnick that's called


00:07:22.100 --> 00:07:26.980
Python Project Local Virtual Env Management.


00:07:26.980 --> 00:07:28.600
That's a mouthful.


00:07:28.600 --> 00:07:34.020
But the idea, and we've talked about in the morning this before, is to be able to-


00:07:34.020 --> 00:07:34.740
>> I still want it.


00:07:34.740 --> 00:07:39.140
>> Yeah. If I've got several projects going on,


00:07:39.140 --> 00:07:43.900
whenever I CD into a directory with this project,


00:07:43.900 --> 00:07:47.560
I just want the virtual environment to activate automatically,


00:07:47.560 --> 00:07:49.300
and then when I leave it and go to another one,


00:07:49.300 --> 00:07:51.060
it's just automatically switched.


00:07:51.060 --> 00:07:54.060
Apparently, that already works and we've already covered it,


00:07:54.060 --> 00:07:59.100
but I missed it. Actually, in Episode 185,


00:07:59.100 --> 00:08:01.540
you brought up DuraEnv,


00:08:01.540 --> 00:08:03.400
and in part of it,


00:08:03.400 --> 00:08:06.560
it's the ability to you can have


00:08:06.560 --> 00:08:10.400
per project isolated development environments.


00:08:10.400 --> 00:08:12.960
But I didn't pick that up yet,


00:08:12.960 --> 00:08:15.200
but Hennig just said,


00:08:15.200 --> 00:08:17.040
this is how you do it.


00:08:17.040 --> 00:08:25.080
How you do it really is you have to install direnv first,


00:08:25.080 --> 00:08:30.760
and then you put a .envrc file in a directory and say,


00:08:30.760 --> 00:08:33.180
layout Python and then what Python version.


00:08:33.180 --> 00:08:35.780
Like layout Python, Python 3.9,


00:08:35.780 --> 00:08:37.360
and then that's it.


00:08:37.360 --> 00:08:39.080
That's all you got to do.


00:08:39.080 --> 00:08:42.040
I'm like, that can't be that easy.


00:08:42.040 --> 00:08:46.080
It was, I did it this morning and it's like, man, this is great.


00:08:46.080 --> 00:08:48.280
On my Mac, it's all solved,


00:08:48.280 --> 00:08:51.360
but it doesn't work on Windows.


00:08:51.360 --> 00:08:57.000
>> Must use Linux subsystem for


00:08:57.000 --> 00:09:00.120
Windows or Windows subsystem for Linux WSL, I guess it is.


00:09:00.120 --> 00:09:01.120
>> Okay.


00:09:01.120 --> 00:09:03.420
>> I mean, that semi-solves it.


00:09:03.420 --> 00:09:08.700
>> Yeah. I probably have this need more within Windows


00:09:08.700 --> 00:09:11.080
than I have on my Mac,


00:09:11.080 --> 00:09:12.800
but I have it in both places.


00:09:12.800 --> 00:09:15.920
I'm going to start using it. It's great.


00:09:15.920 --> 00:09:18.720
Plus, like you covered last time,


00:09:18.720 --> 00:09:21.480
you can also have a bonus.


00:09:21.480 --> 00:09:24.000
You can put environmental variables in there too,


00:09:24.000 --> 00:09:25.100
so that in the project,


00:09:25.100 --> 00:09:27.280
you've got perhaps your secrets


00:09:27.280 --> 00:09:31.840
or just different environmental settings you want to use.


00:09:31.840 --> 00:09:34.980
>> Yeah, I think people will look in your .rc,


00:09:34.980 --> 00:09:36.980
whatever, your bashrc,


00:09:36.980 --> 00:09:40.100
zshrc, whatever files for your secrets.


00:09:40.100 --> 00:09:43.340
But I suspect it's much less likely to go hunting through


00:09:43.340 --> 00:09:44.660
virtual environments and looking for


00:09:44.660 --> 00:09:47.260
their activate scripts and see what's in them.


00:09:47.260 --> 00:09:49.420
People know, but fewer people know


00:09:49.420 --> 00:09:50.980
that stuff gets stashed in there.


00:09:50.980 --> 00:09:52.180
So that's probably good.


00:09:52.180 --> 00:09:55.500
>> Right. So I guess mainly the story is,


00:09:55.500 --> 00:09:56.940
I knew that you could do it,


00:09:56.940 --> 00:09:58.420
but I didn't realize how easy it was.


00:09:58.420 --> 00:10:00.180
So it's super simple.


00:10:00.180 --> 00:10:01.460
It just took a little bit.


00:10:01.460 --> 00:10:03.780
And then my second thought was,


00:10:03.780 --> 00:10:06.900
it's not that hard to create virtual environments though.


00:10:06.900 --> 00:10:08.000
Is this saving any time?


00:10:08.000 --> 00:10:10.820
I still got to create this file and put this stuff in it.


00:10:10.820 --> 00:10:13.620
It actually is more typing, a little bit more,


00:10:13.620 --> 00:10:15.860
but it didn't take me long to realize


00:10:15.860 --> 00:10:17.380
that it's when you're switching


00:10:17.380 --> 00:10:21.260
between different directories, you save a ton of time.


00:10:21.260 --> 00:10:22.420
- Yeah, it's like going back and forth


00:10:22.420 --> 00:10:24.100
between projects, right?


00:10:24.100 --> 00:10:24.940
- Yeah.


00:10:24.940 --> 00:10:26.100
So that's it, really.


00:10:26.100 --> 00:10:27.420
- Just kind of neat.


00:10:27.420 --> 00:10:28.940
- Yeah, Brett out in the live stream


00:10:28.940 --> 00:10:30.140
has got a comment for us.


00:10:30.140 --> 00:10:34.200
If you use pyenv, you can run pyenv localenv name


00:10:34.200 --> 00:10:36.900
in your project folder and get this behavior as well.


00:10:36.900 --> 00:10:37.740
How do you do that?


00:10:37.740 --> 00:10:40.420
How do you get it to activate


00:10:40.420 --> 00:10:42.260
by just changing directory into it


00:10:42.260 --> 00:10:43.700
is what I'm not totally sure.


00:10:43.700 --> 00:10:44.540
Yeah.


00:10:44.540 --> 00:10:46.960
- Yeah, I think you get the Python version that way, right?


00:10:46.960 --> 00:10:48.980
But not the actual virtual environment.


00:10:48.980 --> 00:10:51.680
- Yeah, possibly if you've installed Python


00:10:51.680 --> 00:10:53.540
through pyenv as well, yeah.


00:10:53.540 --> 00:10:57.020
- And then David has a comment back,


00:10:57.020 --> 00:10:58.820
the first topic out there in the live stream.


00:10:58.820 --> 00:11:01.660
Hey David, the irony of legacy object serialization


00:11:01.660 --> 00:11:04.500
being used on cutting edge machine learning.


00:11:04.500 --> 00:11:05.700
- Like that one?


00:11:05.700 --> 00:11:07.660
- Yeah, and then Teddy at live stream.


00:11:07.660 --> 00:11:10.020
Hey Teddy, he says, does it work with an IDE?


00:11:10.020 --> 00:11:12.460
Changes the interpreter based on the folder you're in


00:11:12.460 --> 00:11:15.180
within a workspace in Viscose, for example.


00:11:15.180 --> 00:11:19.300
That I don't know, but I was gonna add the personal comment


00:11:19.300 --> 00:11:22.260
that I don't need this nearly as much


00:11:22.260 --> 00:11:23.780
as I felt like I used to,


00:11:23.780 --> 00:11:25.780
because the way I jump between projects


00:11:25.780 --> 00:11:28.300
is usually jump, open them up in PyCharm


00:11:28.300 --> 00:11:29.220
and jump between them there.


00:11:29.220 --> 00:11:30.780
And that always activates,


00:11:30.780 --> 00:11:32.460
if you go to the terminal in PyCharm,


00:11:32.460 --> 00:11:34.820
it activates that environment for that project.


00:11:34.820 --> 00:11:35.660
I don't know.


00:11:35.660 --> 00:11:38.180
- I'm on the command line all the time, so definitely.


00:11:38.180 --> 00:11:39.780
- Yeah, if you're on the command line


00:11:39.780 --> 00:11:40.980
busting around a lot,


00:11:40.980 --> 00:11:45.860
then both Brett and Alvaro have a followup.


00:11:45.860 --> 00:11:48.820
Pyenv adds a shim that intercepts the calls to Python.


00:11:48.820 --> 00:11:49.880
So yeah, very good.


00:11:49.880 --> 00:11:51.740
So it must be that you have to install Python


00:11:51.740 --> 00:11:54.000
through PyMV, but then it'll also do this.


00:11:54.000 --> 00:11:54.840
Very cool.


00:11:54.840 --> 00:11:55.680
Good to know I didn't know that.


00:11:55.680 --> 00:11:56.800
- Oh, me too.


00:11:56.800 --> 00:11:57.640
- Yeah. - Nice.


00:11:57.640 --> 00:12:00.020
- All right, Eric, first one is for you.


00:12:00.020 --> 00:12:03.400
- Yeah, so I brought with me


00:12:03.400 --> 00:12:06.700
the test containers Python library,


00:12:06.700 --> 00:12:09.480
which, and let me quote this one from the description,


00:12:09.480 --> 00:12:12.420
because I think it's a pretty good summarization.


00:12:12.420 --> 00:12:17.380
So test containers Python is a port for test containers Java


00:12:17.380 --> 00:12:18.700
that allows Docker containers


00:12:18.700 --> 00:12:20.500
for functional integration testing.


00:12:20.500 --> 00:12:23.900
It provides capabilities to spin up Docker containers,


00:12:23.900 --> 00:12:26.160
such as databases, Selenium web browsers,


00:12:26.160 --> 00:12:27.900
and any other containers for testing.


00:12:27.900 --> 00:12:32.680
So maybe not that many new things in here,


00:12:32.680 --> 00:12:35.480
but we use this in a project lately,


00:12:35.480 --> 00:12:41.180
and especially we use this in integration pipelines


00:12:41.180 --> 00:12:42.480
using cloud-native services.


00:12:42.480 --> 00:12:45.980
So there's a container for Google Cloud Pub/Sub, for example,


00:12:45.980 --> 00:12:48.220
which is pretty amazing, also for like your Kafka.


00:12:49.120 --> 00:12:51.160
This is originally a Java project,


00:12:51.160 --> 00:12:54.280
so there's still a lot to do for the Python community


00:12:54.280 --> 00:12:56.720
in order to catch up a bunch of interfaces


00:12:56.720 --> 00:12:59.400
that need to be implemented and stuff.


00:12:59.400 --> 00:13:03.120
One example, it is here.


00:13:03.120 --> 00:13:05.240
Let me just show you that one.


00:13:05.240 --> 00:13:11.520
There's in the repo, you can find an example


00:13:11.520 --> 00:13:15.280
of how to use this within your CI pipeline.


00:13:15.280 --> 00:13:17.200
So what's happening here is actually


00:13:17.200 --> 00:13:19.480
that if you have like a standard CI pipeline


00:13:19.480 --> 00:13:21.020
for your integration test,


00:13:21.020 --> 00:13:23.520
which consists of Docker containers


00:13:23.520 --> 00:13:25.160
that we use Docker in Docker


00:13:25.160 --> 00:13:27.800
to actually run the integration tests.


00:13:27.800 --> 00:13:31.920
So all your standard 2021 stuff in here, I guess.


00:13:31.920 --> 00:13:33.040
- Yeah, this is super cool.


00:13:33.040 --> 00:13:36.320
And the way you do it is you just create a context manager.


00:13:36.320 --> 00:13:37.160
Right? - Exactly.


00:13:37.160 --> 00:13:38.080
- You just say something like,


00:13:38.080 --> 00:13:41.280
with my SQL container, here's a connection string,


00:13:41.280 --> 00:13:42.800
and then you can just do


00:13:42.800 --> 00:13:44.760
your normal database stuff over to it.


00:13:44.760 --> 00:13:45.600
Yeah.


00:13:45.600 --> 00:13:47.960
So it integrates perfectly fine with pytest.


00:13:47.960 --> 00:13:51.000
We did that a lot.


00:13:51.000 --> 00:13:52.680
And yeah, the syntax is pretty cool.


00:13:52.680 --> 00:13:54.200
It's super easy to use.


00:13:54.200 --> 00:13:56.400
The integration with the CI/CD works fine.


00:13:56.400 --> 00:13:57.760
So, yeah.


00:13:57.760 --> 00:14:01.320
Yeah, Brian, we could use this with a test fixture


00:14:01.320 --> 00:14:03.360
and a little yield action, something like that.


00:14:03.360 --> 00:14:05.080
Yeah, yeah.


00:14:05.080 --> 00:14:08.000
I can't wait to try to play with something like this.


00:14:08.000 --> 00:14:10.520
Yeah. We talked about this way long ago.


00:14:10.520 --> 00:14:13.160
I brought this up, I believe, but I'm glad you brought it back, Eric,


00:14:13.160 --> 00:14:15.240
because it's really useful and it's really neat.


00:14:15.320 --> 00:14:17.560
And there's more stuff than actually is listed


00:14:17.560 --> 00:14:19.960
on the readme for some reason.


00:14:19.960 --> 00:14:20.800
- Exactly.


00:14:20.800 --> 00:14:24.200
- Like if you flip through the actual documentation,


00:14:24.200 --> 00:14:27.080
you can see that there's other containers, right?


00:14:27.080 --> 00:14:31.400
For example, I believe there's a MongoDB one, for example,


00:14:31.400 --> 00:14:33.120
but that's not listed in the documentation.


00:14:33.120 --> 00:14:36.040
And then the cloud emulators are probably neat for you


00:14:36.040 --> 00:14:38.240
for testing, right? - Absolutely.


00:14:38.240 --> 00:14:40.920
- I mean, that's one of the things that I find off-putting


00:14:40.920 --> 00:14:43.560
from like cloud native type stuff is


00:14:43.560 --> 00:14:45.400
if you don't have access to the cloud,


00:14:45.400 --> 00:14:46.560
you're dead in the water, right?


00:14:46.560 --> 00:14:48.980
Like, and that can be a problem for continuous integration


00:14:48.980 --> 00:14:50.280
and for all sorts of things.


00:14:50.280 --> 00:14:52.080
So things like this are pretty neat.


00:14:52.080 --> 00:14:53.240
- It's definitely challenging.


00:14:53.240 --> 00:14:54.740
So stuff like this helps.


00:14:54.740 --> 00:14:55.660
- Yeah.


00:14:55.660 --> 00:14:58.480
You know, to me, it's an interesting trade-off


00:14:58.480 --> 00:15:01.680
because on one hand, sure, you can mock out your database


00:15:01.680 --> 00:15:04.080
and then just test against your test data.


00:15:04.080 --> 00:15:07.080
But then if your data model and the database changes,


00:15:07.080 --> 00:15:09.620
but you don't think to update the test data,


00:15:09.620 --> 00:15:12.320
well, then your code's gonna, like SQLAlchemy, for example,


00:15:12.320 --> 00:15:15.360
will freak out and crash if the scheme is not a perfect match.


00:15:15.360 --> 00:15:17.780
Whereas you wouldn't find that in testing if you


00:15:17.780 --> 00:15:20.040
weren't letting it talk a little bit to the database.


00:15:20.040 --> 00:15:23.000
There's just interesting things like this.


00:15:23.000 --> 00:15:24.600
Brian, you even had an episode about


00:15:24.600 --> 00:15:26.900
not mocking out your database, didn't you?


00:15:26.900 --> 00:15:32.140
>> Yeah. I think as little as you can,


00:15:32.140 --> 00:15:34.280
I guess, let's do it the reverse.


00:15:34.280 --> 00:15:37.000
As close as you can have to the real environment, the better.


00:15:37.000 --> 00:15:39.880
This is when people are deploying on containers,


00:15:39.880 --> 00:15:42.080
testing with containers makes total sense.


00:15:42.080 --> 00:15:46.400
Yeah, absolutely. Absolutely. All right. Want to talk a little more infrastructure?


00:15:46.400 --> 00:15:47.200
Yeah.


00:15:47.200 --> 00:15:53.840
All right. So I have the one, it's got to be the shortest named thing for a featured item.


00:15:53.840 --> 00:15:59.760
JC, two letters. JC. So JC comes to us from Garrett. Thank you, Garrett for sending that in.


00:15:59.760 --> 00:16:03.600
And at first I was like, I don't know if this is relevant to me or if this is interesting.


00:16:03.600 --> 00:16:07.920
But the more I looked at it, I'm like, yeah, this is actually pretty awesome. To me, let me,


00:16:07.920 --> 00:16:10.880
I'll read what JC describes itself as in a moment.


00:16:10.880 --> 00:16:14.040
But to me, what this is, is it is basically


00:16:14.040 --> 00:16:18.700
what web scraping is to the web, JC is to Linux.


00:16:18.700 --> 00:16:21.640
So there's not a nice API for it,


00:16:21.640 --> 00:16:24.720
but I'd like to somehow wrap a little Python magic around it


00:16:24.720 --> 00:16:27.080
and then have an API for it, okay?


00:16:27.080 --> 00:16:29.680
So it's official story is it's a CLI tool


00:16:29.680 --> 00:16:31.580
in Python library that converts the output


00:16:31.580 --> 00:16:35.240
of popular command line tools and file types to JSON.


00:16:35.240 --> 00:16:38.600
and it allows piping one thing to the next, obviously,


00:16:38.600 --> 00:16:40.200
'cause it's Linux-like.


00:16:40.200 --> 00:16:42.640
So the idea is, you know, the example I have on there,


00:16:42.640 --> 00:16:44.280
the site there is dig.


00:16:44.280 --> 00:16:47.160
So dig is a command that'll give you information


00:16:47.160 --> 00:16:48.960
about a domain.


00:16:48.960 --> 00:16:53.640
So you could do something like dig example.com/pipe/jc,


00:16:53.640 --> 00:16:55.800
and then you tell jc what it's expecting,


00:16:55.800 --> 00:16:59.080
output from just whatever the print output


00:16:59.080 --> 00:17:01.120
to the terminal is in dig,


00:17:01.120 --> 00:17:02.720
and it will parse that


00:17:02.720 --> 00:17:04.960
and turn it into a Python dictionary, right?


00:17:04.960 --> 00:17:08.120
So I could sub-process run dig,


00:17:08.120 --> 00:17:10.200
but then I just get a huge blob of text


00:17:10.200 --> 00:17:12.400
and I've got to basically go through it,


00:17:12.400 --> 00:17:14.100
try to understand it and so on.


00:17:14.100 --> 00:17:15.760
And this knows the exact format


00:17:15.760 --> 00:17:18.400
and turns it into like structured data.


00:17:18.400 --> 00:17:21.380
So think of all of these different Linux commands


00:17:21.380 --> 00:17:23.560
you may run, you find a whole bunch of them.


00:17:23.560 --> 00:17:24.960
They're like a huge list down here.


00:17:24.960 --> 00:17:29.960
So airport, ARP, crontab, date, CSV,


00:17:29.960 --> 00:17:34.820
free, DU, hash, history, hosts, IP config,


00:17:34.820 --> 00:17:37.820
netstat, all those types of commands, syscontrol.


00:17:37.820 --> 00:17:40.260
So for example, if you're automating daemons


00:17:40.260 --> 00:17:42.740
and stuff like that, you can now do that from Python.


00:17:42.740 --> 00:17:44.740
And then instead of getting just a text blob


00:17:44.740 --> 00:17:47.500
and an exit code, you get a dictionary back


00:17:47.500 --> 00:17:49.860
that you can then check out and program against.


00:17:49.860 --> 00:17:50.700
What do you think?


00:17:50.700 --> 00:17:51.860
- Oh, that's pretty cool.


00:17:51.860 --> 00:17:53.020
- Yeah.


00:17:53.020 --> 00:17:55.280
- Yeah, there's a bunch of built-ins.


00:17:55.280 --> 00:18:01.240
Hopefully the thing you're looking for is one of these.


00:18:01.240 --> 00:18:02.080
- Yeah, exactly.


00:18:02.080 --> 00:18:05.720
I suspect it's not extraordinarily hard to do,


00:18:05.720 --> 00:18:08.240
to add another one.


00:18:08.240 --> 00:18:10.860
Yeah, but you can also run it on the command line.


00:18:10.860 --> 00:18:12.840
You don't have to use it in Python,


00:18:12.840 --> 00:18:14.760
which is what I was scrolling around looking for.


00:18:14.760 --> 00:18:17.080
So if you want to,


00:18:17.080 --> 00:18:20.000
like let's suppose I wanna go and run dig


00:18:20.000 --> 00:18:22.960
and I just want to go to the answers and get the data,


00:18:22.960 --> 00:18:26.120
which would be the IP address of some domain.


00:18:26.120 --> 00:18:31.120
You can say JC run this thing and then jq-r


00:18:31.440 --> 00:18:34.800
or there's like a way to just pass over a string.


00:18:34.800 --> 00:18:39.120
And basically, the string you pass in is the object dereferencing,


00:18:39.120 --> 00:18:41.520
the traversal of the dictionary.


00:18:41.520 --> 00:18:44.920
So dot bracket dot answer bracket dot data,


00:18:44.920 --> 00:18:47.720
and it'll go and pull that all apart, which is pretty neat.


00:18:47.720 --> 00:18:50.480
So it's got a cool command line,


00:18:50.480 --> 00:18:53.760
terminal automation aspect, just like Fickle.


00:18:53.760 --> 00:18:55.400
>> This is a nice wizard effect,


00:18:55.400 --> 00:18:57.800
so that if you know how to do this well,


00:18:57.800 --> 00:19:00.600
and people come over and watch you do this, they will be amazed.


00:19:00.600 --> 00:19:05.080
Yeah, just make sure you spin up your third or fourth terminal while you do that.


00:19:05.080 --> 00:19:06.760
Yeah, yeah, yeah.


00:19:06.760 --> 00:19:07.960
Exactly. Eric, what do you think?


00:19:07.960 --> 00:19:16.040
Yeah, so sounds like I found something that I can put my usual Sunday afternoon time into.


00:19:16.040 --> 00:19:18.120
So I'll play around with it.


00:19:18.120 --> 00:19:19.160
Yeah, yeah, yeah, yeah.


00:19:19.160 --> 00:19:19.660
Absolutely.


00:19:19.660 --> 00:19:24.920
Yeah, because every now and then I'll want to do some sub process thing and it needs to call


00:19:24.920 --> 00:19:29.000
some kind of Linux command. I'm like, "What am I going to do? Am I just going to check the


00:19:29.000 --> 00:19:34.700
status code, the return code and hope it works and then just say it didn't work if it didn't work or you know you could do so much more with this.


00:19:34.700 --> 00:19:35.700
Sorry Brian.


00:19:35.700 --> 00:19:41.600
Well there's some stuff that's less Unix-y that other people might need like


00:19:41.600 --> 00:19:47.000
you can parse PipList and PipShow


00:19:47.000 --> 00:19:51.700
and YAML and XML with this as well so


00:19:51.700 --> 00:19:52.700
that's pretty cool.


00:19:52.700 --> 00:19:54.200
Yeah, very cool.


00:19:54.200 --> 00:19:57.300
Alright, how about some ellipses?


00:19:57.300 --> 00:19:59.620
or I don't know how else to say it,


00:19:59.620 --> 00:20:01.700
dot, dot, dot, the next thing.


00:20:01.700 --> 00:20:03.900
>> Do say more.


00:20:03.900 --> 00:20:08.860
>> This was a surprise to me.


00:20:08.860 --> 00:20:12.500
I guess I haven't run into this yet or maybe just I forgot.


00:20:12.500 --> 00:20:17.500
But Python has ellipses and it has the keyword ellipses.


00:20:17.500 --> 00:20:20.260
Ellipses, ellipses, ellipses.


00:20:20.260 --> 00:20:21.180
>> Ellipsi.


00:20:21.180 --> 00:20:21.660
>> Ellipsi.


00:20:21.660 --> 00:20:23.060
>> Keep going.


00:20:23.060 --> 00:20:27.140
>> It's an actual object within Python. Who knew?


00:20:27.140 --> 00:20:30.080
Then also you can just do dot, dot, dot,


00:20:30.080 --> 00:20:35.560
and that's a valid thing, an identifier.


00:20:35.560 --> 00:20:37.480
It's a special value,


00:20:37.480 --> 00:20:41.440
but you can use it for all sorts of stuff.


00:20:41.440 --> 00:20:44.580
By the way, I'm referencing an article called,


00:20:44.580 --> 00:20:49.340
what is Python's ellipses object from Florian Dollitz?


00:20:49.340 --> 00:20:51.680
Thanks Florian for writing that.


00:20:51.680 --> 00:20:56.040
The Python or the definition really is,


00:20:56.040 --> 00:21:01.680
It's the same, the ellipsis literal is the same as the literal dot, dot, dot.


00:21:01.680 --> 00:21:05.660
It's a special value used mostly in conjunction with


00:21:05.660 --> 00:21:10.760
extended slicing syntax for user-defined container data types.


00:21:10.760 --> 00:21:13.000
I don't know, what does that mean?


00:21:13.000 --> 00:21:15.120
I guess pandas uses it maybe,


00:21:15.120 --> 00:21:19.840
but the article has some interesting things.


00:21:19.840 --> 00:21:24.740
You can use it in place of pass because it has a valid value.


00:21:24.740 --> 00:21:31.280
you can do a dictionary or a function definition,


00:21:31.280 --> 00:21:32.840
and instead of saying pass,


00:21:32.840 --> 00:21:35.840
just do three dots and that's valid Python.


00:21:35.840 --> 00:21:37.200
>> I'm liking that.


00:21:37.200 --> 00:21:38.920
I'm sure people will be like,


00:21:38.920 --> 00:21:40.440
what are you doing? But at the same time,


00:21:40.440 --> 00:21:43.040
it's like that's really what you wanted to put down there.


00:21:43.040 --> 00:21:44.560
It's like, I just don't want to put anything,


00:21:44.560 --> 00:21:46.960
but Python won't work unless I close this off.


00:21:46.960 --> 00:21:48.120
So here's a pass.


00:21:48.120 --> 00:21:50.640
>> Also, one of the things I was thinking about is,


00:21:50.640 --> 00:21:53.000
no, I would probably use pass all the time.


00:21:53.000 --> 00:21:54.940
when in that case.


00:21:54.940 --> 00:21:57.600
But when writing documentation and you


00:21:57.600 --> 00:22:00.080
really want to have a working code example,


00:22:00.080 --> 00:22:01.400
but you want to just indicate


00:22:01.400 --> 00:22:02.800
there's going to be more code there,


00:22:02.800 --> 00:22:04.720
that's a cool thing to put in.


00:22:04.720 --> 00:22:07.160
Anyway, so there's that.


00:22:07.160 --> 00:22:11.160
Then there's also using it in type information.


00:22:11.160 --> 00:22:13.480
With type information, for instance,


00:22:13.480 --> 00:22:15.280
apparently, let's say I've got


00:22:15.280 --> 00:22:18.880
a function that returns a tuple.


00:22:18.880 --> 00:22:20.780
We've got these words today.


00:22:20.780 --> 00:22:23.360
Anyway, a tuple with two integers,


00:22:23.360 --> 00:22:25.940
you can just say a tuple with two int,


00:22:25.940 --> 00:22:28.560
but if you don't know how many integers are going to be there,


00:22:28.560 --> 00:22:30.160
you can do the three dots,


00:22:30.160 --> 00:22:32.680
and apparently that works with typing.


00:22:32.680 --> 00:22:34.300
That's neat.


00:22:34.300 --> 00:22:35.440
>> That's very neat.


00:22:35.440 --> 00:22:38.040
>> There's not a lot. Apparently, it's used also


00:22:38.040 --> 00:22:42.240
within FastAPI and Typer, but it's there.


00:22:42.240 --> 00:22:44.600
If you want to use to implement


00:22:44.600 --> 00:22:47.080
a certain feature where that might make sense,


00:22:47.080 --> 00:22:50.440
it is a thing that's available to you.


00:22:50.440 --> 00:22:54.440
Maybe you could have an operator, a dot-dot-dot operator on your something.


00:22:54.440 --> 00:23:01.000
I learned this just the other day from a tweet from Raymond Hetchinger,


00:23:01.000 --> 00:23:03.320
where he was asking people, "How would you do this?"


00:23:03.320 --> 00:23:07.560
And he brought up the exact same example


00:23:07.560 --> 00:23:12.040
using the documentation and the pass or the ellipsis instead.


00:23:12.040 --> 00:23:16.120
And I didn't even know that this was a Python object.


00:23:16.200 --> 00:23:18.120
I knew it from the typing.


00:23:18.120 --> 00:23:23.000
But so the question is, can you pass this object around?


00:23:23.000 --> 00:23:27.060
Can you return from a function value, like dot dot dot?


00:23:27.060 --> 00:23:28.600
I imagine. I don't know.


00:23:28.600 --> 00:23:31.120
– It should work, right? – It should work, yeah.


00:23:31.120 --> 00:23:33.400
– Yeah. – Nice.


00:23:33.400 --> 00:23:38.100
I'll try it out while we go on to the next topic.


00:23:38.100 --> 00:23:41.760
Yeah, that one surprised me. Well done, Florian.


00:23:41.760 --> 00:23:45.860
Yeah, so the last one that I brought with me


00:23:45.920 --> 00:23:50.960
Actually, since I lead the data science and AI team, I gotta bring something with me that has to do with it.


00:23:50.960 --> 00:23:56.960
So I brought with me the PyTorch forecasting library.


00:23:56.960 --> 00:24:05.560
So, Michael, you just used this analogy a couple of minutes ago, so I'm going to use an analogy now.


00:24:05.560 --> 00:24:10.720
So for me, PyTorch forecasting looks like


00:24:10.780 --> 00:24:15.100
What fast AI does for computer vision and natural language processing,


00:24:15.100 --> 00:24:16.940
it does for time series forecasting.


00:24:16.940 --> 00:24:26.460
Because there was a lack of deep learning for time series forecasting.


00:24:26.460 --> 00:24:32.260
And actually, I think that PyTorch forecasting is going to close this gap.


00:24:32.260 --> 00:24:37.580
So it comes in with a bunch of important features, actually.


00:24:37.660 --> 00:24:40.820
So it's built on top of PyTorch Lightning,


00:24:40.820 --> 00:24:43.820
which allows training on CPUs,


00:24:43.820 --> 00:24:47.020
single and multiple GPUs, basically out of the box.


00:24:47.020 --> 00:24:51.100
So there's been a lot of software engineering involved


00:24:51.100 --> 00:24:53.200
for the data scientists in the past,


00:24:53.200 --> 00:24:57.600
and this library just makes it pretty simple.


00:24:57.600 --> 00:25:00.720
So you have to work very hard


00:25:00.720 --> 00:25:04.300
in order to mess things up with this library, I guess.


00:25:04.360 --> 00:25:12.760
So what it also brings is an implementation of a model


00:25:12.760 --> 00:25:17.640
that is called the Temporal Fusion Transformers.


00:25:17.640 --> 00:25:19.580
So this is from Google Research.


00:25:19.580 --> 00:25:23.280
Actually, there's also a TensorFlow-based implementation.


00:25:23.280 --> 00:25:27.320
I'm going to put the link to the paper in the show notes.


00:25:27.320 --> 00:25:30.660
This is a very interesting model


00:25:30.720 --> 00:25:38.720
that has performed pretty well on a dozen prominent benchmarks very lately.


00:25:38.720 --> 00:25:43.840
And it has a huge benefit, which is that it is pretty interpretable.


00:25:43.840 --> 00:25:48.480
So it does actually calculate feature portents for you.


00:25:48.480 --> 00:25:52.280
So this is, in the real world applications, very important,


00:25:52.280 --> 00:25:55.720
because whenever you stick your data into these models


00:25:55.720 --> 00:25:58.880
and something good comes out, people will always ask you,


00:25:58.960 --> 00:26:01.840
So, okay, so what was the important part of the data?


00:26:01.840 --> 00:26:05.600
How does it influence the model and the outcome?


00:26:05.600 --> 00:26:09.040
So, Temporal Fusion Transformers, they do this for you.


00:26:09.040 --> 00:26:13.280
Also, the PyTorch forecasting comes with Optumener,


00:26:13.280 --> 00:26:17.280
which is a popular library for hyperparameter tuning,


00:26:17.280 --> 00:26:19.760
which is also implemented in here.


00:26:19.760 --> 00:26:26.560
Right, so this does multivariate time series, multivariable time series?


00:26:27.200 --> 00:26:30.120
- Yeah, so the multi-horizon part of it


00:26:30.120 --> 00:26:32.360
is pretty important actually.


00:26:32.360 --> 00:26:33.200
So go ahead, Sven.


00:26:33.200 --> 00:26:35.160
- I was gonna say, so the hyperparameter tuning,


00:26:35.160 --> 00:26:37.080
my save, this part actually doesn't make any difference


00:26:37.080 --> 00:26:38.860
in the prediction, but this other part does.


00:26:38.860 --> 00:26:40.280
So pay attention to that, right?


00:26:40.280 --> 00:26:41.160
- Yeah, absolutely.


00:26:41.160 --> 00:26:43.160
- Yeah, yeah, this looks really good.


00:26:43.160 --> 00:26:46.560
So if you wanna predict the future about sales,


00:26:46.560 --> 00:26:50.240
home prices, heart rate, whatever, right?


00:26:50.240 --> 00:26:53.040
- Oh, it comes up all the time, comes up all the time.


00:26:53.040 --> 00:26:56.260
And I know from a couple of guys who work


00:26:56.260 --> 00:27:01.260
for the Google Clouds of this world and the AWS


00:27:01.260 --> 00:27:04.940
that within these software as a services


00:27:04.940 --> 00:27:06.500
or these APIs that they provide


00:27:06.500 --> 00:27:08.300
when like say a demand forecast,


00:27:08.300 --> 00:27:11.300
they use this temporary fusion transformers under the hood.


00:27:11.300 --> 00:27:13.140
So. - Yeah, this looks great.


00:27:13.140 --> 00:27:14.660
- Just spin it up and use it.


00:27:14.660 --> 00:27:16.260
- Yeah, great recommendation.


00:27:16.260 --> 00:27:17.700
Follow up from the previous one, Brian,


00:27:17.700 --> 00:27:19.060
Will McGugan, hey Will,


00:27:19.060 --> 00:27:21.540
the live stream says it's the dot, dot, dot,


00:27:21.540 --> 00:27:24.580
ellipsis sometimes is used as a sentinel value


00:27:24.580 --> 00:27:27.880
mean no value when none is a valid value.


00:27:27.880 --> 00:27:28.840
So, yeah.


00:27:28.840 --> 00:27:31.960
- Yeah, and also, yes, you can return it from a function.


00:27:31.960 --> 00:27:34.080
So, just fine.


00:27:34.080 --> 00:27:37.320
- And then let's see, someone out in the live stream


00:27:37.320 --> 00:27:39.640
asked if it has methods.


00:27:39.640 --> 00:27:41.520
Does it have methods or anything that you can do to it?


00:27:41.520 --> 00:27:43.100
That was Teddy.


00:27:43.100 --> 00:27:44.880
Yes, but only the built-ins, right?


00:27:44.880 --> 00:27:46.000
I don't think it, from object,


00:27:46.000 --> 00:27:47.480
I don't think it does anything interesting


00:27:47.480 --> 00:27:48.920
besides just B dot dot dot.


00:27:48.920 --> 00:27:51.800
And then Anderson, hey, Anderson says,


00:27:51.800 --> 00:27:53.640
it's a pity the ecosystem is moving


00:27:53.640 --> 00:27:55.020
towards PyTorch Lightning,


00:27:55.020 --> 00:27:57.120
the separation of concerns there is not very nice.


00:27:57.120 --> 00:27:59.760
In my opinion, PyTorch Ignite does a better job


00:27:59.760 --> 00:28:00.960
in that aspect.


00:28:00.960 --> 00:28:01.960
Eric, that's all you.


00:28:01.960 --> 00:28:03.920
- Yeah, fair enough.


00:28:03.920 --> 00:28:08.920
Still, I mean, one thing that you've got to keep in mind,


00:28:08.920 --> 00:28:11.760
so speaking of separation of concerns, right?


00:28:11.760 --> 00:28:13.280
There's so many data scientists out there


00:28:13.280 --> 00:28:16.520
that if you throw like separations of concerns at them,


00:28:16.520 --> 00:28:19.120
they just answer like, yeah, here's my model.


00:28:19.120 --> 00:28:22.680
So what is separation of concerns in this sense, right?


00:28:22.680 --> 00:28:25.520
So if this works, if people use it, it's probably good.


00:28:25.520 --> 00:28:27.480
Yeah, cool. Brian, extras?


00:28:27.480 --> 00:28:34.520
Extras! Oh, I just wanted to bring up that Python 3.10 RC2 is out.


00:28:34.520 --> 00:28:38.020
So the second release candidate for Python 3.10 is out,


00:28:38.020 --> 00:28:39.240
so people can play with it.


00:28:39.240 --> 00:28:42.980
Apparently, we're maybe a month away from getting 3.10.


00:28:42.980 --> 00:28:44.640
So I'm excited about that.


00:28:44.640 --> 00:28:46.720
Yeah, that's me. Very excited.


00:28:46.720 --> 00:28:49.480
Awesome. All right, I got a couple to throw out there.


00:28:49.480 --> 00:28:52.380
- Really? What a surprise. - Can you imagine?


00:28:52.440 --> 00:28:56.640
Can you imagine, so remember we talked about several things.


00:28:56.640 --> 00:29:01.640
I talked about how I turned off all of the tracking stuff


00:29:01.640 --> 00:29:05.860
and all those things on the website,


00:29:05.860 --> 00:29:08.020
which I think is good because so many people


00:29:08.020 --> 00:29:10.820
run ad blockers, it was like pretty inconsistent data


00:29:10.820 --> 00:29:11.940
anyway, inaccurate.


00:29:11.940 --> 00:29:14.440
Then I mentioned goaccess.io,


00:29:14.440 --> 00:29:16.260
and I said, that'd be cool, maybe we should apply it.


00:29:16.260 --> 00:29:18.460
I ended up writing a ton of automation to apply this


00:29:18.460 --> 00:29:20.540
to Python by stock Python, stock Python training,


00:29:20.540 --> 00:29:22.800
and all the things, and it's pretty cool.


00:29:22.800 --> 00:29:24.480
I built some automation that will download


00:29:24.480 --> 00:29:27.240
all the NGINX log files, some of which are text,


00:29:27.240 --> 00:29:29.040
some of which are gzipped,


00:29:29.040 --> 00:29:30.520
and then run this thing across it,


00:29:30.520 --> 00:29:34.400
and it will build like one giant monthly log thing,


00:29:34.400 --> 00:29:37.160
then Go Access can then turn into nice, beautiful reports.


00:29:37.160 --> 00:29:40.680
So very excited to have Go Access working well.


00:29:40.680 --> 00:29:42.160
And instead of running it on the server,


00:29:42.160 --> 00:29:44.440
I actually just download and then run it


00:29:44.440 --> 00:29:46.760
on like a monthly report locally,


00:29:46.760 --> 00:29:48.520
which I think is kind of cool.


00:29:48.520 --> 00:29:53.520
All right, one, we had some feedback about Caffeinate.


00:29:53.520 --> 00:29:55.200
Remember Caffeinate?


00:29:55.200 --> 00:29:58.460
You can type Caffeinate on the macOS terminal


00:29:58.460 --> 00:30:00.360
and it'll keep your system alive.


00:30:00.360 --> 00:30:04.560
Nathan Henry said, you mentioned over in macOS


00:30:04.560 --> 00:30:08.140
the Caffeinate tool says you can follow it


00:30:08.140 --> 00:30:11.160
with a long running command to keep awake.


00:30:11.160 --> 00:30:15.640
So you can say like Caffeinate Python dash C import time,


00:30:15.640 --> 00:30:18.880
time.sleep or so give it some kind of,


00:30:18.880 --> 00:30:20.620
so you could say caffeinate Python


00:30:20.620 --> 00:30:21.860
and some script you wanna run.


00:30:21.860 --> 00:30:25.820
So you could reverse it if that script doesn't use


00:30:25.820 --> 00:30:28.240
keep awake or I think that's what it was, right?


00:30:28.240 --> 00:30:30.640
So you could apply caffeinate to your Python code


00:30:30.640 --> 00:30:32.380
and just say, no, stay awake while you're doing this.


00:30:32.380 --> 00:30:36.360
Or you can even apply it to a running process using a PID.


00:30:36.360 --> 00:30:39.480
- So it just stays awake while that process is running then?


00:30:39.480 --> 00:30:40.960
- Yeah, and then it'll go away, yeah.


00:30:40.960 --> 00:30:42.160
- Oh, okay, nice.


00:30:42.160 --> 00:30:44.640
- Yeah, so it's like the reverse of what we talked about then.


00:30:44.640 --> 00:30:48.400
- Then Sean Taver from Teaching Python said,


00:30:48.400 --> 00:30:49.800
"Isn't this what we were asking for?"


00:30:49.800 --> 00:30:52.160
Remember, we were talking about the keyboards.


00:30:52.160 --> 00:30:53.000
- Keyboards.


00:30:53.000 --> 00:30:55.480
- And here's a Python one.


00:30:55.480 --> 00:30:58.120
This is M60 Mechanical Keyboard,


00:30:58.120 --> 00:31:02.160
the open source USB BLE Bluetooth Low Energy 5,


00:31:02.160 --> 00:31:06.920
hot swappable, 60% keyboard, powered by Python.


00:31:06.920 --> 00:31:08.760
So this one comes with Python built in,


00:31:08.760 --> 00:31:10.000
which is pretty excellent.


00:31:10.000 --> 00:31:13.000
So if people wanna play that, they definitely can.


00:31:13.000 --> 00:31:15.700
The next one I want to throw out there real quick


00:31:15.700 --> 00:31:17.400
comes to us from Mark Little,


00:31:17.400 --> 00:31:18.580
a friend of mine here in Portland.


00:31:18.580 --> 00:31:21.160
And basically the subtitle is that,


00:31:21.160 --> 00:31:24.380
this is an article from CNBC Finance News,


00:31:24.380 --> 00:31:26.320
that open source is booming.


00:31:26.320 --> 00:31:28.720
So the headline has to do with MongoDB,


00:31:28.720 --> 00:31:29.800
but it's more broad.


00:31:29.800 --> 00:31:31.880
So if people are interested in kind of following up on that,


00:31:31.880 --> 00:31:32.720
it's kind of cool.


00:31:32.720 --> 00:31:36.740
So MongoDB surged on Friday, which was last Friday.


00:31:36.740 --> 00:31:39.980
It's now worth as much as IBM paid for Red Hat.


00:31:39.980 --> 00:31:41.860
Databricks raised private financing


00:31:41.860 --> 00:31:45.640
around at $30 billion valuation.


00:31:45.640 --> 00:31:48.880
And just, you know, these are the mega open source companies


00:31:48.880 --> 00:31:50.400
but it's pretty interesting.


00:31:50.400 --> 00:31:52.800
To just give you a sense, like I read this article,


00:31:52.800 --> 00:31:53.640
I go, "That's pretty interesting.


00:31:53.640 --> 00:31:55.800
These numbers kind of just like bounce off me."


00:31:55.800 --> 00:31:58.280
But the one that made it stick for me


00:31:58.280 --> 00:32:00.960
was MongoDB was a private company for a while,


00:32:00.960 --> 00:32:02.920
then it became, then it IPO'd, right?


00:32:02.920 --> 00:32:04.680
It had VC money, then it IPO'd.


00:32:04.680 --> 00:32:05.840
Do you have a sense?


00:32:05.840 --> 00:32:08.360
Either of you have a sense for how much it IPO'd for?


00:32:08.360 --> 00:32:09.400
Seemed crazy, right?


00:32:09.400 --> 00:32:13.160
like a 1.2, 1.4 billion dollars,


00:32:13.160 --> 00:32:16.600
MongoDB is worth 30 billion now.


00:32:16.600 --> 00:32:19.440
Right, so even after like the crazy IPO,


00:32:19.440 --> 00:32:22.200
yeah, 1.2 billion to start and now over 30 billion.


00:32:22.200 --> 00:32:25.400
So that is an insane amount of growth in these.


00:32:25.400 --> 00:32:27.640
And then they talk about Confluent and JFrog


00:32:27.640 --> 00:32:30.360
and a bunch of other elastic.


00:32:30.360 --> 00:32:32.560
If you kind of wanna dig into the business side


00:32:32.560 --> 00:32:34.760
of open source, that's pretty interesting.


00:32:34.760 --> 00:32:35.960
All right, two more.


00:32:35.960 --> 00:32:38.100
I've been doing a ton of video encoding lately.


00:32:38.100 --> 00:32:41.980
I use FFmpeg for some of the audio processing


00:32:41.980 --> 00:32:44.600
and other types of things around both the podcasts


00:32:44.600 --> 00:32:45.660
and the courses.


00:32:45.660 --> 00:32:49.160
So attribution here, this is from Jim Anderson,


00:32:49.160 --> 00:32:50.460
sent this over, thanks Jim.


00:32:50.460 --> 00:32:52.920
Ffmpeg.wasm.


00:32:52.920 --> 00:32:55.560
So here's FFmpeg, which is a very popular tool


00:32:55.560 --> 00:32:58.480
in that world, but as a web assembly thing,


00:32:58.480 --> 00:33:00.280
which is pretty awesome.


00:33:00.280 --> 00:33:04.420
And I'm trying to remember what the name of the library was,


00:33:04.420 --> 00:33:07.260
but over in, we did talk about on Python Bytes,


00:33:07.260 --> 00:33:11.620
I think with Cecil Philip on one time, maybe it was even him that brought it up.


00:33:11.620 --> 00:33:16.340
But there's a Python library that will run web assemblies.


00:33:16.340 --> 00:33:19.940
So not run web assembly in their browser or put Python in their browser, but


00:33:19.940 --> 00:33:22.740
reverse it, like I have a web assembly library that does cool stuff.


00:33:22.740 --> 00:33:24.500
Put it in my Python code and run it here.


00:33:24.500 --> 00:33:30.780
So you could take FFmpeg.wasm and pure Python and have like a no dependency


00:33:30.780 --> 00:33:34.380
sort of audio video processing tool in Python, which I think is pretty cool.


00:33:34.380 --> 00:33:34.860
Cool.


00:33:34.860 --> 00:33:35.420
All right.


00:33:35.540 --> 00:33:38.140
Last one, I told you we'd start with everything is fine,


00:33:38.140 --> 00:33:39.840
and we're going to end with everything is fine.


00:33:39.840 --> 00:33:45.140
Credit card stealing backdoored packages found in Python's PyPI library hub.


00:33:45.140 --> 00:33:46.940
What? That's not good?


00:33:46.940 --> 00:33:49.040
This is not good.


00:33:49.040 --> 00:33:50.840
This is not good.


00:33:50.840 --> 00:33:55.540
When you hear people talk about remote code execution,


00:33:55.540 --> 00:33:56.840
that typically is bad.


00:33:56.840 --> 00:33:59.840
Like, I'm on the internet, people send me bad stuff,


00:33:59.840 --> 00:34:03.140
now they have my computer, and I don't even necessarily know it.


00:34:03.140 --> 00:34:05.140
So apparently, in addition to this,


00:34:05.140 --> 00:34:06.780
These were found and removed.


00:34:06.780 --> 00:34:08.540
It was something, what was it?


00:34:08.540 --> 00:34:11.940
It was something around the line of noblesse,


00:34:11.940 --> 00:34:16.420
N-O-B-L-E-S-S-E, and a couple of variations on that spelling.


00:34:16.420 --> 00:34:17.380
That was the problem.


00:34:17.380 --> 00:34:18.940
So I'm happy to see I didn't install that,


00:34:18.940 --> 00:34:20.340
but this doesn't make me happy.


00:34:20.340 --> 00:34:21.580
It looks like it's fixed.


00:34:21.580 --> 00:34:23.620
So the PyPI team also just patched


00:34:23.620 --> 00:34:25.980
a remote code execution hole in their platform,


00:34:25.980 --> 00:34:28.220
which potentially could have been exploited


00:34:28.220 --> 00:34:31.680
to hijack the entirety of PyPI.


00:34:31.680 --> 00:34:33.320
That one makes me way more nervous


00:34:33.320 --> 00:34:35.040
than typo squatting or the weirdness.


00:34:35.040 --> 00:34:40.200
And it was a vulnerability in the way that they were doing GitHub actions with


00:34:40.200 --> 00:34:46.040
PyPI, which allowed a malicious pull request to execute arbitrary code over


00:34:46.040 --> 00:34:47.160
there, which is not ideal.


00:34:47.160 --> 00:34:47.960
Nice.


00:34:47.960 --> 00:34:48.520
Yeah.


00:34:48.520 --> 00:34:49.940
But I'm glad to hear that's fixed.


00:34:49.940 --> 00:34:51.000
Anyway, everything's fine.


00:34:51.000 --> 00:34:53.960
Doesn't feel fine.


00:34:53.960 --> 00:34:55.320
No, not at all.


00:34:55.320 --> 00:35:00.440
More like a nightmare to be honest.


00:35:00.440 --> 00:35:01.040
Yeah.


00:35:01.040 --> 00:35:04.000
To be honest, Eric, anything else you want to share with us?


00:35:04.320 --> 00:35:08.480
Oh, no, just thank you guys again for having me on the show.


00:35:08.480 --> 00:35:09.880
Uh, pretty fun.


00:35:09.880 --> 00:35:14.480
And, make sure that, you guys follow me on Twitter and, yeah.


00:35:14.480 --> 00:35:15.040
Awesome.


00:35:15.040 --> 00:35:18.420
I'll put a link in the show notes for your Twitter.


00:35:18.420 --> 00:35:19.760
No, we aren't done.


00:35:19.760 --> 00:35:20.360
Are we, Brian?


00:35:20.360 --> 00:35:21.600
No, we need to joke.


00:35:21.600 --> 00:35:22.600
One thing is missing.


00:35:22.600 --> 00:35:22.800
Yeah.


00:35:22.800 --> 00:35:23.040
Yeah.


00:35:23.040 --> 00:35:23.240
Yeah.


00:35:23.240 --> 00:35:23.960
It's important.


00:35:23.960 --> 00:35:30.560
So this one is more of a, not an ML one is more of a web, web API type type thing.


00:35:30.560 --> 00:35:33.540
So, so often people will write web APIs


00:35:33.540 --> 00:35:36.080
and just return some kind of message


00:35:36.080 --> 00:35:38.440
in a JavaScript dictionary that says things


00:35:38.440 --> 00:35:40.100
like bad response or whatever,


00:35:40.100 --> 00:35:42.820
but you're supposed to use HTTP status codes, right?


00:35:42.820 --> 00:35:44.840
Like if there's a bad request,


00:35:44.840 --> 00:35:47.180
you should return the status code 400.


00:35:47.180 --> 00:35:49.460
If it's not found as an entity,


00:35:49.460 --> 00:35:51.800
you should return 404 or whatever.


00:35:51.800 --> 00:35:55.600
So here's like two kids at school exchanging messages


00:35:55.600 --> 00:35:57.780
and has server on one of them, client on the other,


00:35:57.780 --> 00:36:00.140
and 200 on the message exchange here.


00:36:00.140 --> 00:36:03.580
And then at the bottom, the one kid that got that message


00:36:03.580 --> 00:36:04.860
reads the JavaScript and says,


00:36:04.860 --> 00:36:07.180
"Status code 400, detail bad request."


00:36:07.180 --> 00:36:09.180
He's like, "Why, why did you do this to me?"


00:36:09.180 --> 00:36:12.300
(Brian and Eric laughing)


00:36:12.300 --> 00:36:13.300
- This is good.


00:36:13.300 --> 00:36:15.140
- Yeah, this is like little Bobby Tables.


00:36:15.140 --> 00:36:16.180
Let this be a lesson to you.


00:36:16.180 --> 00:36:17.860
You don't pass messages like that.


00:36:17.860 --> 00:36:18.700
Come on.


00:36:18.700 --> 00:36:20.060
- It's so true.


00:36:20.060 --> 00:36:22.060
- It's totally true, totally true.


00:36:22.060 --> 00:36:23.960
All right, well, that's it for our jokes


00:36:23.960 --> 00:36:24.940
and everything, Brian.


00:36:24.940 --> 00:36:28.860
- Yeah, we'll have another fun Wednesday on Python Bytes.


00:36:28.860 --> 00:36:29.700
- Absolutely.


00:36:29.700 --> 00:36:31.700
Thanks, Brian. Yeah, thanks, Eric, for being here.


00:36:31.700 --> 00:36:33.700
Thanks a lot, guys. See you around.


00:36:33.700 --> 00:36:35.700
Bye all. Bye.


00:36:35.700 --> 00:36:42.780
Python bytes. Follow the show on Twitter via @Pythonbytes. That's Python bytes as in B-Y-T-E-S.


00:36:42.780 --> 00:36:47.700
Get the full show notes over at Pythonbytes.fm. If you have a news item we should cover, just


00:36:47.700 --> 00:36:52.060
visit Pythonbytes.fm and click submit in the nav bar. We're always on the lookout for sharing


00:36:52.060 --> 00:36:55.980
something cool. If you want to join us for the live recording, just visit the website


00:36:55.980 --> 00:37:00.940
and click live stream to get notified of when our next episode goes live. That's usually


00:37:00.940 --> 00:37:06.340
happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian


00:37:06.340 --> 00:37:10.500
Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with


00:37:10.500 --> 00:37:11.660
your friends and colleagues.

